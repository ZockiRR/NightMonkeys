// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint32_t tps_numerator;
 *     uint32_t tps_denominator;
 *     uint32_t num_loops;
 *     int have_timecodes;
 * }
 * }
 */
public class JxlAnimationHeader {

    JxlAnimationHeader() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("tps_numerator"),
        decode_h.C_INT.withName("tps_denominator"),
        decode_h.C_INT.withName("num_loops"),
        decode_h.C_INT.withName("have_timecodes")
    ).withName("$anon$77:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tps_numerator$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tps_numerator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t tps_numerator
     * }
     */
    public static final OfInt tps_numerator$layout() {
        return tps_numerator$LAYOUT;
    }

    private static final long tps_numerator$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t tps_numerator
     * }
     */
    public static final long tps_numerator$offset() {
        return tps_numerator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t tps_numerator
     * }
     */
    public static int tps_numerator(MemorySegment struct) {
        return struct.get(tps_numerator$LAYOUT, tps_numerator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t tps_numerator
     * }
     */
    public static void tps_numerator(MemorySegment struct, int fieldValue) {
        struct.set(tps_numerator$LAYOUT, tps_numerator$OFFSET, fieldValue);
    }

    private static final OfInt tps_denominator$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tps_denominator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t tps_denominator
     * }
     */
    public static final OfInt tps_denominator$layout() {
        return tps_denominator$LAYOUT;
    }

    private static final long tps_denominator$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t tps_denominator
     * }
     */
    public static final long tps_denominator$offset() {
        return tps_denominator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t tps_denominator
     * }
     */
    public static int tps_denominator(MemorySegment struct) {
        return struct.get(tps_denominator$LAYOUT, tps_denominator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t tps_denominator
     * }
     */
    public static void tps_denominator(MemorySegment struct, int fieldValue) {
        struct.set(tps_denominator$LAYOUT, tps_denominator$OFFSET, fieldValue);
    }

    private static final OfInt num_loops$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_loops"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t num_loops
     * }
     */
    public static final OfInt num_loops$layout() {
        return num_loops$LAYOUT;
    }

    private static final long num_loops$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t num_loops
     * }
     */
    public static final long num_loops$offset() {
        return num_loops$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t num_loops
     * }
     */
    public static int num_loops(MemorySegment struct) {
        return struct.get(num_loops$LAYOUT, num_loops$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t num_loops
     * }
     */
    public static void num_loops(MemorySegment struct, int fieldValue) {
        struct.set(num_loops$LAYOUT, num_loops$OFFSET, fieldValue);
    }

    private static final OfInt have_timecodes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("have_timecodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int have_timecodes
     * }
     */
    public static final OfInt have_timecodes$layout() {
        return have_timecodes$LAYOUT;
    }

    private static final long have_timecodes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int have_timecodes
     * }
     */
    public static final long have_timecodes$offset() {
        return have_timecodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int have_timecodes
     * }
     */
    public static int have_timecodes(MemorySegment struct) {
        return struct.get(have_timecodes$LAYOUT, have_timecodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int have_timecodes
     * }
     */
    public static void have_timecodes(MemorySegment struct, int fieldValue) {
        struct.set(have_timecodes$LAYOUT, have_timecodes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

