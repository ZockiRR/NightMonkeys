// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint32_t duration;
 *     uint32_t timecode;
 *     uint32_t name_length;
 *     int is_last;
 * }
 * }
 */
public class JxlFrameHeader {

    JxlFrameHeader() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("duration"),
        decode_h.C_INT.withName("timecode"),
        decode_h.C_INT.withName("name_length"),
        decode_h.C_INT.withName("is_last")
    ).withName("$anon$291:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt duration$LAYOUT = (OfInt)$LAYOUT.select(groupElement("duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t duration
     * }
     */
    public static final OfInt duration$layout() {
        return duration$LAYOUT;
    }

    private static final long duration$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t duration
     * }
     */
    public static final long duration$offset() {
        return duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t duration
     * }
     */
    public static int duration(MemorySegment struct) {
        return struct.get(duration$LAYOUT, duration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t duration
     * }
     */
    public static void duration(MemorySegment struct, int fieldValue) {
        struct.set(duration$LAYOUT, duration$OFFSET, fieldValue);
    }

    private static final OfInt timecode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timecode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t timecode
     * }
     */
    public static final OfInt timecode$layout() {
        return timecode$LAYOUT;
    }

    private static final long timecode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t timecode
     * }
     */
    public static final long timecode$offset() {
        return timecode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t timecode
     * }
     */
    public static int timecode(MemorySegment struct) {
        return struct.get(timecode$LAYOUT, timecode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t timecode
     * }
     */
    public static void timecode(MemorySegment struct, int fieldValue) {
        struct.set(timecode$LAYOUT, timecode$OFFSET, fieldValue);
    }

    private static final OfInt name_length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("name_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static final OfInt name_length$layout() {
        return name_length$LAYOUT;
    }

    private static final long name_length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static final long name_length$offset() {
        return name_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static int name_length(MemorySegment struct) {
        return struct.get(name_length$LAYOUT, name_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static void name_length(MemorySegment struct, int fieldValue) {
        struct.set(name_length$LAYOUT, name_length$OFFSET, fieldValue);
    }

    private static final OfInt is_last$LAYOUT = (OfInt)$LAYOUT.select(groupElement("is_last"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int is_last
     * }
     */
    public static final OfInt is_last$layout() {
        return is_last$LAYOUT;
    }

    private static final long is_last$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int is_last
     * }
     */
    public static final long is_last$offset() {
        return is_last$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int is_last
     * }
     */
    public static int is_last(MemorySegment struct) {
        return struct.get(is_last$LAYOUT, is_last$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int is_last
     * }
     */
    public static void is_last(MemorySegment struct, int fieldValue) {
        struct.set(is_last$LAYOUT, is_last$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

