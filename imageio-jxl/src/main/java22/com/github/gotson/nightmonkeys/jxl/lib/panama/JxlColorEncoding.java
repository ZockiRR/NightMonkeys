// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     JxlColorSpace color_space;
 *     JxlWhitePoint white_point;
 *     double white_point_xy[2];
 *     JxlPrimaries primaries;
 *     double primaries_red_xy[2];
 *     double primaries_green_xy[2];
 *     double primaries_blue_xy[2];
 *     JxlTransferFunction transfer_function;
 *     double gamma;
 *     JxlRenderingIntent rendering_intent;
 * }
 * }
 */
public class JxlColorEncoding {

    JxlColorEncoding() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("color_space"),
        decode_h.C_INT.withName("white_point"),
        MemoryLayout.sequenceLayout(2, decode_h.C_DOUBLE).withName("white_point_xy"),
        decode_h.C_INT.withName("primaries"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(2, decode_h.C_DOUBLE).withName("primaries_red_xy"),
        MemoryLayout.sequenceLayout(2, decode_h.C_DOUBLE).withName("primaries_green_xy"),
        MemoryLayout.sequenceLayout(2, decode_h.C_DOUBLE).withName("primaries_blue_xy"),
        decode_h.C_INT.withName("transfer_function"),
        MemoryLayout.paddingLayout(4),
        decode_h.C_DOUBLE.withName("gamma"),
        decode_h.C_INT.withName("rendering_intent"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$101:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt color_space$LAYOUT = (OfInt)$LAYOUT.select(groupElement("color_space"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlColorSpace color_space
     * }
     */
    public static final OfInt color_space$layout() {
        return color_space$LAYOUT;
    }

    private static final long color_space$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlColorSpace color_space
     * }
     */
    public static final long color_space$offset() {
        return color_space$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlColorSpace color_space
     * }
     */
    public static int color_space(MemorySegment struct) {
        return struct.get(color_space$LAYOUT, color_space$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlColorSpace color_space
     * }
     */
    public static void color_space(MemorySegment struct, int fieldValue) {
        struct.set(color_space$LAYOUT, color_space$OFFSET, fieldValue);
    }

    private static final OfInt white_point$LAYOUT = (OfInt)$LAYOUT.select(groupElement("white_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlWhitePoint white_point
     * }
     */
    public static final OfInt white_point$layout() {
        return white_point$LAYOUT;
    }

    private static final long white_point$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlWhitePoint white_point
     * }
     */
    public static final long white_point$offset() {
        return white_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlWhitePoint white_point
     * }
     */
    public static int white_point(MemorySegment struct) {
        return struct.get(white_point$LAYOUT, white_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlWhitePoint white_point
     * }
     */
    public static void white_point(MemorySegment struct, int fieldValue) {
        struct.set(white_point$LAYOUT, white_point$OFFSET, fieldValue);
    }

    private static final SequenceLayout white_point_xy$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("white_point_xy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static final SequenceLayout white_point_xy$layout() {
        return white_point_xy$LAYOUT;
    }

    private static final long white_point_xy$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static final long white_point_xy$offset() {
        return white_point_xy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static MemorySegment white_point_xy(MemorySegment struct) {
        return struct.asSlice(white_point_xy$OFFSET, white_point_xy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static void white_point_xy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, white_point_xy$OFFSET, white_point_xy$LAYOUT.byteSize());
    }

    private static long[] white_point_xy$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static long[] white_point_xy$dimensions() {
        return white_point_xy$DIMS;
    }
    private static final VarHandle white_point_xy$ELEM_HANDLE = white_point_xy$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static double white_point_xy(MemorySegment struct, long index0) {
        return (double)white_point_xy$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double white_point_xy[2]
     * }
     */
    public static void white_point_xy(MemorySegment struct, long index0, double fieldValue) {
        white_point_xy$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt primaries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("primaries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlPrimaries primaries
     * }
     */
    public static final OfInt primaries$layout() {
        return primaries$LAYOUT;
    }

    private static final long primaries$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlPrimaries primaries
     * }
     */
    public static final long primaries$offset() {
        return primaries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlPrimaries primaries
     * }
     */
    public static int primaries(MemorySegment struct) {
        return struct.get(primaries$LAYOUT, primaries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlPrimaries primaries
     * }
     */
    public static void primaries(MemorySegment struct, int fieldValue) {
        struct.set(primaries$LAYOUT, primaries$OFFSET, fieldValue);
    }

    private static final SequenceLayout primaries_red_xy$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("primaries_red_xy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static final SequenceLayout primaries_red_xy$layout() {
        return primaries_red_xy$LAYOUT;
    }

    private static final long primaries_red_xy$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static final long primaries_red_xy$offset() {
        return primaries_red_xy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static MemorySegment primaries_red_xy(MemorySegment struct) {
        return struct.asSlice(primaries_red_xy$OFFSET, primaries_red_xy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static void primaries_red_xy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, primaries_red_xy$OFFSET, primaries_red_xy$LAYOUT.byteSize());
    }

    private static long[] primaries_red_xy$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static long[] primaries_red_xy$dimensions() {
        return primaries_red_xy$DIMS;
    }
    private static final VarHandle primaries_red_xy$ELEM_HANDLE = primaries_red_xy$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static double primaries_red_xy(MemorySegment struct, long index0) {
        return (double)primaries_red_xy$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double primaries_red_xy[2]
     * }
     */
    public static void primaries_red_xy(MemorySegment struct, long index0, double fieldValue) {
        primaries_red_xy$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout primaries_green_xy$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("primaries_green_xy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static final SequenceLayout primaries_green_xy$layout() {
        return primaries_green_xy$LAYOUT;
    }

    private static final long primaries_green_xy$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static final long primaries_green_xy$offset() {
        return primaries_green_xy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static MemorySegment primaries_green_xy(MemorySegment struct) {
        return struct.asSlice(primaries_green_xy$OFFSET, primaries_green_xy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static void primaries_green_xy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, primaries_green_xy$OFFSET, primaries_green_xy$LAYOUT.byteSize());
    }

    private static long[] primaries_green_xy$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static long[] primaries_green_xy$dimensions() {
        return primaries_green_xy$DIMS;
    }
    private static final VarHandle primaries_green_xy$ELEM_HANDLE = primaries_green_xy$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static double primaries_green_xy(MemorySegment struct, long index0) {
        return (double)primaries_green_xy$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double primaries_green_xy[2]
     * }
     */
    public static void primaries_green_xy(MemorySegment struct, long index0, double fieldValue) {
        primaries_green_xy$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout primaries_blue_xy$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("primaries_blue_xy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static final SequenceLayout primaries_blue_xy$layout() {
        return primaries_blue_xy$LAYOUT;
    }

    private static final long primaries_blue_xy$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static final long primaries_blue_xy$offset() {
        return primaries_blue_xy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static MemorySegment primaries_blue_xy(MemorySegment struct) {
        return struct.asSlice(primaries_blue_xy$OFFSET, primaries_blue_xy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static void primaries_blue_xy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, primaries_blue_xy$OFFSET, primaries_blue_xy$LAYOUT.byteSize());
    }

    private static long[] primaries_blue_xy$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static long[] primaries_blue_xy$dimensions() {
        return primaries_blue_xy$DIMS;
    }
    private static final VarHandle primaries_blue_xy$ELEM_HANDLE = primaries_blue_xy$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static double primaries_blue_xy(MemorySegment struct, long index0) {
        return (double)primaries_blue_xy$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double primaries_blue_xy[2]
     * }
     */
    public static void primaries_blue_xy(MemorySegment struct, long index0, double fieldValue) {
        primaries_blue_xy$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt transfer_function$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transfer_function"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlTransferFunction transfer_function
     * }
     */
    public static final OfInt transfer_function$layout() {
        return transfer_function$LAYOUT;
    }

    private static final long transfer_function$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlTransferFunction transfer_function
     * }
     */
    public static final long transfer_function$offset() {
        return transfer_function$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlTransferFunction transfer_function
     * }
     */
    public static int transfer_function(MemorySegment struct) {
        return struct.get(transfer_function$LAYOUT, transfer_function$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlTransferFunction transfer_function
     * }
     */
    public static void transfer_function(MemorySegment struct, int fieldValue) {
        struct.set(transfer_function$LAYOUT, transfer_function$OFFSET, fieldValue);
    }

    private static final OfDouble gamma$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("gamma"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static final OfDouble gamma$layout() {
        return gamma$LAYOUT;
    }

    private static final long gamma$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static final long gamma$offset() {
        return gamma$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static double gamma(MemorySegment struct) {
        return struct.get(gamma$LAYOUT, gamma$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static void gamma(MemorySegment struct, double fieldValue) {
        struct.set(gamma$LAYOUT, gamma$OFFSET, fieldValue);
    }

    private static final OfInt rendering_intent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rendering_intent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlRenderingIntent rendering_intent
     * }
     */
    public static final OfInt rendering_intent$layout() {
        return rendering_intent$LAYOUT;
    }

    private static final long rendering_intent$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlRenderingIntent rendering_intent
     * }
     */
    public static final long rendering_intent$offset() {
        return rendering_intent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlRenderingIntent rendering_intent
     * }
     */
    public static int rendering_intent(MemorySegment struct) {
        return struct.get(rendering_intent$LAYOUT, rendering_intent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlRenderingIntent rendering_intent
     * }
     */
    public static void rendering_intent(MemorySegment struct, int fieldValue) {
        struct.set(rendering_intent$LAYOUT, rendering_intent$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

