// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JxlBasicInfo {
 *     int have_container;
 *     uint32_t xsize;
 *     uint32_t ysize;
 *     uint32_t bits_per_sample;
 *     uint32_t exponent_bits_per_sample;
 *     float intensity_target;
 *     float min_nits;
 *     int relative_to_max_display;
 *     float linear_below;
 *     int uses_original_profile;
 *     int have_preview;
 *     int have_animation;
 *     JxlOrientation orientation;
 *     uint32_t num_color_channels;
 *     uint32_t num_extra_channels;
 *     uint32_t alpha_bits;
 *     uint32_t alpha_exponent_bits;
 *     int alpha_premultiplied;
 *     JxlPreviewHeader preview;
 *     JxlAnimationHeader animation;
 *     uint8_t padding[108];
 * }
 * }
 */
public class JxlBasicInfo {

    JxlBasicInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("have_container"),
        decode_h.C_INT.withName("xsize"),
        decode_h.C_INT.withName("ysize"),
        decode_h.C_INT.withName("bits_per_sample"),
        decode_h.C_INT.withName("exponent_bits_per_sample"),
        decode_h.C_FLOAT.withName("intensity_target"),
        decode_h.C_FLOAT.withName("min_nits"),
        decode_h.C_INT.withName("relative_to_max_display"),
        decode_h.C_FLOAT.withName("linear_below"),
        decode_h.C_INT.withName("uses_original_profile"),
        decode_h.C_INT.withName("have_preview"),
        decode_h.C_INT.withName("have_animation"),
        decode_h.C_INT.withName("orientation"),
        decode_h.C_INT.withName("num_color_channels"),
        decode_h.C_INT.withName("num_extra_channels"),
        decode_h.C_INT.withName("alpha_bits"),
        decode_h.C_INT.withName("alpha_exponent_bits"),
        decode_h.C_INT.withName("alpha_premultiplied"),
        JxlPreviewHeader.layout().withName("preview"),
        JxlAnimationHeader.layout().withName("animation"),
        MemoryLayout.sequenceLayout(108, decode_h.C_CHAR).withName("padding")
    ).withName("JxlBasicInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt have_container$LAYOUT = (OfInt)$LAYOUT.select(groupElement("have_container"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int have_container
     * }
     */
    public static final OfInt have_container$layout() {
        return have_container$LAYOUT;
    }

    private static final long have_container$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int have_container
     * }
     */
    public static final long have_container$offset() {
        return have_container$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int have_container
     * }
     */
    public static int have_container(MemorySegment struct) {
        return struct.get(have_container$LAYOUT, have_container$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int have_container
     * }
     */
    public static void have_container(MemorySegment struct, int fieldValue) {
        struct.set(have_container$LAYOUT, have_container$OFFSET, fieldValue);
    }

    private static final OfInt xsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t xsize
     * }
     */
    public static final OfInt xsize$layout() {
        return xsize$LAYOUT;
    }

    private static final long xsize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t xsize
     * }
     */
    public static final long xsize$offset() {
        return xsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t xsize
     * }
     */
    public static int xsize(MemorySegment struct) {
        return struct.get(xsize$LAYOUT, xsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t xsize
     * }
     */
    public static void xsize(MemorySegment struct, int fieldValue) {
        struct.set(xsize$LAYOUT, xsize$OFFSET, fieldValue);
    }

    private static final OfInt ysize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ysize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t ysize
     * }
     */
    public static final OfInt ysize$layout() {
        return ysize$LAYOUT;
    }

    private static final long ysize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t ysize
     * }
     */
    public static final long ysize$offset() {
        return ysize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t ysize
     * }
     */
    public static int ysize(MemorySegment struct) {
        return struct.get(ysize$LAYOUT, ysize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t ysize
     * }
     */
    public static void ysize(MemorySegment struct, int fieldValue) {
        struct.set(ysize$LAYOUT, ysize$OFFSET, fieldValue);
    }

    private static final OfInt bits_per_sample$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bits_per_sample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static final OfInt bits_per_sample$layout() {
        return bits_per_sample$LAYOUT;
    }

    private static final long bits_per_sample$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static final long bits_per_sample$offset() {
        return bits_per_sample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static int bits_per_sample(MemorySegment struct) {
        return struct.get(bits_per_sample$LAYOUT, bits_per_sample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static void bits_per_sample(MemorySegment struct, int fieldValue) {
        struct.set(bits_per_sample$LAYOUT, bits_per_sample$OFFSET, fieldValue);
    }

    private static final OfInt exponent_bits_per_sample$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exponent_bits_per_sample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static final OfInt exponent_bits_per_sample$layout() {
        return exponent_bits_per_sample$LAYOUT;
    }

    private static final long exponent_bits_per_sample$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static final long exponent_bits_per_sample$offset() {
        return exponent_bits_per_sample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static int exponent_bits_per_sample(MemorySegment struct) {
        return struct.get(exponent_bits_per_sample$LAYOUT, exponent_bits_per_sample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static void exponent_bits_per_sample(MemorySegment struct, int fieldValue) {
        struct.set(exponent_bits_per_sample$LAYOUT, exponent_bits_per_sample$OFFSET, fieldValue);
    }

    private static final OfFloat intensity_target$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("intensity_target"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float intensity_target
     * }
     */
    public static final OfFloat intensity_target$layout() {
        return intensity_target$LAYOUT;
    }

    private static final long intensity_target$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float intensity_target
     * }
     */
    public static final long intensity_target$offset() {
        return intensity_target$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float intensity_target
     * }
     */
    public static float intensity_target(MemorySegment struct) {
        return struct.get(intensity_target$LAYOUT, intensity_target$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float intensity_target
     * }
     */
    public static void intensity_target(MemorySegment struct, float fieldValue) {
        struct.set(intensity_target$LAYOUT, intensity_target$OFFSET, fieldValue);
    }

    private static final OfFloat min_nits$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("min_nits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float min_nits
     * }
     */
    public static final OfFloat min_nits$layout() {
        return min_nits$LAYOUT;
    }

    private static final long min_nits$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float min_nits
     * }
     */
    public static final long min_nits$offset() {
        return min_nits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float min_nits
     * }
     */
    public static float min_nits(MemorySegment struct) {
        return struct.get(min_nits$LAYOUT, min_nits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float min_nits
     * }
     */
    public static void min_nits(MemorySegment struct, float fieldValue) {
        struct.set(min_nits$LAYOUT, min_nits$OFFSET, fieldValue);
    }

    private static final OfInt relative_to_max_display$LAYOUT = (OfInt)$LAYOUT.select(groupElement("relative_to_max_display"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int relative_to_max_display
     * }
     */
    public static final OfInt relative_to_max_display$layout() {
        return relative_to_max_display$LAYOUT;
    }

    private static final long relative_to_max_display$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int relative_to_max_display
     * }
     */
    public static final long relative_to_max_display$offset() {
        return relative_to_max_display$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int relative_to_max_display
     * }
     */
    public static int relative_to_max_display(MemorySegment struct) {
        return struct.get(relative_to_max_display$LAYOUT, relative_to_max_display$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int relative_to_max_display
     * }
     */
    public static void relative_to_max_display(MemorySegment struct, int fieldValue) {
        struct.set(relative_to_max_display$LAYOUT, relative_to_max_display$OFFSET, fieldValue);
    }

    private static final OfFloat linear_below$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("linear_below"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float linear_below
     * }
     */
    public static final OfFloat linear_below$layout() {
        return linear_below$LAYOUT;
    }

    private static final long linear_below$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float linear_below
     * }
     */
    public static final long linear_below$offset() {
        return linear_below$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float linear_below
     * }
     */
    public static float linear_below(MemorySegment struct) {
        return struct.get(linear_below$LAYOUT, linear_below$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float linear_below
     * }
     */
    public static void linear_below(MemorySegment struct, float fieldValue) {
        struct.set(linear_below$LAYOUT, linear_below$OFFSET, fieldValue);
    }

    private static final OfInt uses_original_profile$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uses_original_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int uses_original_profile
     * }
     */
    public static final OfInt uses_original_profile$layout() {
        return uses_original_profile$LAYOUT;
    }

    private static final long uses_original_profile$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int uses_original_profile
     * }
     */
    public static final long uses_original_profile$offset() {
        return uses_original_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int uses_original_profile
     * }
     */
    public static int uses_original_profile(MemorySegment struct) {
        return struct.get(uses_original_profile$LAYOUT, uses_original_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int uses_original_profile
     * }
     */
    public static void uses_original_profile(MemorySegment struct, int fieldValue) {
        struct.set(uses_original_profile$LAYOUT, uses_original_profile$OFFSET, fieldValue);
    }

    private static final OfInt have_preview$LAYOUT = (OfInt)$LAYOUT.select(groupElement("have_preview"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int have_preview
     * }
     */
    public static final OfInt have_preview$layout() {
        return have_preview$LAYOUT;
    }

    private static final long have_preview$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int have_preview
     * }
     */
    public static final long have_preview$offset() {
        return have_preview$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int have_preview
     * }
     */
    public static int have_preview(MemorySegment struct) {
        return struct.get(have_preview$LAYOUT, have_preview$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int have_preview
     * }
     */
    public static void have_preview(MemorySegment struct, int fieldValue) {
        struct.set(have_preview$LAYOUT, have_preview$OFFSET, fieldValue);
    }

    private static final OfInt have_animation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("have_animation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int have_animation
     * }
     */
    public static final OfInt have_animation$layout() {
        return have_animation$LAYOUT;
    }

    private static final long have_animation$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int have_animation
     * }
     */
    public static final long have_animation$offset() {
        return have_animation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int have_animation
     * }
     */
    public static int have_animation(MemorySegment struct) {
        return struct.get(have_animation$LAYOUT, have_animation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int have_animation
     * }
     */
    public static void have_animation(MemorySegment struct, int fieldValue) {
        struct.set(have_animation$LAYOUT, have_animation$OFFSET, fieldValue);
    }

    private static final OfInt orientation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("orientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlOrientation orientation
     * }
     */
    public static final OfInt orientation$layout() {
        return orientation$LAYOUT;
    }

    private static final long orientation$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlOrientation orientation
     * }
     */
    public static final long orientation$offset() {
        return orientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlOrientation orientation
     * }
     */
    public static int orientation(MemorySegment struct) {
        return struct.get(orientation$LAYOUT, orientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlOrientation orientation
     * }
     */
    public static void orientation(MemorySegment struct, int fieldValue) {
        struct.set(orientation$LAYOUT, orientation$OFFSET, fieldValue);
    }

    private static final OfInt num_color_channels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_color_channels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t num_color_channels
     * }
     */
    public static final OfInt num_color_channels$layout() {
        return num_color_channels$LAYOUT;
    }

    private static final long num_color_channels$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t num_color_channels
     * }
     */
    public static final long num_color_channels$offset() {
        return num_color_channels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t num_color_channels
     * }
     */
    public static int num_color_channels(MemorySegment struct) {
        return struct.get(num_color_channels$LAYOUT, num_color_channels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t num_color_channels
     * }
     */
    public static void num_color_channels(MemorySegment struct, int fieldValue) {
        struct.set(num_color_channels$LAYOUT, num_color_channels$OFFSET, fieldValue);
    }

    private static final OfInt num_extra_channels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_extra_channels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t num_extra_channels
     * }
     */
    public static final OfInt num_extra_channels$layout() {
        return num_extra_channels$LAYOUT;
    }

    private static final long num_extra_channels$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t num_extra_channels
     * }
     */
    public static final long num_extra_channels$offset() {
        return num_extra_channels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t num_extra_channels
     * }
     */
    public static int num_extra_channels(MemorySegment struct) {
        return struct.get(num_extra_channels$LAYOUT, num_extra_channels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t num_extra_channels
     * }
     */
    public static void num_extra_channels(MemorySegment struct, int fieldValue) {
        struct.set(num_extra_channels$LAYOUT, num_extra_channels$OFFSET, fieldValue);
    }

    private static final OfInt alpha_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t alpha_bits
     * }
     */
    public static final OfInt alpha_bits$layout() {
        return alpha_bits$LAYOUT;
    }

    private static final long alpha_bits$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t alpha_bits
     * }
     */
    public static final long alpha_bits$offset() {
        return alpha_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t alpha_bits
     * }
     */
    public static int alpha_bits(MemorySegment struct) {
        return struct.get(alpha_bits$LAYOUT, alpha_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t alpha_bits
     * }
     */
    public static void alpha_bits(MemorySegment struct, int fieldValue) {
        struct.set(alpha_bits$LAYOUT, alpha_bits$OFFSET, fieldValue);
    }

    private static final OfInt alpha_exponent_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_exponent_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t alpha_exponent_bits
     * }
     */
    public static final OfInt alpha_exponent_bits$layout() {
        return alpha_exponent_bits$LAYOUT;
    }

    private static final long alpha_exponent_bits$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t alpha_exponent_bits
     * }
     */
    public static final long alpha_exponent_bits$offset() {
        return alpha_exponent_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t alpha_exponent_bits
     * }
     */
    public static int alpha_exponent_bits(MemorySegment struct) {
        return struct.get(alpha_exponent_bits$LAYOUT, alpha_exponent_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t alpha_exponent_bits
     * }
     */
    public static void alpha_exponent_bits(MemorySegment struct, int fieldValue) {
        struct.set(alpha_exponent_bits$LAYOUT, alpha_exponent_bits$OFFSET, fieldValue);
    }

    private static final OfInt alpha_premultiplied$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_premultiplied"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static final OfInt alpha_premultiplied$layout() {
        return alpha_premultiplied$LAYOUT;
    }

    private static final long alpha_premultiplied$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static final long alpha_premultiplied$offset() {
        return alpha_premultiplied$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static int alpha_premultiplied(MemorySegment struct) {
        return struct.get(alpha_premultiplied$LAYOUT, alpha_premultiplied$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static void alpha_premultiplied(MemorySegment struct, int fieldValue) {
        struct.set(alpha_premultiplied$LAYOUT, alpha_premultiplied$OFFSET, fieldValue);
    }

    private static final GroupLayout preview$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("preview"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlPreviewHeader preview
     * }
     */
    public static final GroupLayout preview$layout() {
        return preview$LAYOUT;
    }

    private static final long preview$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlPreviewHeader preview
     * }
     */
    public static final long preview$offset() {
        return preview$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlPreviewHeader preview
     * }
     */
    public static MemorySegment preview(MemorySegment struct) {
        return struct.asSlice(preview$OFFSET, preview$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlPreviewHeader preview
     * }
     */
    public static void preview(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, preview$OFFSET, preview$LAYOUT.byteSize());
    }

    private static final GroupLayout animation$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("animation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlAnimationHeader animation
     * }
     */
    public static final GroupLayout animation$layout() {
        return animation$LAYOUT;
    }

    private static final long animation$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlAnimationHeader animation
     * }
     */
    public static final long animation$offset() {
        return animation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlAnimationHeader animation
     * }
     */
    public static MemorySegment animation(MemorySegment struct) {
        return struct.asSlice(animation$OFFSET, animation$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlAnimationHeader animation
     * }
     */
    public static void animation(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, animation$OFFSET, animation$LAYOUT.byteSize());
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 108 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static byte padding(MemorySegment struct, long index0) {
        return (byte)padding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t padding[108]
     * }
     */
    public static void padding(MemorySegment struct, long index0, byte fieldValue) {
        padding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

