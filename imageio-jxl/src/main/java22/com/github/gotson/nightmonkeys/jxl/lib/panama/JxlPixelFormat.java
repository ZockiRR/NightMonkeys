// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint32_t num_channels;
 *     JxlDataType data_type;
 *     JxlEndianness endianness;
 *     size_t align;
 * }
 * }
 */
public class JxlPixelFormat {

    JxlPixelFormat() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("num_channels"),
        decode_h.C_INT.withName("data_type"),
        decode_h.C_INT.withName("endianness"),
        MemoryLayout.paddingLayout(4),
        decode_h.C_LONG.withName("align")
    ).withName("$anon$85:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt num_channels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_channels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t num_channels
     * }
     */
    public static final OfInt num_channels$layout() {
        return num_channels$LAYOUT;
    }

    private static final long num_channels$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t num_channels
     * }
     */
    public static final long num_channels$offset() {
        return num_channels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t num_channels
     * }
     */
    public static int num_channels(MemorySegment struct) {
        return struct.get(num_channels$LAYOUT, num_channels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t num_channels
     * }
     */
    public static void num_channels(MemorySegment struct, int fieldValue) {
        struct.set(num_channels$LAYOUT, num_channels$OFFSET, fieldValue);
    }

    private static final OfInt data_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("data_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlDataType data_type
     * }
     */
    public static final OfInt data_type$layout() {
        return data_type$LAYOUT;
    }

    private static final long data_type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlDataType data_type
     * }
     */
    public static final long data_type$offset() {
        return data_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlDataType data_type
     * }
     */
    public static int data_type(MemorySegment struct) {
        return struct.get(data_type$LAYOUT, data_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlDataType data_type
     * }
     */
    public static void data_type(MemorySegment struct, int fieldValue) {
        struct.set(data_type$LAYOUT, data_type$OFFSET, fieldValue);
    }

    private static final OfInt endianness$LAYOUT = (OfInt)$LAYOUT.select(groupElement("endianness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlEndianness endianness
     * }
     */
    public static final OfInt endianness$layout() {
        return endianness$LAYOUT;
    }

    private static final long endianness$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlEndianness endianness
     * }
     */
    public static final long endianness$offset() {
        return endianness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlEndianness endianness
     * }
     */
    public static int endianness(MemorySegment struct) {
        return struct.get(endianness$LAYOUT, endianness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlEndianness endianness
     * }
     */
    public static void endianness(MemorySegment struct, int fieldValue) {
        struct.set(endianness$LAYOUT, endianness$OFFSET, fieldValue);
    }

    private static final OfLong align$LAYOUT = (OfLong)$LAYOUT.select(groupElement("align"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t align
     * }
     */
    public static final OfLong align$layout() {
        return align$LAYOUT;
    }

    private static final long align$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t align
     * }
     */
    public static final long align$offset() {
        return align$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t align
     * }
     */
    public static long align(MemorySegment struct) {
        return struct.get(align$LAYOUT, align$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t align
     * }
     */
    public static void align(MemorySegment struct, long fieldValue) {
        struct.set(align$LAYOUT, align$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

