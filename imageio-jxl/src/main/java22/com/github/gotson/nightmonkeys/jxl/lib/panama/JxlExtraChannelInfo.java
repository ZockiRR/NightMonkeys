// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     JxlExtraChannelType type;
 *     uint32_t bits_per_sample;
 *     uint32_t exponent_bits_per_sample;
 *     uint32_t dim_shift;
 *     uint32_t name_length;
 *     int alpha_premultiplied;
 *     float spot_color[4];
 *     uint32_t cfa_channel;
 * }
 * }
 */
public class JxlExtraChannelInfo {

    JxlExtraChannelInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("type"),
        decode_h.C_INT.withName("bits_per_sample"),
        decode_h.C_INT.withName("exponent_bits_per_sample"),
        decode_h.C_INT.withName("dim_shift"),
        decode_h.C_INT.withName("name_length"),
        decode_h.C_INT.withName("alpha_premultiplied"),
        MemoryLayout.sequenceLayout(4, decode_h.C_FLOAT).withName("spot_color"),
        decode_h.C_INT.withName("cfa_channel")
    ).withName("$anon$241:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JxlExtraChannelType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JxlExtraChannelType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JxlExtraChannelType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JxlExtraChannelType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt bits_per_sample$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bits_per_sample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static final OfInt bits_per_sample$layout() {
        return bits_per_sample$LAYOUT;
    }

    private static final long bits_per_sample$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static final long bits_per_sample$offset() {
        return bits_per_sample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static int bits_per_sample(MemorySegment struct) {
        return struct.get(bits_per_sample$LAYOUT, bits_per_sample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bits_per_sample
     * }
     */
    public static void bits_per_sample(MemorySegment struct, int fieldValue) {
        struct.set(bits_per_sample$LAYOUT, bits_per_sample$OFFSET, fieldValue);
    }

    private static final OfInt exponent_bits_per_sample$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exponent_bits_per_sample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static final OfInt exponent_bits_per_sample$layout() {
        return exponent_bits_per_sample$LAYOUT;
    }

    private static final long exponent_bits_per_sample$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static final long exponent_bits_per_sample$offset() {
        return exponent_bits_per_sample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static int exponent_bits_per_sample(MemorySegment struct) {
        return struct.get(exponent_bits_per_sample$LAYOUT, exponent_bits_per_sample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t exponent_bits_per_sample
     * }
     */
    public static void exponent_bits_per_sample(MemorySegment struct, int fieldValue) {
        struct.set(exponent_bits_per_sample$LAYOUT, exponent_bits_per_sample$OFFSET, fieldValue);
    }

    private static final OfInt dim_shift$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dim_shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t dim_shift
     * }
     */
    public static final OfInt dim_shift$layout() {
        return dim_shift$LAYOUT;
    }

    private static final long dim_shift$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t dim_shift
     * }
     */
    public static final long dim_shift$offset() {
        return dim_shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t dim_shift
     * }
     */
    public static int dim_shift(MemorySegment struct) {
        return struct.get(dim_shift$LAYOUT, dim_shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t dim_shift
     * }
     */
    public static void dim_shift(MemorySegment struct, int fieldValue) {
        struct.set(dim_shift$LAYOUT, dim_shift$OFFSET, fieldValue);
    }

    private static final OfInt name_length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("name_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static final OfInt name_length$layout() {
        return name_length$LAYOUT;
    }

    private static final long name_length$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static final long name_length$offset() {
        return name_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static int name_length(MemorySegment struct) {
        return struct.get(name_length$LAYOUT, name_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t name_length
     * }
     */
    public static void name_length(MemorySegment struct, int fieldValue) {
        struct.set(name_length$LAYOUT, name_length$OFFSET, fieldValue);
    }

    private static final OfInt alpha_premultiplied$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_premultiplied"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static final OfInt alpha_premultiplied$layout() {
        return alpha_premultiplied$LAYOUT;
    }

    private static final long alpha_premultiplied$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static final long alpha_premultiplied$offset() {
        return alpha_premultiplied$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static int alpha_premultiplied(MemorySegment struct) {
        return struct.get(alpha_premultiplied$LAYOUT, alpha_premultiplied$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alpha_premultiplied
     * }
     */
    public static void alpha_premultiplied(MemorySegment struct, int fieldValue) {
        struct.set(alpha_premultiplied$LAYOUT, alpha_premultiplied$OFFSET, fieldValue);
    }

    private static final SequenceLayout spot_color$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("spot_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static final SequenceLayout spot_color$layout() {
        return spot_color$LAYOUT;
    }

    private static final long spot_color$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static final long spot_color$offset() {
        return spot_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static MemorySegment spot_color(MemorySegment struct) {
        return struct.asSlice(spot_color$OFFSET, spot_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static void spot_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, spot_color$OFFSET, spot_color$LAYOUT.byteSize());
    }

    private static long[] spot_color$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static long[] spot_color$dimensions() {
        return spot_color$DIMS;
    }
    private static final VarHandle spot_color$ELEM_HANDLE = spot_color$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static float spot_color(MemorySegment struct, long index0) {
        return (float)spot_color$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float spot_color[4]
     * }
     */
    public static void spot_color(MemorySegment struct, long index0, float fieldValue) {
        spot_color$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt cfa_channel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cfa_channel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cfa_channel
     * }
     */
    public static final OfInt cfa_channel$layout() {
        return cfa_channel$LAYOUT;
    }

    private static final long cfa_channel$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cfa_channel
     * }
     */
    public static final long cfa_channel$offset() {
        return cfa_channel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cfa_channel
     * }
     */
    public static int cfa_channel(MemorySegment struct) {
        return struct.get(cfa_channel$LAYOUT, cfa_channel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cfa_channel
     * }
     */
    public static void cfa_channel(MemorySegment struct, int fieldValue) {
        struct.set(cfa_channel$LAYOUT, cfa_channel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

