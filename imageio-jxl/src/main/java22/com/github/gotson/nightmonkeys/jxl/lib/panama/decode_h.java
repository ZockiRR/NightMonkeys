// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class decode_h {

    decode_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }


    static {
        System.loadLibrary("jxl");
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __has_safe_buffers = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int JXL_TRUE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define JXL_TRUE 1
     * }
     */
    public static int JXL_TRUE() {
        return JXL_TRUE;
    }
    private static final int JXL_FALSE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define JXL_FALSE 0
     * }
     */
    public static int JXL_FALSE() {
        return JXL_FALSE;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = decode_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = decode_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = decode_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = decode_h.C_LONG;
    private static final int JXL_TYPE_FLOAT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TYPE_FLOAT = 0
     * }
     */
    public static int JXL_TYPE_FLOAT() {
        return JXL_TYPE_FLOAT;
    }
    private static final int JXL_TYPE_BOOLEAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TYPE_BOOLEAN = 1
     * }
     */
    public static int JXL_TYPE_BOOLEAN() {
        return JXL_TYPE_BOOLEAN;
    }
    private static final int JXL_TYPE_UINT8 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TYPE_UINT8 = 2
     * }
     */
    public static int JXL_TYPE_UINT8() {
        return JXL_TYPE_UINT8;
    }
    private static final int JXL_TYPE_UINT16 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TYPE_UINT16 = 3
     * }
     */
    public static int JXL_TYPE_UINT16() {
        return JXL_TYPE_UINT16;
    }
    private static final int JXL_TYPE_UINT32 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TYPE_UINT32 = 4
     * }
     */
    public static int JXL_TYPE_UINT32() {
        return JXL_TYPE_UINT32;
    }
    private static final int JXL_TYPE_FLOAT16 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TYPE_FLOAT16 = 5
     * }
     */
    public static int JXL_TYPE_FLOAT16() {
        return JXL_TYPE_FLOAT16;
    }
    private static final int JXL_NATIVE_ENDIAN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_NATIVE_ENDIAN = 0
     * }
     */
    public static int JXL_NATIVE_ENDIAN() {
        return JXL_NATIVE_ENDIAN;
    }
    private static final int JXL_LITTLE_ENDIAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_LITTLE_ENDIAN = 1
     * }
     */
    public static int JXL_LITTLE_ENDIAN() {
        return JXL_LITTLE_ENDIAN;
    }
    private static final int JXL_BIG_ENDIAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_BIG_ENDIAN = 2
     * }
     */
    public static int JXL_BIG_ENDIAN() {
        return JXL_BIG_ENDIAN;
    }
    private static final int JXL_COLOR_SPACE_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_COLOR_SPACE_RGB = 0
     * }
     */
    public static int JXL_COLOR_SPACE_RGB() {
        return JXL_COLOR_SPACE_RGB;
    }
    private static final int JXL_COLOR_SPACE_GRAY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_COLOR_SPACE_GRAY = 1
     * }
     */
    public static int JXL_COLOR_SPACE_GRAY() {
        return JXL_COLOR_SPACE_GRAY;
    }
    private static final int JXL_COLOR_SPACE_XYB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_COLOR_SPACE_XYB = 2
     * }
     */
    public static int JXL_COLOR_SPACE_XYB() {
        return JXL_COLOR_SPACE_XYB;
    }
    private static final int JXL_COLOR_SPACE_UNKNOWN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_COLOR_SPACE_UNKNOWN = 3
     * }
     */
    public static int JXL_COLOR_SPACE_UNKNOWN() {
        return JXL_COLOR_SPACE_UNKNOWN;
    }
    private static final int JXL_WHITE_POINT_D65 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_WHITE_POINT_D65 = 1
     * }
     */
    public static int JXL_WHITE_POINT_D65() {
        return JXL_WHITE_POINT_D65;
    }
    private static final int JXL_WHITE_POINT_CUSTOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_WHITE_POINT_CUSTOM = 2
     * }
     */
    public static int JXL_WHITE_POINT_CUSTOM() {
        return JXL_WHITE_POINT_CUSTOM;
    }
    private static final int JXL_WHITE_POINT_E = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_WHITE_POINT_E = 10
     * }
     */
    public static int JXL_WHITE_POINT_E() {
        return JXL_WHITE_POINT_E;
    }
    private static final int JXL_WHITE_POINT_DCI = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_WHITE_POINT_DCI = 11
     * }
     */
    public static int JXL_WHITE_POINT_DCI() {
        return JXL_WHITE_POINT_DCI;
    }
    private static final int JXL_PRIMARIES_SRGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_PRIMARIES_SRGB = 1
     * }
     */
    public static int JXL_PRIMARIES_SRGB() {
        return JXL_PRIMARIES_SRGB;
    }
    private static final int JXL_PRIMARIES_CUSTOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_PRIMARIES_CUSTOM = 2
     * }
     */
    public static int JXL_PRIMARIES_CUSTOM() {
        return JXL_PRIMARIES_CUSTOM;
    }
    private static final int JXL_PRIMARIES_2100 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_PRIMARIES_2100 = 9
     * }
     */
    public static int JXL_PRIMARIES_2100() {
        return JXL_PRIMARIES_2100;
    }
    private static final int JXL_PRIMARIES_P3 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_PRIMARIES_P3 = 11
     * }
     */
    public static int JXL_PRIMARIES_P3() {
        return JXL_PRIMARIES_P3;
    }
    private static final int JXL_TRANSFER_FUNCTION_709 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_709 = 1
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_709() {
        return JXL_TRANSFER_FUNCTION_709;
    }
    private static final int JXL_TRANSFER_FUNCTION_UNKNOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_UNKNOWN = 2
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_UNKNOWN() {
        return JXL_TRANSFER_FUNCTION_UNKNOWN;
    }
    private static final int JXL_TRANSFER_FUNCTION_LINEAR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_LINEAR = 8
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_LINEAR() {
        return JXL_TRANSFER_FUNCTION_LINEAR;
    }
    private static final int JXL_TRANSFER_FUNCTION_SRGB = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_SRGB = 13
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_SRGB() {
        return JXL_TRANSFER_FUNCTION_SRGB;
    }
    private static final int JXL_TRANSFER_FUNCTION_PQ = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_PQ = 16
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_PQ() {
        return JXL_TRANSFER_FUNCTION_PQ;
    }
    private static final int JXL_TRANSFER_FUNCTION_DCI = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_DCI = 17
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_DCI() {
        return JXL_TRANSFER_FUNCTION_DCI;
    }
    private static final int JXL_TRANSFER_FUNCTION_HLG = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_HLG = 18
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_HLG() {
        return JXL_TRANSFER_FUNCTION_HLG;
    }
    private static final int JXL_TRANSFER_FUNCTION_GAMMA = (int)65535L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_TRANSFER_FUNCTION_GAMMA = 65535
     * }
     */
    public static int JXL_TRANSFER_FUNCTION_GAMMA() {
        return JXL_TRANSFER_FUNCTION_GAMMA;
    }
    private static final int JXL_RENDERING_INTENT_PERCEPTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_RENDERING_INTENT_PERCEPTUAL = 0
     * }
     */
    public static int JXL_RENDERING_INTENT_PERCEPTUAL() {
        return JXL_RENDERING_INTENT_PERCEPTUAL;
    }
    private static final int JXL_RENDERING_INTENT_RELATIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_RENDERING_INTENT_RELATIVE = 1
     * }
     */
    public static int JXL_RENDERING_INTENT_RELATIVE() {
        return JXL_RENDERING_INTENT_RELATIVE;
    }
    private static final int JXL_RENDERING_INTENT_SATURATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_RENDERING_INTENT_SATURATION = 2
     * }
     */
    public static int JXL_RENDERING_INTENT_SATURATION() {
        return JXL_RENDERING_INTENT_SATURATION;
    }
    private static final int JXL_RENDERING_INTENT_ABSOLUTE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_RENDERING_INTENT_ABSOLUTE = 3
     * }
     */
    public static int JXL_RENDERING_INTENT_ABSOLUTE() {
        return JXL_RENDERING_INTENT_ABSOLUTE;
    }
    private static final int JXL_ORIENT_IDENTITY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_IDENTITY = 1
     * }
     */
    public static int JXL_ORIENT_IDENTITY() {
        return JXL_ORIENT_IDENTITY;
    }
    private static final int JXL_ORIENT_FLIP_HORIZONTAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_FLIP_HORIZONTAL = 2
     * }
     */
    public static int JXL_ORIENT_FLIP_HORIZONTAL() {
        return JXL_ORIENT_FLIP_HORIZONTAL;
    }
    private static final int JXL_ORIENT_ROTATE_180 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_ROTATE_180 = 3
     * }
     */
    public static int JXL_ORIENT_ROTATE_180() {
        return JXL_ORIENT_ROTATE_180;
    }
    private static final int JXL_ORIENT_FLIP_VERTICAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_FLIP_VERTICAL = 4
     * }
     */
    public static int JXL_ORIENT_FLIP_VERTICAL() {
        return JXL_ORIENT_FLIP_VERTICAL;
    }
    private static final int JXL_ORIENT_TRANSPOSE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_TRANSPOSE = 5
     * }
     */
    public static int JXL_ORIENT_TRANSPOSE() {
        return JXL_ORIENT_TRANSPOSE;
    }
    private static final int JXL_ORIENT_ROTATE_90_CW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_ROTATE_90_CW = 6
     * }
     */
    public static int JXL_ORIENT_ROTATE_90_CW() {
        return JXL_ORIENT_ROTATE_90_CW;
    }
    private static final int JXL_ORIENT_ANTI_TRANSPOSE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_ANTI_TRANSPOSE = 7
     * }
     */
    public static int JXL_ORIENT_ANTI_TRANSPOSE() {
        return JXL_ORIENT_ANTI_TRANSPOSE;
    }
    private static final int JXL_ORIENT_ROTATE_90_CCW = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_ORIENT_ROTATE_90_CCW = 8
     * }
     */
    public static int JXL_ORIENT_ROTATE_90_CCW() {
        return JXL_ORIENT_ROTATE_90_CCW;
    }
    private static final int JXL_CHANNEL_ALPHA = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_ALPHA = 0
     * }
     */
    public static int JXL_CHANNEL_ALPHA() {
        return JXL_CHANNEL_ALPHA;
    }
    private static final int JXL_CHANNEL_DEPTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_DEPTH = 1
     * }
     */
    public static int JXL_CHANNEL_DEPTH() {
        return JXL_CHANNEL_DEPTH;
    }
    private static final int JXL_CHANNEL_SPOT_COLOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_SPOT_COLOR = 2
     * }
     */
    public static int JXL_CHANNEL_SPOT_COLOR() {
        return JXL_CHANNEL_SPOT_COLOR;
    }
    private static final int JXL_CHANNEL_SELECTION_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_SELECTION_MASK = 3
     * }
     */
    public static int JXL_CHANNEL_SELECTION_MASK() {
        return JXL_CHANNEL_SELECTION_MASK;
    }
    private static final int JXL_CHANNEL_BLACK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_BLACK = 4
     * }
     */
    public static int JXL_CHANNEL_BLACK() {
        return JXL_CHANNEL_BLACK;
    }
    private static final int JXL_CHANNEL_CFA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_CFA = 5
     * }
     */
    public static int JXL_CHANNEL_CFA() {
        return JXL_CHANNEL_CFA;
    }
    private static final int JXL_CHANNEL_THERMAL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_THERMAL = 6
     * }
     */
    public static int JXL_CHANNEL_THERMAL() {
        return JXL_CHANNEL_THERMAL;
    }
    private static final int JXL_CHANNEL_RESERVED0 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED0 = 7
     * }
     */
    public static int JXL_CHANNEL_RESERVED0() {
        return JXL_CHANNEL_RESERVED0;
    }
    private static final int JXL_CHANNEL_RESERVED1 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED1 = 8
     * }
     */
    public static int JXL_CHANNEL_RESERVED1() {
        return JXL_CHANNEL_RESERVED1;
    }
    private static final int JXL_CHANNEL_RESERVED2 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED2 = 9
     * }
     */
    public static int JXL_CHANNEL_RESERVED2() {
        return JXL_CHANNEL_RESERVED2;
    }
    private static final int JXL_CHANNEL_RESERVED3 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED3 = 10
     * }
     */
    public static int JXL_CHANNEL_RESERVED3() {
        return JXL_CHANNEL_RESERVED3;
    }
    private static final int JXL_CHANNEL_RESERVED4 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED4 = 11
     * }
     */
    public static int JXL_CHANNEL_RESERVED4() {
        return JXL_CHANNEL_RESERVED4;
    }
    private static final int JXL_CHANNEL_RESERVED5 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED5 = 12
     * }
     */
    public static int JXL_CHANNEL_RESERVED5() {
        return JXL_CHANNEL_RESERVED5;
    }
    private static final int JXL_CHANNEL_RESERVED6 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED6 = 13
     * }
     */
    public static int JXL_CHANNEL_RESERVED6() {
        return JXL_CHANNEL_RESERVED6;
    }
    private static final int JXL_CHANNEL_RESERVED7 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_RESERVED7 = 14
     * }
     */
    public static int JXL_CHANNEL_RESERVED7() {
        return JXL_CHANNEL_RESERVED7;
    }
    private static final int JXL_CHANNEL_UNKNOWN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_UNKNOWN = 15
     * }
     */
    public static int JXL_CHANNEL_UNKNOWN() {
        return JXL_CHANNEL_UNKNOWN;
    }
    private static final int JXL_CHANNEL_OPTIONAL = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_CHANNEL_OPTIONAL = 16
     * }
     */
    public static int JXL_CHANNEL_OPTIONAL() {
        return JXL_CHANNEL_OPTIONAL;
    }
    /**
     * {@snippet lang=c :
     * typedef int JxlParallelRetCode
     * }
     */
    public static final OfInt JxlParallelRetCode = decode_h.C_INT;

    private static class JxlDecoderVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT    );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t JxlDecoderVersion()
     * }
     */
    public static FunctionDescriptor JxlDecoderVersion$descriptor() {
        return JxlDecoderVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t JxlDecoderVersion()
     * }
     */
    public static MethodHandle JxlDecoderVersion$handle() {
        return JxlDecoderVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t JxlDecoderVersion()
     * }
     */
    public static MemorySegment JxlDecoderVersion$address() {
        return JxlDecoderVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t JxlDecoderVersion()
     * }
     */
    public static int JxlDecoderVersion() {
        var mh$ = JxlDecoderVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int JXL_SIG_NOT_ENOUGH_BYTES = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_SIG_NOT_ENOUGH_BYTES = 0
     * }
     */
    public static int JXL_SIG_NOT_ENOUGH_BYTES() {
        return JXL_SIG_NOT_ENOUGH_BYTES;
    }
    private static final int JXL_SIG_INVALID = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_SIG_INVALID = 1
     * }
     */
    public static int JXL_SIG_INVALID() {
        return JXL_SIG_INVALID;
    }
    private static final int JXL_SIG_CODESTREAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_SIG_CODESTREAM = 2
     * }
     */
    public static int JXL_SIG_CODESTREAM() {
        return JXL_SIG_CODESTREAM;
    }
    private static final int JXL_SIG_CONTAINER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_SIG_CONTAINER = 3
     * }
     */
    public static int JXL_SIG_CONTAINER() {
        return JXL_SIG_CONTAINER;
    }

    private static class JxlSignatureCheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlSignatureCheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlSignature JxlSignatureCheck(const uint8_t *buf, size_t len)
     * }
     */
    public static FunctionDescriptor JxlSignatureCheck$descriptor() {
        return JxlSignatureCheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlSignature JxlSignatureCheck(const uint8_t *buf, size_t len)
     * }
     */
    public static MethodHandle JxlSignatureCheck$handle() {
        return JxlSignatureCheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlSignature JxlSignatureCheck(const uint8_t *buf, size_t len)
     * }
     */
    public static MemorySegment JxlSignatureCheck$address() {
        return JxlSignatureCheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlSignature JxlSignatureCheck(const uint8_t *buf, size_t len)
     * }
     */
    public static int JxlSignatureCheck(MemorySegment buf, long len) {
        var mh$ = JxlSignatureCheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlSignatureCheck", buf, len);
            }
            return (int)mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoder *JxlDecoderCreate(const JxlMemoryManager *memory_manager)
     * }
     */
    public static FunctionDescriptor JxlDecoderCreate$descriptor() {
        return JxlDecoderCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoder *JxlDecoderCreate(const JxlMemoryManager *memory_manager)
     * }
     */
    public static MethodHandle JxlDecoderCreate$handle() {
        return JxlDecoderCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoder *JxlDecoderCreate(const JxlMemoryManager *memory_manager)
     * }
     */
    public static MemorySegment JxlDecoderCreate$address() {
        return JxlDecoderCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoder *JxlDecoderCreate(const JxlMemoryManager *memory_manager)
     * }
     */
    public static MemorySegment JxlDecoderCreate(MemorySegment memory_manager) {
        var mh$ = JxlDecoderCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderCreate", memory_manager);
            }
            return (MemorySegment)mh$.invokeExact(memory_manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void JxlDecoderReset(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderReset$descriptor() {
        return JxlDecoderReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void JxlDecoderReset(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderReset$handle() {
        return JxlDecoderReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void JxlDecoderReset(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderReset$address() {
        return JxlDecoderReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void JxlDecoderReset(JxlDecoder *dec)
     * }
     */
    public static void JxlDecoderReset(MemorySegment dec) {
        var mh$ = JxlDecoderReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderReset", dec);
            }
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void JxlDecoderDestroy(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderDestroy$descriptor() {
        return JxlDecoderDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void JxlDecoderDestroy(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderDestroy$handle() {
        return JxlDecoderDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void JxlDecoderDestroy(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderDestroy$address() {
        return JxlDecoderDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void JxlDecoderDestroy(JxlDecoder *dec)
     * }
     */
    public static void JxlDecoderDestroy(MemorySegment dec) {
        var mh$ = JxlDecoderDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderDestroy", dec);
            }
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int JXL_DEC_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_SUCCESS = 0
     * }
     */
    public static int JXL_DEC_SUCCESS() {
        return JXL_DEC_SUCCESS;
    }
    private static final int JXL_DEC_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_ERROR = 1
     * }
     */
    public static int JXL_DEC_ERROR() {
        return JXL_DEC_ERROR;
    }
    private static final int JXL_DEC_NEED_MORE_INPUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_NEED_MORE_INPUT = 2
     * }
     */
    public static int JXL_DEC_NEED_MORE_INPUT() {
        return JXL_DEC_NEED_MORE_INPUT;
    }
    private static final int JXL_DEC_NEED_PREVIEW_OUT_BUFFER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_NEED_PREVIEW_OUT_BUFFER = 3
     * }
     */
    public static int JXL_DEC_NEED_PREVIEW_OUT_BUFFER() {
        return JXL_DEC_NEED_PREVIEW_OUT_BUFFER;
    }
    private static final int JXL_DEC_NEED_DC_OUT_BUFFER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_NEED_DC_OUT_BUFFER = 4
     * }
     */
    public static int JXL_DEC_NEED_DC_OUT_BUFFER() {
        return JXL_DEC_NEED_DC_OUT_BUFFER;
    }
    private static final int JXL_DEC_NEED_IMAGE_OUT_BUFFER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_NEED_IMAGE_OUT_BUFFER = 5
     * }
     */
    public static int JXL_DEC_NEED_IMAGE_OUT_BUFFER() {
        return JXL_DEC_NEED_IMAGE_OUT_BUFFER;
    }
    private static final int JXL_DEC_JPEG_NEED_MORE_OUTPUT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_JPEG_NEED_MORE_OUTPUT = 6
     * }
     */
    public static int JXL_DEC_JPEG_NEED_MORE_OUTPUT() {
        return JXL_DEC_JPEG_NEED_MORE_OUTPUT;
    }
    private static final int JXL_DEC_BASIC_INFO = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_BASIC_INFO = 64
     * }
     */
    public static int JXL_DEC_BASIC_INFO() {
        return JXL_DEC_BASIC_INFO;
    }
    private static final int JXL_DEC_EXTENSIONS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_EXTENSIONS = 128
     * }
     */
    public static int JXL_DEC_EXTENSIONS() {
        return JXL_DEC_EXTENSIONS;
    }
    private static final int JXL_DEC_COLOR_ENCODING = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_COLOR_ENCODING = 256
     * }
     */
    public static int JXL_DEC_COLOR_ENCODING() {
        return JXL_DEC_COLOR_ENCODING;
    }
    private static final int JXL_DEC_PREVIEW_IMAGE = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_PREVIEW_IMAGE = 512
     * }
     */
    public static int JXL_DEC_PREVIEW_IMAGE() {
        return JXL_DEC_PREVIEW_IMAGE;
    }
    private static final int JXL_DEC_FRAME = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_FRAME = 1024
     * }
     */
    public static int JXL_DEC_FRAME() {
        return JXL_DEC_FRAME;
    }
    private static final int JXL_DEC_DC_IMAGE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_DC_IMAGE = 2048
     * }
     */
    public static int JXL_DEC_DC_IMAGE() {
        return JXL_DEC_DC_IMAGE;
    }
    private static final int JXL_DEC_FULL_IMAGE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_FULL_IMAGE = 4096
     * }
     */
    public static int JXL_DEC_FULL_IMAGE() {
        return JXL_DEC_FULL_IMAGE;
    }
    private static final int JXL_DEC_JPEG_RECONSTRUCTION = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_DEC_JPEG_RECONSTRUCTION = 8192
     * }
     */
    public static int JXL_DEC_JPEG_RECONSTRUCTION() {
        return JXL_DEC_JPEG_RECONSTRUCTION;
    }

    private static class JxlDecoderRewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderRewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void JxlDecoderRewind(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderRewind$descriptor() {
        return JxlDecoderRewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void JxlDecoderRewind(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderRewind$handle() {
        return JxlDecoderRewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void JxlDecoderRewind(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderRewind$address() {
        return JxlDecoderRewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void JxlDecoderRewind(JxlDecoder *dec)
     * }
     */
    public static void JxlDecoderRewind(MemorySegment dec) {
        var mh$ = JxlDecoderRewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderRewind", dec);
            }
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSkipFrames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSkipFrames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void JxlDecoderSkipFrames(JxlDecoder *dec, size_t amount)
     * }
     */
    public static FunctionDescriptor JxlDecoderSkipFrames$descriptor() {
        return JxlDecoderSkipFrames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void JxlDecoderSkipFrames(JxlDecoder *dec, size_t amount)
     * }
     */
    public static MethodHandle JxlDecoderSkipFrames$handle() {
        return JxlDecoderSkipFrames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void JxlDecoderSkipFrames(JxlDecoder *dec, size_t amount)
     * }
     */
    public static MemorySegment JxlDecoderSkipFrames$address() {
        return JxlDecoderSkipFrames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void JxlDecoderSkipFrames(JxlDecoder *dec, size_t amount)
     * }
     */
    public static void JxlDecoderSkipFrames(MemorySegment dec, long amount) {
        var mh$ = JxlDecoderSkipFrames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSkipFrames", dec, amount);
            }
            mh$.invokeExact(dec, amount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderDefaultPixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderDefaultPixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDefaultPixelFormat(const JxlDecoder *dec, JxlPixelFormat *format)
     * }
     */
    public static FunctionDescriptor JxlDecoderDefaultPixelFormat$descriptor() {
        return JxlDecoderDefaultPixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDefaultPixelFormat(const JxlDecoder *dec, JxlPixelFormat *format)
     * }
     */
    public static MethodHandle JxlDecoderDefaultPixelFormat$handle() {
        return JxlDecoderDefaultPixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDefaultPixelFormat(const JxlDecoder *dec, JxlPixelFormat *format)
     * }
     */
    public static MemorySegment JxlDecoderDefaultPixelFormat$address() {
        return JxlDecoderDefaultPixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDefaultPixelFormat(const JxlDecoder *dec, JxlPixelFormat *format)
     * }
     */
    public static int JxlDecoderDefaultPixelFormat(MemorySegment dec, MemorySegment format) {
        var mh$ = JxlDecoderDefaultPixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderDefaultPixelFormat", dec, format);
            }
            return (int)mh$.invokeExact(dec, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetParallelRunner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetParallelRunner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetParallelRunner(JxlDecoder *dec, JxlParallelRunner parallel_runner, void *parallel_runner_opaque)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetParallelRunner$descriptor() {
        return JxlDecoderSetParallelRunner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetParallelRunner(JxlDecoder *dec, JxlParallelRunner parallel_runner, void *parallel_runner_opaque)
     * }
     */
    public static MethodHandle JxlDecoderSetParallelRunner$handle() {
        return JxlDecoderSetParallelRunner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetParallelRunner(JxlDecoder *dec, JxlParallelRunner parallel_runner, void *parallel_runner_opaque)
     * }
     */
    public static MemorySegment JxlDecoderSetParallelRunner$address() {
        return JxlDecoderSetParallelRunner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetParallelRunner(JxlDecoder *dec, JxlParallelRunner parallel_runner, void *parallel_runner_opaque)
     * }
     */
    public static int JxlDecoderSetParallelRunner(MemorySegment dec, MemorySegment parallel_runner, MemorySegment parallel_runner_opaque) {
        var mh$ = JxlDecoderSetParallelRunner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetParallelRunner", dec, parallel_runner, parallel_runner_opaque);
            }
            return (int)mh$.invokeExact(dec, parallel_runner, parallel_runner_opaque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSizeHintBasicInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_LONG,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSizeHintBasicInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t JxlDecoderSizeHintBasicInfo(const JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderSizeHintBasicInfo$descriptor() {
        return JxlDecoderSizeHintBasicInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t JxlDecoderSizeHintBasicInfo(const JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderSizeHintBasicInfo$handle() {
        return JxlDecoderSizeHintBasicInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t JxlDecoderSizeHintBasicInfo(const JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderSizeHintBasicInfo$address() {
        return JxlDecoderSizeHintBasicInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t JxlDecoderSizeHintBasicInfo(const JxlDecoder *dec)
     * }
     */
    public static long JxlDecoderSizeHintBasicInfo(MemorySegment dec) {
        var mh$ = JxlDecoderSizeHintBasicInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSizeHintBasicInfo", dec);
            }
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSubscribeEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSubscribeEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSubscribeEvents(JxlDecoder *dec, int events_wanted)
     * }
     */
    public static FunctionDescriptor JxlDecoderSubscribeEvents$descriptor() {
        return JxlDecoderSubscribeEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSubscribeEvents(JxlDecoder *dec, int events_wanted)
     * }
     */
    public static MethodHandle JxlDecoderSubscribeEvents$handle() {
        return JxlDecoderSubscribeEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSubscribeEvents(JxlDecoder *dec, int events_wanted)
     * }
     */
    public static MemorySegment JxlDecoderSubscribeEvents$address() {
        return JxlDecoderSubscribeEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSubscribeEvents(JxlDecoder *dec, int events_wanted)
     * }
     */
    public static int JxlDecoderSubscribeEvents(MemorySegment dec, int events_wanted) {
        var mh$ = JxlDecoderSubscribeEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSubscribeEvents", dec, events_wanted);
            }
            return (int)mh$.invokeExact(dec, events_wanted);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetKeepOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetKeepOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetKeepOrientation(JxlDecoder *dec, int keep_orientation)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetKeepOrientation$descriptor() {
        return JxlDecoderSetKeepOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetKeepOrientation(JxlDecoder *dec, int keep_orientation)
     * }
     */
    public static MethodHandle JxlDecoderSetKeepOrientation$handle() {
        return JxlDecoderSetKeepOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetKeepOrientation(JxlDecoder *dec, int keep_orientation)
     * }
     */
    public static MemorySegment JxlDecoderSetKeepOrientation$address() {
        return JxlDecoderSetKeepOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetKeepOrientation(JxlDecoder *dec, int keep_orientation)
     * }
     */
    public static int JxlDecoderSetKeepOrientation(MemorySegment dec, int keep_orientation) {
        var mh$ = JxlDecoderSetKeepOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetKeepOrientation", dec, keep_orientation);
            }
            return (int)mh$.invokeExact(dec, keep_orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderProcessInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderProcessInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderProcessInput(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderProcessInput$descriptor() {
        return JxlDecoderProcessInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderProcessInput(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderProcessInput$handle() {
        return JxlDecoderProcessInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderProcessInput(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderProcessInput$address() {
        return JxlDecoderProcessInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderProcessInput(JxlDecoder *dec)
     * }
     */
    public static int JxlDecoderProcessInput(MemorySegment dec) {
        var mh$ = JxlDecoderProcessInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderProcessInput", dec);
            }
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetInput(JxlDecoder *dec, const uint8_t *data, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetInput$descriptor() {
        return JxlDecoderSetInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetInput(JxlDecoder *dec, const uint8_t *data, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderSetInput$handle() {
        return JxlDecoderSetInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetInput(JxlDecoder *dec, const uint8_t *data, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderSetInput$address() {
        return JxlDecoderSetInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetInput(JxlDecoder *dec, const uint8_t *data, size_t size)
     * }
     */
    public static int JxlDecoderSetInput(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetInput", dec, data, size);
            }
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderReleaseInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_LONG,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderReleaseInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseInput(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderReleaseInput$descriptor() {
        return JxlDecoderReleaseInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseInput(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderReleaseInput$handle() {
        return JxlDecoderReleaseInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseInput(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderReleaseInput$address() {
        return JxlDecoderReleaseInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseInput(JxlDecoder *dec)
     * }
     */
    public static long JxlDecoderReleaseInput(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderReleaseInput", dec);
            }
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetBasicInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetBasicInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetBasicInfo(const JxlDecoder *dec, JxlBasicInfo *info)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetBasicInfo$descriptor() {
        return JxlDecoderGetBasicInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetBasicInfo(const JxlDecoder *dec, JxlBasicInfo *info)
     * }
     */
    public static MethodHandle JxlDecoderGetBasicInfo$handle() {
        return JxlDecoderGetBasicInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetBasicInfo(const JxlDecoder *dec, JxlBasicInfo *info)
     * }
     */
    public static MemorySegment JxlDecoderGetBasicInfo$address() {
        return JxlDecoderGetBasicInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetBasicInfo(const JxlDecoder *dec, JxlBasicInfo *info)
     * }
     */
    public static int JxlDecoderGetBasicInfo(MemorySegment dec, MemorySegment info) {
        var mh$ = JxlDecoderGetBasicInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetBasicInfo", dec, info);
            }
            return (int)mh$.invokeExact(dec, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetExtraChannelInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetExtraChannelInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelInfo(const JxlDecoder *dec, size_t index, JxlExtraChannelInfo *info)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetExtraChannelInfo$descriptor() {
        return JxlDecoderGetExtraChannelInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelInfo(const JxlDecoder *dec, size_t index, JxlExtraChannelInfo *info)
     * }
     */
    public static MethodHandle JxlDecoderGetExtraChannelInfo$handle() {
        return JxlDecoderGetExtraChannelInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelInfo(const JxlDecoder *dec, size_t index, JxlExtraChannelInfo *info)
     * }
     */
    public static MemorySegment JxlDecoderGetExtraChannelInfo$address() {
        return JxlDecoderGetExtraChannelInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelInfo(const JxlDecoder *dec, size_t index, JxlExtraChannelInfo *info)
     * }
     */
    public static int JxlDecoderGetExtraChannelInfo(MemorySegment dec, long index, MemorySegment info) {
        var mh$ = JxlDecoderGetExtraChannelInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetExtraChannelInfo", dec, index, info);
            }
            return (int)mh$.invokeExact(dec, index, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetExtraChannelName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetExtraChannelName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelName(const JxlDecoder *dec, size_t index, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetExtraChannelName$descriptor() {
        return JxlDecoderGetExtraChannelName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelName(const JxlDecoder *dec, size_t index, char *name, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderGetExtraChannelName$handle() {
        return JxlDecoderGetExtraChannelName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelName(const JxlDecoder *dec, size_t index, char *name, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderGetExtraChannelName$address() {
        return JxlDecoderGetExtraChannelName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetExtraChannelName(const JxlDecoder *dec, size_t index, char *name, size_t size)
     * }
     */
    public static int JxlDecoderGetExtraChannelName(MemorySegment dec, long index, MemorySegment name, long size) {
        var mh$ = JxlDecoderGetExtraChannelName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetExtraChannelName", dec, index, name, size);
            }
            return (int)mh$.invokeExact(dec, index, name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int JXL_COLOR_PROFILE_TARGET_ORIGINAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_COLOR_PROFILE_TARGET_ORIGINAL = 0
     * }
     */
    public static int JXL_COLOR_PROFILE_TARGET_ORIGINAL() {
        return JXL_COLOR_PROFILE_TARGET_ORIGINAL;
    }
    private static final int JXL_COLOR_PROFILE_TARGET_DATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.JXL_COLOR_PROFILE_TARGET_DATA = 1
     * }
     */
    public static int JXL_COLOR_PROFILE_TARGET_DATA() {
        return JXL_COLOR_PROFILE_TARGET_DATA;
    }

    private static class JxlDecoderGetColorAsEncodedProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_INT,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetColorAsEncodedProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsEncodedProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, JxlColorEncoding *color_encoding)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetColorAsEncodedProfile$descriptor() {
        return JxlDecoderGetColorAsEncodedProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsEncodedProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, JxlColorEncoding *color_encoding)
     * }
     */
    public static MethodHandle JxlDecoderGetColorAsEncodedProfile$handle() {
        return JxlDecoderGetColorAsEncodedProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsEncodedProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, JxlColorEncoding *color_encoding)
     * }
     */
    public static MemorySegment JxlDecoderGetColorAsEncodedProfile$address() {
        return JxlDecoderGetColorAsEncodedProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsEncodedProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, JxlColorEncoding *color_encoding)
     * }
     */
    public static int JxlDecoderGetColorAsEncodedProfile(MemorySegment dec, MemorySegment format, int target, MemorySegment color_encoding) {
        var mh$ = JxlDecoderGetColorAsEncodedProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetColorAsEncodedProfile", dec, format, target, color_encoding);
            }
            return (int)mh$.invokeExact(dec, format, target, color_encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetICCProfileSizeLegacy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_INT,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetICCProfileSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    private static class JxlDecoderGetICCProfileSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_INT,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetICCProfileSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, size_t *size)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetICCProfileSize$descriptor() {
        return JxlDecoderGetICCProfileSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, size_t *size)
     * }
     */
    public static MethodHandle JxlDecoderGetICCProfileSize$handle() {
        return JxlDecoderGetICCProfileSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, size_t *size)
     * }
     */
    public static MemorySegment JxlDecoderGetICCProfileSize$address() {
        return JxlDecoderGetICCProfileSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, size_t *size)
     * }
     */
    public static int JxlDecoderGetICCProfileSizeLegacy(MemorySegment dec, MemorySegment format, int target, MemorySegment size) {
        var mh$ = JxlDecoderGetICCProfileSizeLegacy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetICCProfileSize", dec, MemorySegment.NULL, target, size);
            }
            return (int)mh$.invokeExact(dec, MemorySegment.NULL, target, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder *dec, JxlColorProfileTarget target, size_t *size)
     * }
     */
    public static int JxlDecoderGetICCProfileSize(MemorySegment dec, int target, MemorySegment size) {
        var mh$ = JxlDecoderGetICCProfileSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetICCProfileSize", dec, target, size);
            }
            return (int)mh$.invokeExact(dec, target, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetColorAsICCProfileLegacy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetColorAsICCProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    private static class JxlDecoderGetColorAsICCProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetColorAsICCProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, uint8_t *icc_profile, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetColorAsICCProfile$descriptor() {
        return JxlDecoderGetColorAsICCProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, uint8_t *icc_profile, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderGetColorAsICCProfile$handle() {
        return JxlDecoderGetColorAsICCProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, uint8_t *icc_profile, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderGetColorAsICCProfile$address() {
        return JxlDecoderGetColorAsICCProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, uint8_t *icc_profile, size_t size)
     * }
     */
    public static int JxlDecoderGetColorAsICCProfileLegacy(MemorySegment dec, MemorySegment format, int target, MemorySegment icc_profile, long size) {
        var mh$ = JxlDecoderGetColorAsICCProfileLegacy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetColorAsICCProfile", dec, MemorySegment.NULL, target, icc_profile, size);
            }
            return (int)mh$.invokeExact(dec, MemorySegment.NULL, target, icc_profile, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder *dec, const JxlPixelFormat *format, JxlColorProfileTarget target, uint8_t *icc_profile, size_t size)
     * }
     */
    public static int JxlDecoderGetColorAsICCProfile(MemorySegment dec, int target, MemorySegment icc_profile, long size) {
        var mh$ = JxlDecoderGetColorAsICCProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetColorAsICCProfile", dec, target, icc_profile, size);
            }
            return (int)mh$.invokeExact(dec, target, icc_profile, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetPreferredColorProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetPreferredColorProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreferredColorProfile(JxlDecoder *dec, const JxlColorEncoding *color_encoding)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetPreferredColorProfile$descriptor() {
        return JxlDecoderSetPreferredColorProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreferredColorProfile(JxlDecoder *dec, const JxlColorEncoding *color_encoding)
     * }
     */
    public static MethodHandle JxlDecoderSetPreferredColorProfile$handle() {
        return JxlDecoderSetPreferredColorProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreferredColorProfile(JxlDecoder *dec, const JxlColorEncoding *color_encoding)
     * }
     */
    public static MemorySegment JxlDecoderSetPreferredColorProfile$address() {
        return JxlDecoderSetPreferredColorProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreferredColorProfile(JxlDecoder *dec, const JxlColorEncoding *color_encoding)
     * }
     */
    public static int JxlDecoderSetPreferredColorProfile(MemorySegment dec, MemorySegment color_encoding) {
        var mh$ = JxlDecoderSetPreferredColorProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetPreferredColorProfile", dec, color_encoding);
            }
            return (int)mh$.invokeExact(dec, color_encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderPreviewOutBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderPreviewOutBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderPreviewOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static FunctionDescriptor JxlDecoderPreviewOutBufferSize$descriptor() {
        return JxlDecoderPreviewOutBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderPreviewOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static MethodHandle JxlDecoderPreviewOutBufferSize$handle() {
        return JxlDecoderPreviewOutBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderPreviewOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static MemorySegment JxlDecoderPreviewOutBufferSize$address() {
        return JxlDecoderPreviewOutBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderPreviewOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static int JxlDecoderPreviewOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderPreviewOutBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderPreviewOutBufferSize", dec, format, size);
            }
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetPreviewOutBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetPreviewOutBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetPreviewOutBuffer$descriptor() {
        return JxlDecoderSetPreviewOutBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderSetPreviewOutBuffer$handle() {
        return JxlDecoderSetPreviewOutBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderSetPreviewOutBuffer$address() {
        return JxlDecoderSetPreviewOutBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static int JxlDecoderSetPreviewOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetPreviewOutBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetPreviewOutBuffer", dec, format, buffer, size);
            }
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetFrameHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetFrameHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder *dec, JxlFrameHeader *header)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetFrameHeader$descriptor() {
        return JxlDecoderGetFrameHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder *dec, JxlFrameHeader *header)
     * }
     */
    public static MethodHandle JxlDecoderGetFrameHeader$handle() {
        return JxlDecoderGetFrameHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder *dec, JxlFrameHeader *header)
     * }
     */
    public static MemorySegment JxlDecoderGetFrameHeader$address() {
        return JxlDecoderGetFrameHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder *dec, JxlFrameHeader *header)
     * }
     */
    public static int JxlDecoderGetFrameHeader(MemorySegment dec, MemorySegment header) {
        var mh$ = JxlDecoderGetFrameHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetFrameHeader", dec, header);
            }
            return (int)mh$.invokeExact(dec, header);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderGetFrameName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderGetFrameName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameName(const JxlDecoder *dec, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderGetFrameName$descriptor() {
        return JxlDecoderGetFrameName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameName(const JxlDecoder *dec, char *name, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderGetFrameName$handle() {
        return JxlDecoderGetFrameName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameName(const JxlDecoder *dec, char *name, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderGetFrameName$address() {
        return JxlDecoderGetFrameName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderGetFrameName(const JxlDecoder *dec, char *name, size_t size)
     * }
     */
    public static int JxlDecoderGetFrameName(MemorySegment dec, MemorySegment name, long size) {
        var mh$ = JxlDecoderGetFrameName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderGetFrameName", dec, name, size);
            }
            return (int)mh$.invokeExact(dec, name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderDCOutBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderDCOutBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDCOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static FunctionDescriptor JxlDecoderDCOutBufferSize$descriptor() {
        return JxlDecoderDCOutBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDCOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static MethodHandle JxlDecoderDCOutBufferSize$handle() {
        return JxlDecoderDCOutBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDCOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static MemorySegment JxlDecoderDCOutBufferSize$address() {
        return JxlDecoderDCOutBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderDCOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static int JxlDecoderDCOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderDCOutBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderDCOutBufferSize", dec, format, size);
            }
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetDCOutBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetDCOutBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetDCOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetDCOutBuffer$descriptor() {
        return JxlDecoderSetDCOutBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetDCOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderSetDCOutBuffer$handle() {
        return JxlDecoderSetDCOutBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetDCOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderSetDCOutBuffer$address() {
        return JxlDecoderSetDCOutBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetDCOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static int JxlDecoderSetDCOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetDCOutBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetDCOutBuffer", dec, format, buffer, size);
            }
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderImageOutBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderImageOutBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderImageOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static FunctionDescriptor JxlDecoderImageOutBufferSize$descriptor() {
        return JxlDecoderImageOutBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderImageOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static MethodHandle JxlDecoderImageOutBufferSize$handle() {
        return JxlDecoderImageOutBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderImageOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static MemorySegment JxlDecoderImageOutBufferSize$address() {
        return JxlDecoderImageOutBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderImageOutBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size)
     * }
     */
    public static int JxlDecoderImageOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderImageOutBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderImageOutBufferSize", dec, format, size);
            }
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetImageOutBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetImageOutBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetImageOutBuffer$descriptor() {
        return JxlDecoderSetImageOutBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderSetImageOutBuffer$handle() {
        return JxlDecoderSetImageOutBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderSetImageOutBuffer$address() {
        return JxlDecoderSetImageOutBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size)
     * }
     */
    public static int JxlDecoderSetImageOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetImageOutBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetImageOutBuffer", dec, format, buffer, size);
            }
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetImageOutCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetImageOutCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder *dec, const JxlPixelFormat *format, JxlImageOutCallback callback, void *opaque)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetImageOutCallback$descriptor() {
        return JxlDecoderSetImageOutCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder *dec, const JxlPixelFormat *format, JxlImageOutCallback callback, void *opaque)
     * }
     */
    public static MethodHandle JxlDecoderSetImageOutCallback$handle() {
        return JxlDecoderSetImageOutCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder *dec, const JxlPixelFormat *format, JxlImageOutCallback callback, void *opaque)
     * }
     */
    public static MemorySegment JxlDecoderSetImageOutCallback$address() {
        return JxlDecoderSetImageOutCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder *dec, const JxlPixelFormat *format, JxlImageOutCallback callback, void *opaque)
     * }
     */
    public static int JxlDecoderSetImageOutCallback(MemorySegment dec, MemorySegment format, MemorySegment callback, MemorySegment opaque) {
        var mh$ = JxlDecoderSetImageOutCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetImageOutCallback", dec, format, callback, opaque);
            }
            return (int)mh$.invokeExact(dec, format, callback, opaque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderExtraChannelBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderExtraChannelBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderExtraChannelBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size, uint32_t index)
     * }
     */
    public static FunctionDescriptor JxlDecoderExtraChannelBufferSize$descriptor() {
        return JxlDecoderExtraChannelBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderExtraChannelBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size, uint32_t index)
     * }
     */
    public static MethodHandle JxlDecoderExtraChannelBufferSize$handle() {
        return JxlDecoderExtraChannelBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderExtraChannelBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size, uint32_t index)
     * }
     */
    public static MemorySegment JxlDecoderExtraChannelBufferSize$address() {
        return JxlDecoderExtraChannelBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderExtraChannelBufferSize(const JxlDecoder *dec, const JxlPixelFormat *format, size_t *size, uint32_t index)
     * }
     */
    public static int JxlDecoderExtraChannelBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size, int index) {
        var mh$ = JxlDecoderExtraChannelBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderExtraChannelBufferSize", dec, format, size, index);
            }
            return (int)mh$.invokeExact(dec, format, size, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetExtraChannelBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetExtraChannelBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetExtraChannelBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size, uint32_t index)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetExtraChannelBuffer$descriptor() {
        return JxlDecoderSetExtraChannelBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetExtraChannelBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size, uint32_t index)
     * }
     */
    public static MethodHandle JxlDecoderSetExtraChannelBuffer$handle() {
        return JxlDecoderSetExtraChannelBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetExtraChannelBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size, uint32_t index)
     * }
     */
    public static MemorySegment JxlDecoderSetExtraChannelBuffer$address() {
        return JxlDecoderSetExtraChannelBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetExtraChannelBuffer(JxlDecoder *dec, const JxlPixelFormat *format, void *buffer, size_t size, uint32_t index)
     * }
     */
    public static int JxlDecoderSetExtraChannelBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size, int index) {
        var mh$ = JxlDecoderSetExtraChannelBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetExtraChannelBuffer", dec, format, buffer, size, index);
            }
            return (int)mh$.invokeExact(dec, format, buffer, size, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderSetJPEGBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderSetJPEGBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetJPEGBuffer(JxlDecoder *dec, uint8_t *data, size_t size)
     * }
     */
    public static FunctionDescriptor JxlDecoderSetJPEGBuffer$descriptor() {
        return JxlDecoderSetJPEGBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetJPEGBuffer(JxlDecoder *dec, uint8_t *data, size_t size)
     * }
     */
    public static MethodHandle JxlDecoderSetJPEGBuffer$handle() {
        return JxlDecoderSetJPEGBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetJPEGBuffer(JxlDecoder *dec, uint8_t *data, size_t size)
     * }
     */
    public static MemorySegment JxlDecoderSetJPEGBuffer$address() {
        return JxlDecoderSetJPEGBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderSetJPEGBuffer(JxlDecoder *dec, uint8_t *data, size_t size)
     * }
     */
    public static int JxlDecoderSetJPEGBuffer(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetJPEGBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderSetJPEGBuffer", dec, data, size);
            }
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderReleaseJPEGBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_LONG,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderReleaseJPEGBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderReleaseJPEGBuffer$descriptor() {
        return JxlDecoderReleaseJPEGBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderReleaseJPEGBuffer$handle() {
        return JxlDecoderReleaseJPEGBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderReleaseJPEGBuffer$address() {
        return JxlDecoderReleaseJPEGBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder *dec)
     * }
     */
    public static long JxlDecoderReleaseJPEGBuffer(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseJPEGBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderReleaseJPEGBuffer", dec);
            }
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JxlDecoderFlushImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("JxlDecoderFlushImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder *dec)
     * }
     */
    public static FunctionDescriptor JxlDecoderFlushImage$descriptor() {
        return JxlDecoderFlushImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder *dec)
     * }
     */
    public static MethodHandle JxlDecoderFlushImage$handle() {
        return JxlDecoderFlushImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder *dec)
     * }
     */
    public static MemorySegment JxlDecoderFlushImage$address() {
        return JxlDecoderFlushImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder *dec)
     * }
     */
    public static int JxlDecoderFlushImage(MemorySegment dec) {
        var mh$ = JxlDecoderFlushImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JxlDecoderFlushImage", dec);
            }
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = decode_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int JXL_PARALLEL_RET_RUNNER_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define JXL_PARALLEL_RET_RUNNER_ERROR -1
     * }
     */
    public static int JXL_PARALLEL_RET_RUNNER_ERROR() {
        return JXL_PARALLEL_RET_RUNNER_ERROR;
    }
}

