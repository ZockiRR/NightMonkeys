// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class decode_h  {

    /* package-private */ decode_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int JXL_TRUE() {
        return (int)1L;
    }
    public static int JXL_FALSE() {
        return (int)0L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_fast16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __darwin_va_list = Constants$root.C_POINTER$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int JXL_TYPE_FLOAT() {
        return (int)0L;
    }
    public static int JXL_TYPE_BOOLEAN() {
        return (int)1L;
    }
    public static int JXL_TYPE_UINT8() {
        return (int)2L;
    }
    public static int JXL_TYPE_UINT16() {
        return (int)3L;
    }
    public static int JXL_TYPE_UINT32() {
        return (int)4L;
    }
    public static int JXL_TYPE_FLOAT16() {
        return (int)5L;
    }
    public static int JXL_NATIVE_ENDIAN() {
        return (int)0L;
    }
    public static int JXL_LITTLE_ENDIAN() {
        return (int)1L;
    }
    public static int JXL_BIG_ENDIAN() {
        return (int)2L;
    }
    public static int JXL_COLOR_SPACE_RGB() {
        return (int)0L;
    }
    public static int JXL_COLOR_SPACE_GRAY() {
        return (int)1L;
    }
    public static int JXL_COLOR_SPACE_XYB() {
        return (int)2L;
    }
    public static int JXL_COLOR_SPACE_UNKNOWN() {
        return (int)3L;
    }
    public static int JXL_WHITE_POINT_D65() {
        return (int)1L;
    }
    public static int JXL_WHITE_POINT_CUSTOM() {
        return (int)2L;
    }
    public static int JXL_WHITE_POINT_E() {
        return (int)10L;
    }
    public static int JXL_WHITE_POINT_DCI() {
        return (int)11L;
    }
    public static int JXL_PRIMARIES_SRGB() {
        return (int)1L;
    }
    public static int JXL_PRIMARIES_CUSTOM() {
        return (int)2L;
    }
    public static int JXL_PRIMARIES_2100() {
        return (int)9L;
    }
    public static int JXL_PRIMARIES_P3() {
        return (int)11L;
    }
    public static int JXL_TRANSFER_FUNCTION_709() {
        return (int)1L;
    }
    public static int JXL_TRANSFER_FUNCTION_UNKNOWN() {
        return (int)2L;
    }
    public static int JXL_TRANSFER_FUNCTION_LINEAR() {
        return (int)8L;
    }
    public static int JXL_TRANSFER_FUNCTION_SRGB() {
        return (int)13L;
    }
    public static int JXL_TRANSFER_FUNCTION_PQ() {
        return (int)16L;
    }
    public static int JXL_TRANSFER_FUNCTION_DCI() {
        return (int)17L;
    }
    public static int JXL_TRANSFER_FUNCTION_HLG() {
        return (int)18L;
    }
    public static int JXL_TRANSFER_FUNCTION_GAMMA() {
        return (int)65535L;
    }
    public static int JXL_RENDERING_INTENT_PERCEPTUAL() {
        return (int)0L;
    }
    public static int JXL_RENDERING_INTENT_RELATIVE() {
        return (int)1L;
    }
    public static int JXL_RENDERING_INTENT_SATURATION() {
        return (int)2L;
    }
    public static int JXL_RENDERING_INTENT_ABSOLUTE() {
        return (int)3L;
    }
    public static int JXL_ORIENT_IDENTITY() {
        return (int)1L;
    }
    public static int JXL_ORIENT_FLIP_HORIZONTAL() {
        return (int)2L;
    }
    public static int JXL_ORIENT_ROTATE_180() {
        return (int)3L;
    }
    public static int JXL_ORIENT_FLIP_VERTICAL() {
        return (int)4L;
    }
    public static int JXL_ORIENT_TRANSPOSE() {
        return (int)5L;
    }
    public static int JXL_ORIENT_ROTATE_90_CW() {
        return (int)6L;
    }
    public static int JXL_ORIENT_ANTI_TRANSPOSE() {
        return (int)7L;
    }
    public static int JXL_ORIENT_ROTATE_90_CCW() {
        return (int)8L;
    }
    public static int JXL_CHANNEL_ALPHA() {
        return (int)0L;
    }
    public static int JXL_CHANNEL_DEPTH() {
        return (int)1L;
    }
    public static int JXL_CHANNEL_SPOT_COLOR() {
        return (int)2L;
    }
    public static int JXL_CHANNEL_SELECTION_MASK() {
        return (int)3L;
    }
    public static int JXL_CHANNEL_BLACK() {
        return (int)4L;
    }
    public static int JXL_CHANNEL_CFA() {
        return (int)5L;
    }
    public static int JXL_CHANNEL_THERMAL() {
        return (int)6L;
    }
    public static int JXL_CHANNEL_RESERVED0() {
        return (int)7L;
    }
    public static int JXL_CHANNEL_RESERVED1() {
        return (int)8L;
    }
    public static int JXL_CHANNEL_RESERVED2() {
        return (int)9L;
    }
    public static int JXL_CHANNEL_RESERVED3() {
        return (int)10L;
    }
    public static int JXL_CHANNEL_RESERVED4() {
        return (int)11L;
    }
    public static int JXL_CHANNEL_RESERVED5() {
        return (int)12L;
    }
    public static int JXL_CHANNEL_RESERVED6() {
        return (int)13L;
    }
    public static int JXL_CHANNEL_RESERVED7() {
        return (int)14L;
    }
    public static int JXL_CHANNEL_UNKNOWN() {
        return (int)15L;
    }
    public static int JXL_CHANNEL_OPTIONAL() {
        return (int)16L;
    }
    public static OfInt JxlParallelRetCode = Constants$root.C_INT$LAYOUT;
    public static MethodHandle JxlDecoderVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1.JxlDecoderVersion$MH,"JxlDecoderVersion");
    }
    public static int JxlDecoderVersion () {
        var mh$ = JxlDecoderVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int JXL_SIG_NOT_ENOUGH_BYTES() {
        return (int)0L;
    }
    public static int JXL_SIG_INVALID() {
        return (int)1L;
    }
    public static int JXL_SIG_CODESTREAM() {
        return (int)2L;
    }
    public static int JXL_SIG_CONTAINER() {
        return (int)3L;
    }
    public static MethodHandle JxlSignatureCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$1.JxlSignatureCheck$MH,"JxlSignatureCheck");
    }
    public static int JxlSignatureCheck ( Addressable buf,  long len) {
        var mh$ = JxlSignatureCheck$MH();
        try {
            return (int)mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JxlDecoderCreate$MH,"JxlDecoderCreate");
    }
    public static MemoryAddress JxlDecoderCreate ( Addressable memory_manager) {
        var mh$ = JxlDecoderCreate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(memory_manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReset$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JxlDecoderReset$MH,"JxlDecoderReset");
    }
    public static void JxlDecoderReset ( Addressable dec) {
        var mh$ = JxlDecoderReset$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JxlDecoderDestroy$MH,"JxlDecoderDestroy");
    }
    public static void JxlDecoderDestroy ( Addressable dec) {
        var mh$ = JxlDecoderDestroy$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int JXL_DEC_SUCCESS() {
        return (int)0L;
    }
    public static int JXL_DEC_ERROR() {
        return (int)1L;
    }
    public static int JXL_DEC_NEED_MORE_INPUT() {
        return (int)2L;
    }
    public static int JXL_DEC_NEED_PREVIEW_OUT_BUFFER() {
        return (int)3L;
    }
    public static int JXL_DEC_NEED_DC_OUT_BUFFER() {
        return (int)4L;
    }
    public static int JXL_DEC_NEED_IMAGE_OUT_BUFFER() {
        return (int)5L;
    }
    public static int JXL_DEC_JPEG_NEED_MORE_OUTPUT() {
        return (int)6L;
    }
    public static int JXL_DEC_BASIC_INFO() {
        return (int)64L;
    }
    public static int JXL_DEC_EXTENSIONS() {
        return (int)128L;
    }
    public static int JXL_DEC_COLOR_ENCODING() {
        return (int)256L;
    }
    public static int JXL_DEC_PREVIEW_IMAGE() {
        return (int)512L;
    }
    public static int JXL_DEC_FRAME() {
        return (int)1024L;
    }
    public static int JXL_DEC_DC_IMAGE() {
        return (int)2048L;
    }
    public static int JXL_DEC_FULL_IMAGE() {
        return (int)4096L;
    }
    public static int JXL_DEC_JPEG_RECONSTRUCTION() {
        return (int)8192L;
    }
    public static MethodHandle JxlDecoderRewind$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JxlDecoderRewind$MH,"JxlDecoderRewind");
    }
    public static void JxlDecoderRewind ( Addressable dec) {
        var mh$ = JxlDecoderRewind$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSkipFrames$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JxlDecoderSkipFrames$MH,"JxlDecoderSkipFrames");
    }
    public static void JxlDecoderSkipFrames ( Addressable dec,  long amount) {
        var mh$ = JxlDecoderSkipFrames$MH();
        try {
            mh$.invokeExact(dec, amount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderDefaultPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$2.JxlDecoderDefaultPixelFormat$MH,"JxlDecoderDefaultPixelFormat");
    }
    public static int JxlDecoderDefaultPixelFormat ( Addressable dec,  Addressable format) {
        var mh$ = JxlDecoderDefaultPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(dec, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetParallelRunner$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlDecoderSetParallelRunner$MH,"JxlDecoderSetParallelRunner");
    }
    public static int JxlDecoderSetParallelRunner ( Addressable dec,  Addressable parallel_runner,  Addressable parallel_runner_opaque) {
        var mh$ = JxlDecoderSetParallelRunner$MH();
        try {
            return (int)mh$.invokeExact(dec, parallel_runner, parallel_runner_opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSizeHintBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlDecoderSizeHintBasicInfo$MH,"JxlDecoderSizeHintBasicInfo");
    }
    public static long JxlDecoderSizeHintBasicInfo ( Addressable dec) {
        var mh$ = JxlDecoderSizeHintBasicInfo$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSubscribeEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlDecoderSubscribeEvents$MH,"JxlDecoderSubscribeEvents");
    }
    public static int JxlDecoderSubscribeEvents ( Addressable dec,  int events_wanted) {
        var mh$ = JxlDecoderSubscribeEvents$MH();
        try {
            return (int)mh$.invokeExact(dec, events_wanted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetKeepOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlDecoderSetKeepOrientation$MH,"JxlDecoderSetKeepOrientation");
    }
    public static int JxlDecoderSetKeepOrientation ( Addressable dec,  int keep_orientation) {
        var mh$ = JxlDecoderSetKeepOrientation$MH();
        try {
            return (int)mh$.invokeExact(dec, keep_orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderProcessInput$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlDecoderProcessInput$MH,"JxlDecoderProcessInput");
    }
    public static int JxlDecoderProcessInput ( Addressable dec) {
        var mh$ = JxlDecoderProcessInput$MH();
        try {
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetInput$MH() {
        return RuntimeHelper.requireNonNull(constants$3.JxlDecoderSetInput$MH,"JxlDecoderSetInput");
    }
    public static int JxlDecoderSetInput ( Addressable dec,  Addressable data,  long size) {
        var mh$ = JxlDecoderSetInput$MH();
        try {
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReleaseInput$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlDecoderReleaseInput$MH,"JxlDecoderReleaseInput");
    }
    public static long JxlDecoderReleaseInput ( Addressable dec) {
        var mh$ = JxlDecoderReleaseInput$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlDecoderGetBasicInfo$MH,"JxlDecoderGetBasicInfo");
    }
    public static int JxlDecoderGetBasicInfo ( Addressable dec,  Addressable info) {
        var mh$ = JxlDecoderGetBasicInfo$MH();
        try {
            return (int)mh$.invokeExact(dec, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetExtraChannelInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlDecoderGetExtraChannelInfo$MH,"JxlDecoderGetExtraChannelInfo");
    }
    public static int JxlDecoderGetExtraChannelInfo ( Addressable dec,  long index,  Addressable info) {
        var mh$ = JxlDecoderGetExtraChannelInfo$MH();
        try {
            return (int)mh$.invokeExact(dec, index, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetExtraChannelName$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlDecoderGetExtraChannelName$MH,"JxlDecoderGetExtraChannelName");
    }
    public static int JxlDecoderGetExtraChannelName ( Addressable dec,  long index,  Addressable name,  long size) {
        var mh$ = JxlDecoderGetExtraChannelName$MH();
        try {
            return (int)mh$.invokeExact(dec, index, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int JXL_COLOR_PROFILE_TARGET_ORIGINAL() {
        return (int)0L;
    }
    public static int JXL_COLOR_PROFILE_TARGET_DATA() {
        return (int)1L;
    }
    public static MethodHandle JxlDecoderGetColorAsEncodedProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlDecoderGetColorAsEncodedProfile$MH,"JxlDecoderGetColorAsEncodedProfile");
    }
    public static int JxlDecoderGetColorAsEncodedProfile ( Addressable dec,  Addressable format,  int target,  Addressable color_encoding) {
        var mh$ = JxlDecoderGetColorAsEncodedProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, format, target, color_encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetICCProfileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$4.JxlDecoderGetICCProfileSize$MH,"JxlDecoderGetICCProfileSize");
    }
    public static int JxlDecoderGetICCProfileSize ( Addressable dec,  Addressable format,  int target,  Addressable size) {
        var mh$ = JxlDecoderGetICCProfileSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, target, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetColorAsICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlDecoderGetColorAsICCProfile$MH,"JxlDecoderGetColorAsICCProfile");
    }
    public static int JxlDecoderGetColorAsICCProfile ( Addressable dec,  Addressable format,  int target,  Addressable icc_profile,  long size) {
        var mh$ = JxlDecoderGetColorAsICCProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, format, target, icc_profile, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetPreferredColorProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlDecoderSetPreferredColorProfile$MH,"JxlDecoderSetPreferredColorProfile");
    }
    public static int JxlDecoderSetPreferredColorProfile ( Addressable dec,  Addressable color_encoding) {
        var mh$ = JxlDecoderSetPreferredColorProfile$MH();
        try {
            return (int)mh$.invokeExact(dec, color_encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderPreviewOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlDecoderPreviewOutBufferSize$MH,"JxlDecoderPreviewOutBufferSize");
    }
    public static int JxlDecoderPreviewOutBufferSize ( Addressable dec,  Addressable format,  Addressable size) {
        var mh$ = JxlDecoderPreviewOutBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetPreviewOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlDecoderSetPreviewOutBuffer$MH,"JxlDecoderSetPreviewOutBuffer");
    }
    public static int JxlDecoderSetPreviewOutBuffer ( Addressable dec,  Addressable format,  Addressable buffer,  long size) {
        var mh$ = JxlDecoderSetPreviewOutBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetFrameHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlDecoderGetFrameHeader$MH,"JxlDecoderGetFrameHeader");
    }
    public static int JxlDecoderGetFrameHeader ( Addressable dec,  Addressable header) {
        var mh$ = JxlDecoderGetFrameHeader$MH();
        try {
            return (int)mh$.invokeExact(dec, header);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderGetFrameName$MH() {
        return RuntimeHelper.requireNonNull(constants$5.JxlDecoderGetFrameName$MH,"JxlDecoderGetFrameName");
    }
    public static int JxlDecoderGetFrameName ( Addressable dec,  Addressable name,  long size) {
        var mh$ = JxlDecoderGetFrameName$MH();
        try {
            return (int)mh$.invokeExact(dec, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderDCOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlDecoderDCOutBufferSize$MH,"JxlDecoderDCOutBufferSize");
    }
    public static int JxlDecoderDCOutBufferSize ( Addressable dec,  Addressable format,  Addressable size) {
        var mh$ = JxlDecoderDCOutBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetDCOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlDecoderSetDCOutBuffer$MH,"JxlDecoderSetDCOutBuffer");
    }
    public static int JxlDecoderSetDCOutBuffer ( Addressable dec,  Addressable format,  Addressable buffer,  long size) {
        var mh$ = JxlDecoderSetDCOutBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderImageOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlDecoderImageOutBufferSize$MH,"JxlDecoderImageOutBufferSize");
    }
    public static int JxlDecoderImageOutBufferSize ( Addressable dec,  Addressable format,  Addressable size) {
        var mh$ = JxlDecoderImageOutBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetImageOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$6.JxlDecoderSetImageOutBuffer$MH,"JxlDecoderSetImageOutBuffer");
    }
    public static int JxlDecoderSetImageOutBuffer ( Addressable dec,  Addressable format,  Addressable buffer,  long size) {
        var mh$ = JxlDecoderSetImageOutBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetImageOutCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlDecoderSetImageOutCallback$MH,"JxlDecoderSetImageOutCallback");
    }
    public static int JxlDecoderSetImageOutCallback ( Addressable dec,  Addressable format,  Addressable callback,  Addressable opaque) {
        var mh$ = JxlDecoderSetImageOutCallback$MH();
        try {
            return (int)mh$.invokeExact(dec, format, callback, opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderExtraChannelBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlDecoderExtraChannelBufferSize$MH,"JxlDecoderExtraChannelBufferSize");
    }
    public static int JxlDecoderExtraChannelBufferSize ( Addressable dec,  Addressable format,  Addressable size,  int index) {
        var mh$ = JxlDecoderExtraChannelBufferSize$MH();
        try {
            return (int)mh$.invokeExact(dec, format, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetExtraChannelBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlDecoderSetExtraChannelBuffer$MH,"JxlDecoderSetExtraChannelBuffer");
    }
    public static int JxlDecoderSetExtraChannelBuffer ( Addressable dec,  Addressable format,  Addressable buffer,  long size,  int index) {
        var mh$ = JxlDecoderSetExtraChannelBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, format, buffer, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderSetJPEGBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlDecoderSetJPEGBuffer$MH,"JxlDecoderSetJPEGBuffer");
    }
    public static int JxlDecoderSetJPEGBuffer ( Addressable dec,  Addressable data,  long size) {
        var mh$ = JxlDecoderSetJPEGBuffer$MH();
        try {
            return (int)mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderReleaseJPEGBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlDecoderReleaseJPEGBuffer$MH,"JxlDecoderReleaseJPEGBuffer");
    }
    public static long JxlDecoderReleaseJPEGBuffer ( Addressable dec) {
        var mh$ = JxlDecoderReleaseJPEGBuffer$MH();
        try {
            return (long)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JxlDecoderFlushImage$MH() {
        return RuntimeHelper.requireNonNull(constants$7.JxlDecoderFlushImage$MH,"JxlDecoderFlushImage");
    }
    public static int JxlDecoderFlushImage ( Addressable dec) {
        var mh$ = JxlDecoderFlushImage$MH();
        try {
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryAddress NULL() {
        return constants$8.NULL$ADDR;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$8.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$8.__DARWIN_NULL$ADDR;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MAX() {
        return (int)2147483647L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static int JXL_PARALLEL_RET_RUNNER_ERROR() {
        return (int)-1L;
    }
}


