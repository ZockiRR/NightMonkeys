// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface jpegxl_free_func {

    void apply(java.lang.foreign.MemoryAddress opaque, java.lang.foreign.MemoryAddress address);
    static MemorySegment allocate(jpegxl_free_func fi, MemorySession session) {
        return RuntimeHelper.upcallStub(jpegxl_free_func.class, fi, constants$0.jpegxl_free_func$FUNC, session);
    }
    static jpegxl_free_func ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _opaque, java.lang.foreign.MemoryAddress _address) -> {
            try {
                constants$0.jpegxl_free_func$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_opaque, (java.lang.foreign.Addressable)_address);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


