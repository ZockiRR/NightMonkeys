// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct JxlBasicInfo {
 *     int have_container;
 *     uint32_t xsize;
 *     uint32_t ysize;
 *     uint32_t bits_per_sample;
 *     uint32_t exponent_bits_per_sample;
 *     float intensity_target;
 *     float min_nits;
 *     int relative_to_max_display;
 *     float linear_below;
 *     int uses_original_profile;
 *     int have_preview;
 *     int have_animation;
 *     JxlOrientation orientation;
 *     uint32_t num_color_channels;
 *     uint32_t num_extra_channels;
 *     uint32_t alpha_bits;
 *     uint32_t alpha_exponent_bits;
 *     int alpha_premultiplied;
 *     JxlPreviewHeader preview;
 *     JxlAnimationHeader animation;
 *     uint8_t padding[108];
 * };
 *}
 */
public class JxlBasicInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$8.const$0;
    }

    public static VarHandle have_container$VH() {
        return constants$8.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int have_container;
     *}
     */
    public static int have_container$get(MemorySegment seg) {
        return (int) constants$8.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int have_container;
     *}
     */
    public static void have_container$set(MemorySegment seg, int x) {
        constants$8.const$1.set(seg, x);
    }

    public static int have_container$get(MemorySegment seg, long index) {
        return (int) constants$8.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void have_container$set(MemorySegment seg, long index, int x) {
        constants$8.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle xsize$VH() {
        return constants$8.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t xsize;
     *}
     */
    public static int xsize$get(MemorySegment seg) {
        return (int) constants$8.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t xsize;
     *}
     */
    public static void xsize$set(MemorySegment seg, int x) {
        constants$8.const$2.set(seg, x);
    }

    public static int xsize$get(MemorySegment seg, long index) {
        return (int) constants$8.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void xsize$set(MemorySegment seg, long index, int x) {
        constants$8.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle ysize$VH() {
        return constants$8.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t ysize;
     *}
     */
    public static int ysize$get(MemorySegment seg) {
        return (int) constants$8.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t ysize;
     *}
     */
    public static void ysize$set(MemorySegment seg, int x) {
        constants$8.const$3.set(seg, x);
    }

    public static int ysize$get(MemorySegment seg, long index) {
        return (int) constants$8.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void ysize$set(MemorySegment seg, long index, int x) {
        constants$8.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle bits_per_sample$VH() {
        return constants$8.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t bits_per_sample;
     *}
     */
    public static int bits_per_sample$get(MemorySegment seg) {
        return (int) constants$8.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t bits_per_sample;
     *}
     */
    public static void bits_per_sample$set(MemorySegment seg, int x) {
        constants$8.const$4.set(seg, x);
    }

    public static int bits_per_sample$get(MemorySegment seg, long index) {
        return (int) constants$8.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void bits_per_sample$set(MemorySegment seg, long index, int x) {
        constants$8.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle exponent_bits_per_sample$VH() {
        return constants$8.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t exponent_bits_per_sample;
     *}
     */
    public static int exponent_bits_per_sample$get(MemorySegment seg) {
        return (int) constants$8.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t exponent_bits_per_sample;
     *}
     */
    public static void exponent_bits_per_sample$set(MemorySegment seg, int x) {
        constants$8.const$5.set(seg, x);
    }

    public static int exponent_bits_per_sample$get(MemorySegment seg, long index) {
        return (int) constants$8.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void exponent_bits_per_sample$set(MemorySegment seg, long index, int x) {
        constants$8.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle intensity_target$VH() {
        return constants$9.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * float intensity_target;
     *}
     */
    public static float intensity_target$get(MemorySegment seg) {
        return (float) constants$9.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * float intensity_target;
     *}
     */
    public static void intensity_target$set(MemorySegment seg, float x) {
        constants$9.const$0.set(seg, x);
    }

    public static float intensity_target$get(MemorySegment seg, long index) {
        return (float) constants$9.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void intensity_target$set(MemorySegment seg, long index, float x) {
        constants$9.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle min_nits$VH() {
        return constants$9.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * float min_nits;
     *}
     */
    public static float min_nits$get(MemorySegment seg) {
        return (float) constants$9.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * float min_nits;
     *}
     */
    public static void min_nits$set(MemorySegment seg, float x) {
        constants$9.const$1.set(seg, x);
    }

    public static float min_nits$get(MemorySegment seg, long index) {
        return (float) constants$9.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void min_nits$set(MemorySegment seg, long index, float x) {
        constants$9.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle relative_to_max_display$VH() {
        return constants$9.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int relative_to_max_display;
     *}
     */
    public static int relative_to_max_display$get(MemorySegment seg) {
        return (int) constants$9.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int relative_to_max_display;
     *}
     */
    public static void relative_to_max_display$set(MemorySegment seg, int x) {
        constants$9.const$2.set(seg, x);
    }

    public static int relative_to_max_display$get(MemorySegment seg, long index) {
        return (int) constants$9.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void relative_to_max_display$set(MemorySegment seg, long index, int x) {
        constants$9.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle linear_below$VH() {
        return constants$9.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * float linear_below;
     *}
     */
    public static float linear_below$get(MemorySegment seg) {
        return (float) constants$9.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * float linear_below;
     *}
     */
    public static void linear_below$set(MemorySegment seg, float x) {
        constants$9.const$3.set(seg, x);
    }

    public static float linear_below$get(MemorySegment seg, long index) {
        return (float) constants$9.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void linear_below$set(MemorySegment seg, long index, float x) {
        constants$9.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle uses_original_profile$VH() {
        return constants$9.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int uses_original_profile;
     *}
     */
    public static int uses_original_profile$get(MemorySegment seg) {
        return (int) constants$9.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int uses_original_profile;
     *}
     */
    public static void uses_original_profile$set(MemorySegment seg, int x) {
        constants$9.const$4.set(seg, x);
    }

    public static int uses_original_profile$get(MemorySegment seg, long index) {
        return (int) constants$9.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void uses_original_profile$set(MemorySegment seg, long index, int x) {
        constants$9.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle have_preview$VH() {
        return constants$9.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int have_preview;
     *}
     */
    public static int have_preview$get(MemorySegment seg) {
        return (int) constants$9.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int have_preview;
     *}
     */
    public static void have_preview$set(MemorySegment seg, int x) {
        constants$9.const$5.set(seg, x);
    }

    public static int have_preview$get(MemorySegment seg, long index) {
        return (int) constants$9.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void have_preview$set(MemorySegment seg, long index, int x) {
        constants$9.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle have_animation$VH() {
        return constants$10.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int have_animation;
     *}
     */
    public static int have_animation$get(MemorySegment seg) {
        return (int) constants$10.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int have_animation;
     *}
     */
    public static void have_animation$set(MemorySegment seg, int x) {
        constants$10.const$0.set(seg, x);
    }

    public static int have_animation$get(MemorySegment seg, long index) {
        return (int) constants$10.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void have_animation$set(MemorySegment seg, long index, int x) {
        constants$10.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle orientation$VH() {
        return constants$10.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlOrientation orientation;
     *}
     */
    public static int orientation$get(MemorySegment seg) {
        return (int) constants$10.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlOrientation orientation;
     *}
     */
    public static void orientation$set(MemorySegment seg, int x) {
        constants$10.const$1.set(seg, x);
    }

    public static int orientation$get(MemorySegment seg, long index) {
        return (int) constants$10.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void orientation$set(MemorySegment seg, long index, int x) {
        constants$10.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle num_color_channels$VH() {
        return constants$10.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_color_channels;
     *}
     */
    public static int num_color_channels$get(MemorySegment seg) {
        return (int) constants$10.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_color_channels;
     *}
     */
    public static void num_color_channels$set(MemorySegment seg, int x) {
        constants$10.const$2.set(seg, x);
    }

    public static int num_color_channels$get(MemorySegment seg, long index) {
        return (int) constants$10.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void num_color_channels$set(MemorySegment seg, long index, int x) {
        constants$10.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle num_extra_channels$VH() {
        return constants$10.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_extra_channels;
     *}
     */
    public static int num_extra_channels$get(MemorySegment seg) {
        return (int) constants$10.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_extra_channels;
     *}
     */
    public static void num_extra_channels$set(MemorySegment seg, int x) {
        constants$10.const$3.set(seg, x);
    }

    public static int num_extra_channels$get(MemorySegment seg, long index) {
        return (int) constants$10.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void num_extra_channels$set(MemorySegment seg, long index, int x) {
        constants$10.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle alpha_bits$VH() {
        return constants$10.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t alpha_bits;
     *}
     */
    public static int alpha_bits$get(MemorySegment seg) {
        return (int) constants$10.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t alpha_bits;
     *}
     */
    public static void alpha_bits$set(MemorySegment seg, int x) {
        constants$10.const$4.set(seg, x);
    }

    public static int alpha_bits$get(MemorySegment seg, long index) {
        return (int) constants$10.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void alpha_bits$set(MemorySegment seg, long index, int x) {
        constants$10.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle alpha_exponent_bits$VH() {
        return constants$10.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t alpha_exponent_bits;
     *}
     */
    public static int alpha_exponent_bits$get(MemorySegment seg) {
        return (int) constants$10.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t alpha_exponent_bits;
     *}
     */
    public static void alpha_exponent_bits$set(MemorySegment seg, int x) {
        constants$10.const$5.set(seg, x);
    }

    public static int alpha_exponent_bits$get(MemorySegment seg, long index) {
        return (int) constants$10.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void alpha_exponent_bits$set(MemorySegment seg, long index, int x) {
        constants$10.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle alpha_premultiplied$VH() {
        return constants$11.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int alpha_premultiplied;
     *}
     */
    public static int alpha_premultiplied$get(MemorySegment seg) {
        return (int) constants$11.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int alpha_premultiplied;
     *}
     */
    public static void alpha_premultiplied$set(MemorySegment seg, int x) {
        constants$11.const$0.set(seg, x);
    }

    public static int alpha_premultiplied$get(MemorySegment seg, long index) {
        return (int) constants$11.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void alpha_premultiplied$set(MemorySegment seg, long index, int x) {
        constants$11.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment preview$slice(MemorySegment seg) {
        return seg.asSlice(72, 8);
    }

    public static MemorySegment animation$slice(MemorySegment seg) {
        return seg.asSlice(80, 16);
    }

    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(96, 108);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


