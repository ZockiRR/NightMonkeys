// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct JxlMemoryManagerStruct {
 *     void* opaque;
 *     jpegxl_alloc_func alloc;
 *     jpegxl_free_func free;
 * };
 *}
 */
public class JxlMemoryManagerStruct {

    public static MemoryLayout $LAYOUT() {
        return constants$14.const$4;
    }

    public static VarHandle opaque$VH() {
        return constants$14.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     *}
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$14.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     *}
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$5.set(seg, x);
    }

    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$14.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle alloc$VH() {
        return constants$15.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * jpegxl_alloc_func alloc;
     *}
     */
    public static MemorySegment alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$15.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * jpegxl_alloc_func alloc;
     *}
     */
    public static void alloc$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$0.set(seg, x);
    }

    public static MemorySegment alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$15.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void alloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static jpegxl_alloc_func alloc(MemorySegment segment, Arena scope) {
        return jpegxl_alloc_func.ofAddress(alloc$get(segment), scope);
    }

    public static VarHandle free$VH() {
        return constants$15.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * jpegxl_free_func free;
     *}
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$15.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * jpegxl_free_func free;
     *}
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$1.set(seg, x);
    }

    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$15.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static jpegxl_free_func free(MemorySegment segment, Arena scope) {
        return jpegxl_free_func.ofAddress(free$get(segment), scope);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


