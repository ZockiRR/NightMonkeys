// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.JAVA_BYTE;
import static java.lang.foreign.ValueLayout.JAVA_DOUBLE;
import static java.lang.foreign.ValueLayout.JAVA_FLOAT;
import static java.lang.foreign.ValueLayout.JAVA_INT;
import static java.lang.foreign.ValueLayout.JAVA_LONG;
import static java.lang.foreign.ValueLayout.JAVA_SHORT;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfDouble;
import static java.lang.foreign.ValueLayout.OfFloat;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;
import static java.lang.foreign.ValueLayout.OfShort;

public class decode_h {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;

    /**
     * {@snippet :
     * #define __WORDSIZE 64
     *}
     */
    public static int __WORDSIZE() {
        return (int) 64L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_ONLY_64_BIT_INO_T 0
     *}
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     *}
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_ONLY_VERS_1050 0
     *}
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_UNIX03 1
     *}
     */
    public static int __DARWIN_UNIX03() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_64_BIT_INO_T 1
     *}
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_VERS_1050 1
     *}
     */
    public static int __DARWIN_VERS_1050() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_NON_CANCELABLE 0
     *}
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __STDC_WANT_LIB_EXT1__ 1
     *}
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_NO_LONG_LONG 0
     *}
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     *}
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     *}
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     *}
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * #define __has_ptrcheck 0
     *}
     */
    public static int __has_ptrcheck() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_SIZE__ 8176
     *}
     */
    public static int __PTHREAD_SIZE__() {
        return (int) 8176L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_ATTR_SIZE__ 56
     *}
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int) 56L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     *}
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     *}
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int) 56L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     *}
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_COND_SIZE__ 40
     *}
     */
    public static int __PTHREAD_COND_SIZE__() {
        return (int) 40L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_ONCE_SIZE__ 8
     *}
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     *}
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int) 192L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     *}
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * #define INT8_MAX 127
     *}
     */
    public static int INT8_MAX() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * #define INT16_MAX 32767
     *}
     */
    public static int INT16_MAX() {
        return (int) 32767L;
    }

    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     *}
     */
    public static int INT32_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define UINT8_MAX 255
     *}
     */
    public static int UINT8_MAX() {
        return (int) 255L;
    }

    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     *}
     */
    public static int UINT16_MAX() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * #define JXL_TRUE 1
     *}
     */
    public static int JXL_TRUE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define JXL_FALSE 0
     *}
     */
    public static int JXL_FALSE() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     *}
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     *}
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     *}
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     *}
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     *}
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     *}
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     *}
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     *}
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     *}
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     *}
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     *}
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     *}
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     *}
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     *}
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_least64_t;
     *}
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     *}
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     *}
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     *}
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     *}
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     *}
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_fast16_t;
     *}
     */
    public static final OfShort int_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     *}
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     *}
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     *}
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_fast16_t;
     *}
     */
    public static final OfShort uint_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     *}
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     *}
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     *}
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     *}
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     *}
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     *}
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     *}
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     *}
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __int64_t;
     *}
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __uint64_t;
     *}
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_intptr_t;
     *}
     */
    public static final OfLong __darwin_intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_natural_t;
     *}
     */
    public static final OfInt __darwin_natural_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_ct_rune_t;
     *}
     */
    public static final OfInt __darwin_ct_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ptrdiff_t;
     *}
     */
    public static final OfLong __darwin_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_size_t;
     *}
     */
    public static final OfLong __darwin_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_wchar_t;
     *}
     */
    public static final OfInt __darwin_wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_rune_t;
     *}
     */
    public static final OfInt __darwin_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wint_t;
     *}
     */
    public static final OfInt __darwin_wint_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_clock_t;
     *}
     */
    public static final OfLong __darwin_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_socklen_t;
     *}
     */
    public static final OfInt __darwin_socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ssize_t;
     *}
     */
    public static final OfLong __darwin_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_time_t;
     *}
     */
    public static final OfLong __darwin_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __darwin_blkcnt_t;
     *}
     */
    public static final OfLong __darwin_blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_blksize_t;
     *}
     */
    public static final OfInt __darwin_blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_dev_t;
     *}
     */
    public static final OfInt __darwin_dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsblkcnt_t;
     *}
     */
    public static final OfInt __darwin_fsblkcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsfilcnt_t;
     *}
     */
    public static final OfInt __darwin_fsfilcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_gid_t;
     *}
     */
    public static final OfInt __darwin_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_id_t;
     *}
     */
    public static final OfInt __darwin_id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino64_t;
     *}
     */
    public static final OfLong __darwin_ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino_t;
     *}
     */
    public static final OfLong __darwin_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_name_t;
     *}
     */
    public static final OfInt __darwin_mach_port_name_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_t;
     *}
     */
    public static final OfInt __darwin_mach_port_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __darwin_mode_t;
     *}
     */
    public static final OfShort __darwin_mode_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long long __darwin_off_t;
     *}
     */
    public static final OfLong __darwin_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_pid_t;
     *}
     */
    public static final OfInt __darwin_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_sigset_t;
     *}
     */
    public static final OfInt __darwin_sigset_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_suseconds_t;
     *}
     */
    public static final OfInt __darwin_suseconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_uid_t;
     *}
     */
    public static final OfInt __darwin_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_useconds_t;
     *}
     */
    public static final OfInt __darwin_useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_pthread_key_t;
     *}
     */
    public static final OfLong __darwin_pthread_key_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _opaque_pthread_t* __darwin_pthread_t;
     *}
     */
    public static final AddressLayout __darwin_pthread_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     *}
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     *}
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     *}
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long u_int64_t;
     *}
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long register_t;
     *}
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     *}
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_addr_t;
     *}
     */
    public static final OfLong user_addr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_size_t;
     *}
     */
    public static final OfLong user_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_ssize_t;
     *}
     */
    public static final OfLong user_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_long_t;
     *}
     */
    public static final OfLong user_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_ulong_t;
     *}
     */
    public static final OfLong user_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_time_t;
     *}
     */
    public static final OfLong user_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_off_t;
     *}
     */
    public static final OfLong user_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long syscall_arg_t;
     *}
     */
    public static final OfLong syscall_arg_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     *}
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     *}
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     *}
     */
    public static final OfLong uintmax_t = JAVA_LONG;

    /**
     * {@snippet :
     * enum .JXL_TYPE_FLOAT = 0;
     *}
     */
    public static int JXL_TYPE_FLOAT() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_TYPE_BOOLEAN = 1;
     *}
     */
    public static int JXL_TYPE_BOOLEAN() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_TYPE_UINT8 = 2;
     *}
     */
    public static int JXL_TYPE_UINT8() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_TYPE_UINT16 = 3;
     *}
     */
    public static int JXL_TYPE_UINT16() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum .JXL_TYPE_UINT32 = 4;
     *}
     */
    public static int JXL_TYPE_UINT32() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum .JXL_TYPE_FLOAT16 = 5;
     *}
     */
    public static int JXL_TYPE_FLOAT16() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum .JXL_NATIVE_ENDIAN = 0;
     *}
     */
    public static int JXL_NATIVE_ENDIAN() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_LITTLE_ENDIAN = 1;
     *}
     */
    public static int JXL_LITTLE_ENDIAN() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_BIG_ENDIAN = 2;
     *}
     */
    public static int JXL_BIG_ENDIAN() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_RGB = 0;
     *}
     */
    public static int JXL_COLOR_SPACE_RGB() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_GRAY = 1;
     *}
     */
    public static int JXL_COLOR_SPACE_GRAY() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_XYB = 2;
     *}
     */
    public static int JXL_COLOR_SPACE_XYB() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_COLOR_SPACE_UNKNOWN = 3;
     *}
     */
    public static int JXL_COLOR_SPACE_UNKNOWN() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_D65 = 1;
     *}
     */
    public static int JXL_WHITE_POINT_D65() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_CUSTOM = 2;
     *}
     */
    public static int JXL_WHITE_POINT_CUSTOM() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_E = 10;
     *}
     */
    public static int JXL_WHITE_POINT_E() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum .JXL_WHITE_POINT_DCI = 11;
     *}
     */
    public static int JXL_WHITE_POINT_DCI() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_SRGB = 1;
     *}
     */
    public static int JXL_PRIMARIES_SRGB() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_CUSTOM = 2;
     *}
     */
    public static int JXL_PRIMARIES_CUSTOM() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_2100 = 9;
     *}
     */
    public static int JXL_PRIMARIES_2100() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum .JXL_PRIMARIES_P3 = 11;
     *}
     */
    public static int JXL_PRIMARIES_P3() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_709 = 1;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_709() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_UNKNOWN = 2;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_UNKNOWN() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_LINEAR = 8;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_LINEAR() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_SRGB = 13;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_SRGB() {
        return (int) 13L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_PQ = 16;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_PQ() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_DCI = 17;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_DCI() {
        return (int) 17L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_HLG = 18;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_HLG() {
        return (int) 18L;
    }

    /**
     * {@snippet :
     * enum .JXL_TRANSFER_FUNCTION_GAMMA = 65535;
     *}
     */
    public static int JXL_TRANSFER_FUNCTION_GAMMA() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_PERCEPTUAL = 0;
     *}
     */
    public static int JXL_RENDERING_INTENT_PERCEPTUAL() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_RELATIVE = 1;
     *}
     */
    public static int JXL_RENDERING_INTENT_RELATIVE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_SATURATION = 2;
     *}
     */
    public static int JXL_RENDERING_INTENT_SATURATION() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_RENDERING_INTENT_ABSOLUTE = 3;
     *}
     */
    public static int JXL_RENDERING_INTENT_ABSOLUTE() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_IDENTITY = 1;
     *}
     */
    public static int JXL_ORIENT_IDENTITY() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_FLIP_HORIZONTAL = 2;
     *}
     */
    public static int JXL_ORIENT_FLIP_HORIZONTAL() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_ROTATE_180 = 3;
     *}
     */
    public static int JXL_ORIENT_ROTATE_180() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_FLIP_VERTICAL = 4;
     *}
     */
    public static int JXL_ORIENT_FLIP_VERTICAL() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_TRANSPOSE = 5;
     *}
     */
    public static int JXL_ORIENT_TRANSPOSE() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_ROTATE_90_CW = 6;
     *}
     */
    public static int JXL_ORIENT_ROTATE_90_CW() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_ANTI_TRANSPOSE = 7;
     *}
     */
    public static int JXL_ORIENT_ANTI_TRANSPOSE() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum .JXL_ORIENT_ROTATE_90_CCW = 8;
     *}
     */
    public static int JXL_ORIENT_ROTATE_90_CCW() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_ALPHA = 0;
     *}
     */
    public static int JXL_CHANNEL_ALPHA() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_DEPTH = 1;
     *}
     */
    public static int JXL_CHANNEL_DEPTH() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_SPOT_COLOR = 2;
     *}
     */
    public static int JXL_CHANNEL_SPOT_COLOR() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_SELECTION_MASK = 3;
     *}
     */
    public static int JXL_CHANNEL_SELECTION_MASK() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_BLACK = 4;
     *}
     */
    public static int JXL_CHANNEL_BLACK() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_CFA = 5;
     *}
     */
    public static int JXL_CHANNEL_CFA() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_THERMAL = 6;
     *}
     */
    public static int JXL_CHANNEL_THERMAL() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED0 = 7;
     *}
     */
    public static int JXL_CHANNEL_RESERVED0() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED1 = 8;
     *}
     */
    public static int JXL_CHANNEL_RESERVED1() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED2 = 9;
     *}
     */
    public static int JXL_CHANNEL_RESERVED2() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED3 = 10;
     *}
     */
    public static int JXL_CHANNEL_RESERVED3() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED4 = 11;
     *}
     */
    public static int JXL_CHANNEL_RESERVED4() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED5 = 12;
     *}
     */
    public static int JXL_CHANNEL_RESERVED5() {
        return (int) 12L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED6 = 13;
     *}
     */
    public static int JXL_CHANNEL_RESERVED6() {
        return (int) 13L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_RESERVED7 = 14;
     *}
     */
    public static int JXL_CHANNEL_RESERVED7() {
        return (int) 14L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_UNKNOWN = 15;
     *}
     */
    public static int JXL_CHANNEL_UNKNOWN() {
        return (int) 15L;
    }

    /**
     * {@snippet :
     * enum .JXL_CHANNEL_OPTIONAL = 16;
     *}
     */
    public static int JXL_CHANNEL_OPTIONAL() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * typedef int JxlParallelRetCode;
     *}
     */
    public static final OfInt JxlParallelRetCode = JAVA_INT;

    public static MethodHandle JxlDecoderVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$6, "JxlDecoderVersion");
    }

    /**
     * {@snippet :
     * uint32_t JxlDecoderVersion();
     *}
     */
    public static int JxlDecoderVersion() {
        var mh$ = JxlDecoderVersion$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum .JXL_SIG_NOT_ENOUGH_BYTES = 0;
     *}
     */
    public static int JXL_SIG_NOT_ENOUGH_BYTES() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_SIG_INVALID = 1;
     *}
     */
    public static int JXL_SIG_INVALID() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_SIG_CODESTREAM = 2;
     *}
     */
    public static int JXL_SIG_CODESTREAM() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_SIG_CONTAINER = 3;
     *}
     */
    public static int JXL_SIG_CONTAINER() {
        return (int) 3L;
    }

    public static MethodHandle JxlSignatureCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0, "JxlSignatureCheck");
    }

    /**
     * {@snippet :
     * JxlSignature JxlSignatureCheck(const uint8_t* buf, size_t len);
     *}
     */
    public static int JxlSignatureCheck(MemorySegment buf, long len) {
        var mh$ = JxlSignatureCheck$MH();
        try {
            return (int) mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2, "JxlDecoderCreate");
    }

    /**
     * {@snippet :
     * JxlDecoder* JxlDecoderCreate(const JxlMemoryManager* memory_manager);
     *}
     */
    public static MemorySegment JxlDecoderCreate(MemorySegment memory_manager) {
        var mh$ = JxlDecoderCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(memory_manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderReset$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3, "JxlDecoderReset");
    }

    /**
     * {@snippet :
     * void JxlDecoderReset(JxlDecoder* dec);
     *}
     */
    public static void JxlDecoderReset(MemorySegment dec) {
        var mh$ = JxlDecoderReset$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4, "JxlDecoderDestroy");
    }

    /**
     * {@snippet :
     * void JxlDecoderDestroy(JxlDecoder* dec);
     *}
     */
    public static void JxlDecoderDestroy(MemorySegment dec) {
        var mh$ = JxlDecoderDestroy$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_SUCCESS = 0;
     *}
     */
    public static int JXL_DEC_SUCCESS() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_ERROR = 1;
     *}
     */
    public static int JXL_DEC_ERROR() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_MORE_INPUT = 2;
     *}
     */
    public static int JXL_DEC_NEED_MORE_INPUT() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_PREVIEW_OUT_BUFFER = 3;
     *}
     */
    public static int JXL_DEC_NEED_PREVIEW_OUT_BUFFER() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_DC_OUT_BUFFER = 4;
     *}
     */
    public static int JXL_DEC_NEED_DC_OUT_BUFFER() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_NEED_IMAGE_OUT_BUFFER = 5;
     *}
     */
    public static int JXL_DEC_NEED_IMAGE_OUT_BUFFER() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_JPEG_NEED_MORE_OUTPUT = 6;
     *}
     */
    public static int JXL_DEC_JPEG_NEED_MORE_OUTPUT() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_BASIC_INFO = 64;
     *}
     */
    public static int JXL_DEC_BASIC_INFO() {
        return (int) 64L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_EXTENSIONS = 128;
     *}
     */
    public static int JXL_DEC_EXTENSIONS() {
        return (int) 128L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_COLOR_ENCODING = 256;
     *}
     */
    public static int JXL_DEC_COLOR_ENCODING() {
        return (int) 256L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_PREVIEW_IMAGE = 512;
     *}
     */
    public static int JXL_DEC_PREVIEW_IMAGE() {
        return (int) 512L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_FRAME = 1024;
     *}
     */
    public static int JXL_DEC_FRAME() {
        return (int) 1024L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_DC_IMAGE = 2048;
     *}
     */
    public static int JXL_DEC_DC_IMAGE() {
        return (int) 2048L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_FULL_IMAGE = 4096;
     *}
     */
    public static int JXL_DEC_FULL_IMAGE() {
        return (int) 4096L;
    }

    /**
     * {@snippet :
     * enum .JXL_DEC_JPEG_RECONSTRUCTION = 8192;
     *}
     */
    public static int JXL_DEC_JPEG_RECONSTRUCTION() {
        return (int) 8192L;
    }

    public static MethodHandle JxlDecoderRewind$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5, "JxlDecoderRewind");
    }

    /**
     * {@snippet :
     * void JxlDecoderRewind(JxlDecoder* dec);
     *}
     */
    public static void JxlDecoderRewind(MemorySegment dec) {
        var mh$ = JxlDecoderRewind$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSkipFrames$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1, "JxlDecoderSkipFrames");
    }

    /**
     * {@snippet :
     * void JxlDecoderSkipFrames(JxlDecoder* dec, size_t amount);
     *}
     */
    public static void JxlDecoderSkipFrames(MemorySegment dec, long amount) {
        var mh$ = JxlDecoderSkipFrames$MH();
        try {
            mh$.invokeExact(dec, amount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderDefaultPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3, "JxlDecoderDefaultPixelFormat");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderDefaultPixelFormat(const JxlDecoder* dec, JxlPixelFormat* format);
     *}
     */
    public static int JxlDecoderDefaultPixelFormat(MemorySegment dec, MemorySegment format) {
        var mh$ = JxlDecoderDefaultPixelFormat$MH();
        try {
            return (int) mh$.invokeExact(dec, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetParallelRunner$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5, "JxlDecoderSetParallelRunner");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetParallelRunner(JxlDecoder* dec, JxlParallelRunner parallel_runner, void* parallel_runner_opaque);
     *}
     */
    public static int JxlDecoderSetParallelRunner(MemorySegment dec, MemorySegment parallel_runner, MemorySegment parallel_runner_opaque) {
        var mh$ = JxlDecoderSetParallelRunner$MH();
        try {
            return (int) mh$.invokeExact(dec, parallel_runner, parallel_runner_opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSizeHintBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1, "JxlDecoderSizeHintBasicInfo");
    }

    /**
     * {@snippet :
     * size_t JxlDecoderSizeHintBasicInfo(const JxlDecoder* dec);
     *}
     */
    public static long JxlDecoderSizeHintBasicInfo(MemorySegment dec) {
        var mh$ = JxlDecoderSizeHintBasicInfo$MH();
        try {
            return (long) mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSubscribeEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3, "JxlDecoderSubscribeEvents");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSubscribeEvents(JxlDecoder* dec, int events_wanted);
     *}
     */
    public static int JxlDecoderSubscribeEvents(MemorySegment dec, int events_wanted) {
        var mh$ = JxlDecoderSubscribeEvents$MH();
        try {
            return (int) mh$.invokeExact(dec, events_wanted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetKeepOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4, "JxlDecoderSetKeepOrientation");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetKeepOrientation(JxlDecoder* dec, int keep_orientation);
     *}
     */
    public static int JxlDecoderSetKeepOrientation(MemorySegment dec, int keep_orientation) {
        var mh$ = JxlDecoderSetKeepOrientation$MH();
        try {
            return (int) mh$.invokeExact(dec, keep_orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderProcessInput$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6, "JxlDecoderProcessInput");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderProcessInput(JxlDecoder* dec);
     *}
     */
    public static int JxlDecoderProcessInput(MemorySegment dec) {
        var mh$ = JxlDecoderProcessInput$MH();
        try {
            return (int) mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetInput$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1, "JxlDecoderSetInput");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetInput(JxlDecoder* dec, const uint8_t* data, size_t size);
     *}
     */
    public static int JxlDecoderSetInput(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetInput$MH();
        try {
            return (int) mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderReleaseInput$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2, "JxlDecoderReleaseInput");
    }

    /**
     * {@snippet :
     * size_t JxlDecoderReleaseInput(JxlDecoder* dec);
     *}
     */
    public static long JxlDecoderReleaseInput(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseInput$MH();
        try {
            return (long) mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetBasicInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3, "JxlDecoderGetBasicInfo");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetBasicInfo(const JxlDecoder* dec, JxlBasicInfo* info);
     *}
     */
    public static int JxlDecoderGetBasicInfo(MemorySegment dec, MemorySegment info) {
        var mh$ = JxlDecoderGetBasicInfo$MH();
        try {
            return (int) mh$.invokeExact(dec, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetExtraChannelInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5, "JxlDecoderGetExtraChannelInfo");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetExtraChannelInfo(const JxlDecoder* dec, size_t index, JxlExtraChannelInfo* info);
     *}
     */
    public static int JxlDecoderGetExtraChannelInfo(MemorySegment dec, long index, MemorySegment info) {
        var mh$ = JxlDecoderGetExtraChannelInfo$MH();
        try {
            return (int) mh$.invokeExact(dec, index, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetExtraChannelName$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1, "JxlDecoderGetExtraChannelName");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetExtraChannelName(const JxlDecoder* dec, size_t index, char* name, size_t size);
     *}
     */
    public static int JxlDecoderGetExtraChannelName(MemorySegment dec, long index, MemorySegment name, long size) {
        var mh$ = JxlDecoderGetExtraChannelName$MH();
        try {
            return (int) mh$.invokeExact(dec, index, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum .JXL_COLOR_PROFILE_TARGET_ORIGINAL = 0;
     *}
     */
    public static int JXL_COLOR_PROFILE_TARGET_ORIGINAL() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum .JXL_COLOR_PROFILE_TARGET_DATA = 1;
     *}
     */
    public static int JXL_COLOR_PROFILE_TARGET_DATA() {
        return (int) 1L;
    }

    public static MethodHandle JxlDecoderGetColorAsEncodedProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3, "JxlDecoderGetColorAsEncodedProfile");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetColorAsEncodedProfile(const JxlDecoder* dec, const JxlPixelFormat* format, JxlColorProfileTarget target, JxlColorEncoding* color_encoding);
     *}
     */
    public static int JxlDecoderGetColorAsEncodedProfile(MemorySegment dec, MemorySegment format, int target, MemorySegment color_encoding) {
        var mh$ = JxlDecoderGetColorAsEncodedProfile$MH();
        try {
            return (int) mh$.invokeExact(dec, format, target, color_encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetICCProfileSizeLegacy$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4, "JxlDecoderGetICCProfileSize");
    }

    public static MethodHandle JxlDecoderGetICCProfileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4a, "JxlDecoderGetICCProfileSize");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetICCProfileSize(const JxlDecoder* dec, const JxlPixelFormat* format, JxlColorProfileTarget target, size_t* size);
     *}
     */
    public static int JxlDecoderGetICCProfileSizeLegacy(MemorySegment dec, MemorySegment format, int target, MemorySegment size) {
        var mh$ = JxlDecoderGetICCProfileSizeLegacy$MH();
        try {
            return (int) mh$.invokeExact(dec, format, target, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int JxlDecoderGetICCProfileSize(MemorySegment dec, int target, MemorySegment size) {
        var mh$ = JxlDecoderGetICCProfileSize$MH();
        try {
            return (int) mh$.invokeExact(dec, target, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetColorAsICCProfileLegacy$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$6, "JxlDecoderGetColorAsICCProfile");
    }

    public static MethodHandle JxlDecoderGetColorAsICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$6a, "JxlDecoderGetColorAsICCProfile");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetColorAsICCProfile(const JxlDecoder* dec, const JxlPixelFormat* format, JxlColorProfileTarget target, uint8_t* icc_profile, size_t size);
     *}
     */
    public static int JxlDecoderGetColorAsICCProfileLegacy(MemorySegment dec, MemorySegment format, int target, MemorySegment icc_profile, long size) {
        var mh$ = JxlDecoderGetColorAsICCProfileLegacy$MH();
        try {
            return (int) mh$.invokeExact(dec, format, target, icc_profile, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int JxlDecoderGetColorAsICCProfile(MemorySegment dec, int target, MemorySegment icc_profile, long size) {
        var mh$ = JxlDecoderGetColorAsICCProfile$MH();
        try {
            return (int) mh$.invokeExact(dec, target, icc_profile, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetPreferredColorProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0, "JxlDecoderSetPreferredColorProfile");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetPreferredColorProfile(JxlDecoder* dec, const JxlColorEncoding* color_encoding);
     *}
     */
    public static int JxlDecoderSetPreferredColorProfile(MemorySegment dec, MemorySegment color_encoding) {
        var mh$ = JxlDecoderSetPreferredColorProfile$MH();
        try {
            return (int) mh$.invokeExact(dec, color_encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderPreviewOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1, "JxlDecoderPreviewOutBufferSize");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderPreviewOutBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size);
     *}
     */
    public static int JxlDecoderPreviewOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderPreviewOutBufferSize$MH();
        try {
            return (int) mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetPreviewOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3, "JxlDecoderSetPreviewOutBuffer");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetPreviewOutBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size);
     *}
     */
    public static int JxlDecoderSetPreviewOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetPreviewOutBuffer$MH();
        try {
            return (int) mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetFrameHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4, "JxlDecoderGetFrameHeader");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetFrameHeader(const JxlDecoder* dec, JxlFrameHeader* header);
     *}
     */
    public static int JxlDecoderGetFrameHeader(MemorySegment dec, MemorySegment header) {
        var mh$ = JxlDecoderGetFrameHeader$MH();
        try {
            return (int) mh$.invokeExact(dec, header);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderGetFrameName$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5, "JxlDecoderGetFrameName");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderGetFrameName(const JxlDecoder* dec, char* name, size_t size);
     *}
     */
    public static int JxlDecoderGetFrameName(MemorySegment dec, MemorySegment name, long size) {
        var mh$ = JxlDecoderGetFrameName$MH();
        try {
            return (int) mh$.invokeExact(dec, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderDCOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0, "JxlDecoderDCOutBufferSize");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderDCOutBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size);
     *}
     */
    public static int JxlDecoderDCOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderDCOutBufferSize$MH();
        try {
            return (int) mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetDCOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1, "JxlDecoderSetDCOutBuffer");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetDCOutBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size);
     *}
     */
    public static int JxlDecoderSetDCOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetDCOutBuffer$MH();
        try {
            return (int) mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderImageOutBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2, "JxlDecoderImageOutBufferSize");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderImageOutBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size);
     *}
     */
    public static int JxlDecoderImageOutBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size) {
        var mh$ = JxlDecoderImageOutBufferSize$MH();
        try {
            return (int) mh$.invokeExact(dec, format, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetImageOutBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3, "JxlDecoderSetImageOutBuffer");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetImageOutBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size);
     *}
     */
    public static int JxlDecoderSetImageOutBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size) {
        var mh$ = JxlDecoderSetImageOutBuffer$MH();
        try {
            return (int) mh$.invokeExact(dec, format, buffer, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetImageOutCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2, "JxlDecoderSetImageOutCallback");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetImageOutCallback(JxlDecoder* dec, const JxlPixelFormat* format, JxlImageOutCallback callback, void* opaque);
     *}
     */
    public static int JxlDecoderSetImageOutCallback(MemorySegment dec, MemorySegment format, MemorySegment callback, MemorySegment opaque) {
        var mh$ = JxlDecoderSetImageOutCallback$MH();
        try {
            return (int) mh$.invokeExact(dec, format, callback, opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderExtraChannelBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4, "JxlDecoderExtraChannelBufferSize");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderExtraChannelBufferSize(const JxlDecoder* dec, const JxlPixelFormat* format, size_t* size, uint32_t index);
     *}
     */
    public static int JxlDecoderExtraChannelBufferSize(MemorySegment dec, MemorySegment format, MemorySegment size, int index) {
        var mh$ = JxlDecoderExtraChannelBufferSize$MH();
        try {
            return (int) mh$.invokeExact(dec, format, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetExtraChannelBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$6, "JxlDecoderSetExtraChannelBuffer");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetExtraChannelBuffer(JxlDecoder* dec, const JxlPixelFormat* format, void* buffer, size_t size, uint32_t index);
     *}
     */
    public static int JxlDecoderSetExtraChannelBuffer(MemorySegment dec, MemorySegment format, MemorySegment buffer, long size, int index) {
        var mh$ = JxlDecoderSetExtraChannelBuffer$MH();
        try {
            return (int) mh$.invokeExact(dec, format, buffer, size, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderSetJPEGBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0, "JxlDecoderSetJPEGBuffer");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderSetJPEGBuffer(JxlDecoder* dec, uint8_t* data, size_t size);
     *}
     */
    public static int JxlDecoderSetJPEGBuffer(MemorySegment dec, MemorySegment data, long size) {
        var mh$ = JxlDecoderSetJPEGBuffer$MH();
        try {
            return (int) mh$.invokeExact(dec, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderReleaseJPEGBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1, "JxlDecoderReleaseJPEGBuffer");
    }

    /**
     * {@snippet :
     * size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder* dec);
     *}
     */
    public static long JxlDecoderReleaseJPEGBuffer(MemorySegment dec) {
        var mh$ = JxlDecoderReleaseJPEGBuffer$MH();
        try {
            return (long) mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle JxlDecoderFlushImage$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2, "JxlDecoderFlushImage");
    }

    /**
     * {@snippet :
     * JxlDecoderStatus JxlDecoderFlushImage(JxlDecoder* dec);
     *}
     */
    public static int JxlDecoderFlushImage(MemorySegment dec) {
        var mh$ = JxlDecoderFlushImage$MH();
        try {
            return (int) mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * #define NULL 0
     *}
     */
    public static MemorySegment NULL() {
        return constants$25.const$3;
    }

    /**
     * {@snippet :
     * #define __DARWIN_SUF_64_BIT_INO_T "$INODE64"
     *}
     */
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$25.const$4;
    }

    /**
     * {@snippet :
     * #define __DARWIN_SUF_1050 "$1050"
     *}
     */
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$25.const$5;
    }

    /**
     * {@snippet :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     *}
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$26.const$0;
    }

    /**
     * {@snippet :
     * #define __DARWIN_C_ANSI 4096
     *}
     */
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_C_FULL 900000
     *}
     */
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_C_LEVEL 900000
     *}
     */
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_NULL 0
     *}
     */
    public static MemorySegment __DARWIN_NULL() {
        return constants$25.const$3;
    }

    /**
     * {@snippet :
     * #define USER_ADDR_NULL 0
     *}
     */
    public static long USER_ADDR_NULL() {
        return 0L;
    }

    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     *}
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define INT8_MIN -128
     *}
     */
    public static int INT8_MIN() {
        return (int) -128L;
    }

    /**
     * {@snippet :
     * #define INT16_MIN -32768
     *}
     */
    public static int INT16_MIN() {
        return (int) -32768L;
    }

    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     *}
     */
    public static int INT32_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     *}
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     *}
     */
    public static int UINT32_MAX() {
        return (int) 4294967295L;
    }

    /**
     * {@snippet :
     * #define UINT64_MAX -1
     *}
     */
    public static long UINT64_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     *}
     */
    public static int INT_LEAST8_MIN() {
        return (int) -128L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     *}
     */
    public static int INT_LEAST16_MIN() {
        return (int) -32768L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     *}
     */
    public static int INT_LEAST32_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     *}
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     *}
     */
    public static int INT_LEAST8_MAX() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     *}
     */
    public static int INT_LEAST16_MAX() {
        return (int) 32767L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     *}
     */
    public static int INT_LEAST32_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     *}
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     *}
     */
    public static int UINT_LEAST8_MAX() {
        return (int) 255L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     *}
     */
    public static int UINT_LEAST16_MAX() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     *}
     */
    public static int UINT_LEAST32_MAX() {
        return (int) 4294967295L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     *}
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     *}
     */
    public static int INT_FAST8_MIN() {
        return (int) -128L;
    }

    /**
     * {@snippet :
     * #define INT_FAST16_MIN -32768
     *}
     */
    public static int INT_FAST16_MIN() {
        return (int) -32768L;
    }

    /**
     * {@snippet :
     * #define INT_FAST32_MIN -2147483648
     *}
     */
    public static int INT_FAST32_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     *}
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     *}
     */
    public static int INT_FAST8_MAX() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * #define INT_FAST16_MAX 32767
     *}
     */
    public static int INT_FAST16_MAX() {
        return (int) 32767L;
    }

    /**
     * {@snippet :
     * #define INT_FAST32_MAX 2147483647
     *}
     */
    public static int INT_FAST32_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     *}
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     *}
     */
    public static int UINT_FAST8_MAX() {
        return (int) 255L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST16_MAX 65535
     *}
     */
    public static int UINT_FAST16_MAX() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST32_MAX 4294967295
     *}
     */
    public static int UINT_FAST32_MAX() {
        return (int) 4294967295L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     *}
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     *}
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     *}
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     *}
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     *}
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     *}
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     *}
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     *}
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     *}
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define SIZE_MAX -1
     *}
     */
    public static long SIZE_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define RSIZE_MAX 9223372036854775807
     *}
     */
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     *}
     */
    public static int WCHAR_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     *}
     */
    public static int WCHAR_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define WINT_MIN -2147483648
     *}
     */
    public static int WINT_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define WINT_MAX 2147483647
     *}
     */
    public static int WINT_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     *}
     */
    public static int SIG_ATOMIC_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     *}
     */
    public static int SIG_ATOMIC_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define JXL_PARALLEL_RET_RUNNER_ERROR -1
     *}
     */
    public static int JXL_PARALLEL_RET_RUNNER_ERROR() {
        return (int) -1L;
    }
}


