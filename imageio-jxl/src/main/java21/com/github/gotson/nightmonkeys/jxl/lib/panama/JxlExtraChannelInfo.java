// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct {
 *     JxlExtraChannelType type;
 *     uint32_t bits_per_sample;
 *     uint32_t exponent_bits_per_sample;
 *     uint32_t dim_shift;
 *     uint32_t name_length;
 *     int alpha_premultiplied;
 *     float spot_color[4];
 *     uint32_t cfa_channel;
 * };
 *}
 */
public class JxlExtraChannelInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$11.const$1;
    }

    public static VarHandle type$VH() {
        return constants$11.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlExtraChannelType type;
     *}
     */
    public static int type$get(MemorySegment seg) {
        return (int) constants$11.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlExtraChannelType type;
     *}
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$11.const$2.set(seg, x);
    }

    public static int type$get(MemorySegment seg, long index) {
        return (int) constants$11.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void type$set(MemorySegment seg, long index, int x) {
        constants$11.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle bits_per_sample$VH() {
        return constants$11.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t bits_per_sample;
     *}
     */
    public static int bits_per_sample$get(MemorySegment seg) {
        return (int) constants$11.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t bits_per_sample;
     *}
     */
    public static void bits_per_sample$set(MemorySegment seg, int x) {
        constants$11.const$3.set(seg, x);
    }

    public static int bits_per_sample$get(MemorySegment seg, long index) {
        return (int) constants$11.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void bits_per_sample$set(MemorySegment seg, long index, int x) {
        constants$11.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle exponent_bits_per_sample$VH() {
        return constants$11.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t exponent_bits_per_sample;
     *}
     */
    public static int exponent_bits_per_sample$get(MemorySegment seg) {
        return (int) constants$11.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t exponent_bits_per_sample;
     *}
     */
    public static void exponent_bits_per_sample$set(MemorySegment seg, int x) {
        constants$11.const$4.set(seg, x);
    }

    public static int exponent_bits_per_sample$get(MemorySegment seg, long index) {
        return (int) constants$11.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void exponent_bits_per_sample$set(MemorySegment seg, long index, int x) {
        constants$11.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle dim_shift$VH() {
        return constants$11.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t dim_shift;
     *}
     */
    public static int dim_shift$get(MemorySegment seg) {
        return (int) constants$11.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t dim_shift;
     *}
     */
    public static void dim_shift$set(MemorySegment seg, int x) {
        constants$11.const$5.set(seg, x);
    }

    public static int dim_shift$get(MemorySegment seg, long index) {
        return (int) constants$11.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void dim_shift$set(MemorySegment seg, long index, int x) {
        constants$11.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle name_length$VH() {
        return constants$12.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t name_length;
     *}
     */
    public static int name_length$get(MemorySegment seg) {
        return (int) constants$12.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t name_length;
     *}
     */
    public static void name_length$set(MemorySegment seg, int x) {
        constants$12.const$0.set(seg, x);
    }

    public static int name_length$get(MemorySegment seg, long index) {
        return (int) constants$12.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void name_length$set(MemorySegment seg, long index, int x) {
        constants$12.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle alpha_premultiplied$VH() {
        return constants$12.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int alpha_premultiplied;
     *}
     */
    public static int alpha_premultiplied$get(MemorySegment seg) {
        return (int) constants$12.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int alpha_premultiplied;
     *}
     */
    public static void alpha_premultiplied$set(MemorySegment seg, int x) {
        constants$12.const$1.set(seg, x);
    }

    public static int alpha_premultiplied$get(MemorySegment seg, long index) {
        return (int) constants$12.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void alpha_premultiplied$set(MemorySegment seg, long index, int x) {
        constants$12.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment spot_color$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }

    public static VarHandle cfa_channel$VH() {
        return constants$12.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t cfa_channel;
     *}
     */
    public static int cfa_channel$get(MemorySegment seg) {
        return (int) constants$12.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t cfa_channel;
     *}
     */
    public static void cfa_channel$set(MemorySegment seg, int x) {
        constants$12.const$2.set(seg, x);
    }

    public static int cfa_channel$get(MemorySegment seg, long index) {
        return (int) constants$12.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void cfa_channel$set(MemorySegment seg, long index, int x) {
        constants$12.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


