// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;

/**
 * {@snippet :
 * void (*JxlParallelRunFunction)(void* jpegxl_opaque,unsigned int value,unsigned long thread_id);
 *}
 */
public interface JxlParallelRunFunction {

    void apply(java.lang.foreign.MemorySegment jpegxl_opaque, int value, long thread_id);

    static MemorySegment allocate(JxlParallelRunFunction fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$16.const$0, fi, constants$15.const$5, scope);
    }

    static JxlParallelRunFunction ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _jpegxl_opaque, int _value, long _thread_id) -> {
            try {
                constants$16.const$1.invokeExact(symbol, _jpegxl_opaque, _value, _thread_id);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


