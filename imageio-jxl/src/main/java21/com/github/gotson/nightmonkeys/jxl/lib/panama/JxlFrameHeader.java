// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct {
 *     uint32_t duration;
 *     uint32_t timecode;
 *     uint32_t name_length;
 *     int is_last;
 * };
 *}
 */
public class JxlFrameHeader {

    public static MemoryLayout $LAYOUT() {
        return constants$12.const$5;
    }

    public static VarHandle duration$VH() {
        return constants$13.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t duration;
     *}
     */
    public static int duration$get(MemorySegment seg) {
        return (int) constants$13.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t duration;
     *}
     */
    public static void duration$set(MemorySegment seg, int x) {
        constants$13.const$0.set(seg, x);
    }

    public static int duration$get(MemorySegment seg, long index) {
        return (int) constants$13.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void duration$set(MemorySegment seg, long index, int x) {
        constants$13.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle timecode$VH() {
        return constants$13.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t timecode;
     *}
     */
    public static int timecode$get(MemorySegment seg) {
        return (int) constants$13.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t timecode;
     *}
     */
    public static void timecode$set(MemorySegment seg, int x) {
        constants$13.const$1.set(seg, x);
    }

    public static int timecode$get(MemorySegment seg, long index) {
        return (int) constants$13.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void timecode$set(MemorySegment seg, long index, int x) {
        constants$13.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle name_length$VH() {
        return constants$13.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t name_length;
     *}
     */
    public static int name_length$get(MemorySegment seg) {
        return (int) constants$13.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t name_length;
     *}
     */
    public static void name_length$set(MemorySegment seg, int x) {
        constants$13.const$2.set(seg, x);
    }

    public static int name_length$get(MemorySegment seg, long index) {
        return (int) constants$13.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void name_length$set(MemorySegment seg, long index, int x) {
        constants$13.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle is_last$VH() {
        return constants$13.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int is_last;
     *}
     */
    public static int is_last$get(MemorySegment seg) {
        return (int) constants$13.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int is_last;
     *}
     */
    public static void is_last$set(MemorySegment seg, int x) {
        constants$13.const$3.set(seg, x);
    }

    public static int is_last$get(MemorySegment seg, long index) {
        return (int) constants$13.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void is_last$set(MemorySegment seg, long index, int x) {
        constants$13.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


