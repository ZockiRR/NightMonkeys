// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct {
 *     JxlColorSpace color_space;
 *     JxlWhitePoint white_point;
 *     double white_point_xy[2];
 *     JxlPrimaries primaries;
 *     double primaries_red_xy[2];
 *     double primaries_green_xy[2];
 *     double primaries_blue_xy[2];
 *     JxlTransferFunction transfer_function;
 *     double gamma;
 *     JxlRenderingIntent rendering_intent;
 * };
 *}
 */
public class JxlColorEncoding {

    public static MemoryLayout $LAYOUT() {
        return constants$5.const$3;
    }

    public static VarHandle color_space$VH() {
        return constants$5.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlColorSpace color_space;
     *}
     */
    public static int color_space$get(MemorySegment seg) {
        return (int) constants$5.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlColorSpace color_space;
     *}
     */
    public static void color_space$set(MemorySegment seg, int x) {
        constants$5.const$4.set(seg, x);
    }

    public static int color_space$get(MemorySegment seg, long index) {
        return (int) constants$5.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void color_space$set(MemorySegment seg, long index, int x) {
        constants$5.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle white_point$VH() {
        return constants$5.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlWhitePoint white_point;
     *}
     */
    public static int white_point$get(MemorySegment seg) {
        return (int) constants$5.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlWhitePoint white_point;
     *}
     */
    public static void white_point$set(MemorySegment seg, int x) {
        constants$5.const$5.set(seg, x);
    }

    public static int white_point$get(MemorySegment seg, long index) {
        return (int) constants$5.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void white_point$set(MemorySegment seg, long index, int x) {
        constants$5.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment white_point_xy$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }

    public static VarHandle primaries$VH() {
        return constants$6.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlPrimaries primaries;
     *}
     */
    public static int primaries$get(MemorySegment seg) {
        return (int) constants$6.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlPrimaries primaries;
     *}
     */
    public static void primaries$set(MemorySegment seg, int x) {
        constants$6.const$0.set(seg, x);
    }

    public static int primaries$get(MemorySegment seg, long index) {
        return (int) constants$6.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void primaries$set(MemorySegment seg, long index, int x) {
        constants$6.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment primaries_red_xy$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }

    public static MemorySegment primaries_green_xy$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }

    public static MemorySegment primaries_blue_xy$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }

    public static VarHandle transfer_function$VH() {
        return constants$6.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlTransferFunction transfer_function;
     *}
     */
    public static int transfer_function$get(MemorySegment seg) {
        return (int) constants$6.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlTransferFunction transfer_function;
     *}
     */
    public static void transfer_function$set(MemorySegment seg, int x) {
        constants$6.const$1.set(seg, x);
    }

    public static int transfer_function$get(MemorySegment seg, long index) {
        return (int) constants$6.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void transfer_function$set(MemorySegment seg, long index, int x) {
        constants$6.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle gamma$VH() {
        return constants$6.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * double gamma;
     *}
     */
    public static double gamma$get(MemorySegment seg) {
        return (double) constants$6.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * double gamma;
     *}
     */
    public static void gamma$set(MemorySegment seg, double x) {
        constants$6.const$2.set(seg, x);
    }

    public static double gamma$get(MemorySegment seg, long index) {
        return (double) constants$6.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void gamma$set(MemorySegment seg, long index, double x) {
        constants$6.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle rendering_intent$VH() {
        return constants$6.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlRenderingIntent rendering_intent;
     *}
     */
    public static int rendering_intent$get(MemorySegment seg) {
        return (int) constants$6.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlRenderingIntent rendering_intent;
     *}
     */
    public static void rendering_intent$set(MemorySegment seg, int x) {
        constants$6.const$3.set(seg, x);
    }

    public static int rendering_intent$get(MemorySegment seg, long index) {
        return (int) constants$6.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void rendering_intent$set(MemorySegment seg, long index, int x) {
        constants$6.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


