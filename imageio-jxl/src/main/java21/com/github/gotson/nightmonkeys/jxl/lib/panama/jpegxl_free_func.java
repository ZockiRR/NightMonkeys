// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;

/**
 * {@snippet :
 * void (*jpegxl_free_func)(void* opaque,void* address);
 *}
 */
public interface jpegxl_free_func {

    void apply(java.lang.foreign.MemorySegment opaque, java.lang.foreign.MemorySegment address);

    static MemorySegment allocate(jpegxl_free_func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$14.const$2, fi, constants$14.const$1, scope);
    }

    static jpegxl_free_func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _opaque, java.lang.foreign.MemorySegment _address) -> {
            try {
                constants$14.const$3.invokeExact(symbol, _opaque, _address);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


