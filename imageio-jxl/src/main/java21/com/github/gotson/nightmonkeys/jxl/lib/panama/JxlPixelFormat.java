// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct {
 *     uint32_t num_channels;
 *     JxlDataType data_type;
 *     JxlEndianness endianness;
 *     size_t align;
 * };
 *}
 */
public class JxlPixelFormat {

    public static MemoryLayout $LAYOUT() {
        return constants$4.const$4;
    }

    public static VarHandle num_channels$VH() {
        return constants$4.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_channels;
     *}
     */
    public static int num_channels$get(MemorySegment seg) {
        return (int) constants$4.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_channels;
     *}
     */
    public static void num_channels$set(MemorySegment seg, int x) {
        constants$4.const$5.set(seg, x);
    }

    public static int num_channels$get(MemorySegment seg, long index) {
        return (int) constants$4.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void num_channels$set(MemorySegment seg, long index, int x) {
        constants$4.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle data_type$VH() {
        return constants$5.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlDataType data_type;
     *}
     */
    public static int data_type$get(MemorySegment seg) {
        return (int) constants$5.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlDataType data_type;
     *}
     */
    public static void data_type$set(MemorySegment seg, int x) {
        constants$5.const$0.set(seg, x);
    }

    public static int data_type$get(MemorySegment seg, long index) {
        return (int) constants$5.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void data_type$set(MemorySegment seg, long index, int x) {
        constants$5.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle endianness$VH() {
        return constants$5.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * JxlEndianness endianness;
     *}
     */
    public static int endianness$get(MemorySegment seg) {
        return (int) constants$5.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * JxlEndianness endianness;
     *}
     */
    public static void endianness$set(MemorySegment seg, int x) {
        constants$5.const$1.set(seg, x);
    }

    public static int endianness$get(MemorySegment seg, long index) {
        return (int) constants$5.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void endianness$set(MemorySegment seg, long index, int x) {
        constants$5.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle align$VH() {
        return constants$5.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * size_t align;
     *}
     */
    public static long align$get(MemorySegment seg) {
        return (long) constants$5.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * size_t align;
     *}
     */
    public static void align$set(MemorySegment seg, long x) {
        constants$5.const$2.set(seg, x);
    }

    public static long align$get(MemorySegment seg, long index) {
        return (long) constants$5.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void align$set(MemorySegment seg, long index, long x) {
        constants$5.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


