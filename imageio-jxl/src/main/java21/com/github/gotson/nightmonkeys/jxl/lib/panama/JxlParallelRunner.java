// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;

/**
 * {@snippet :
 * int (*JxlParallelRunner)(void* runner_opaque,void* jpegxl_opaque,int (*init)(void*,unsigned long),void (*func)(void*,unsigned int,unsigned long),unsigned int start_range,unsigned int end_range);
 *}
 */
public interface JxlParallelRunner {

    int apply(java.lang.foreign.MemorySegment runner_opaque, java.lang.foreign.MemorySegment jpegxl_opaque, java.lang.foreign.MemorySegment init,
              java.lang.foreign.MemorySegment func, int start_range, int end_range);

    static MemorySegment allocate(JxlParallelRunner fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$16.const$3, fi, constants$16.const$2, scope);
    }

    static JxlParallelRunner ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _runner_opaque, java.lang.foreign.MemorySegment _jpegxl_opaque, java.lang.foreign.MemorySegment _init, java.lang.foreign.MemorySegment _func, int _start_range, int _end_range) -> {
            try {
                return (int) constants$16.const$4.invokeExact(symbol, _runner_opaque, _jpegxl_opaque, _init, _func, _start_range, _end_range);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


