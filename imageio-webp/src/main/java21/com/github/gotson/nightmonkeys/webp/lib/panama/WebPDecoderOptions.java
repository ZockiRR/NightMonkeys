// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct WebPDecoderOptions {
 *     int bypass_filtering;
 *     int no_fancy_upsampling;
 *     int use_cropping;
 *     int crop_left;
 *     int crop_top;
 *     int crop_width;
 *     int crop_height;
 *     int use_scaling;
 *     int scaled_width;
 *     int scaled_height;
 *     int use_threads;
 *     int dithering_strength;
 *     int flip;
 *     int alpha_dithering_strength;
 *     uint32_t pad[5];
 * };
 *}
 */
public class WebPDecoderOptions {

    public static MemoryLayout $LAYOUT() {
        return constants$18.const$5;
    }

    public static VarHandle bypass_filtering$VH() {
        return constants$19.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int bypass_filtering;
     *}
     */
    public static int bypass_filtering$get(MemorySegment seg) {
        return (int) constants$19.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int bypass_filtering;
     *}
     */
    public static void bypass_filtering$set(MemorySegment seg, int x) {
        constants$19.const$0.set(seg, x);
    }

    public static int bypass_filtering$get(MemorySegment seg, long index) {
        return (int) constants$19.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void bypass_filtering$set(MemorySegment seg, long index, int x) {
        constants$19.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle no_fancy_upsampling$VH() {
        return constants$19.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int no_fancy_upsampling;
     *}
     */
    public static int no_fancy_upsampling$get(MemorySegment seg) {
        return (int) constants$19.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int no_fancy_upsampling;
     *}
     */
    public static void no_fancy_upsampling$set(MemorySegment seg, int x) {
        constants$19.const$1.set(seg, x);
    }

    public static int no_fancy_upsampling$get(MemorySegment seg, long index) {
        return (int) constants$19.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void no_fancy_upsampling$set(MemorySegment seg, long index, int x) {
        constants$19.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle use_cropping$VH() {
        return constants$19.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int use_cropping;
     *}
     */
    public static int use_cropping$get(MemorySegment seg) {
        return (int) constants$19.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int use_cropping;
     *}
     */
    public static void use_cropping$set(MemorySegment seg, int x) {
        constants$19.const$2.set(seg, x);
    }

    public static int use_cropping$get(MemorySegment seg, long index) {
        return (int) constants$19.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void use_cropping$set(MemorySegment seg, long index, int x) {
        constants$19.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle crop_left$VH() {
        return constants$19.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int crop_left;
     *}
     */
    public static int crop_left$get(MemorySegment seg) {
        return (int) constants$19.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int crop_left;
     *}
     */
    public static void crop_left$set(MemorySegment seg, int x) {
        constants$19.const$3.set(seg, x);
    }

    public static int crop_left$get(MemorySegment seg, long index) {
        return (int) constants$19.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void crop_left$set(MemorySegment seg, long index, int x) {
        constants$19.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle crop_top$VH() {
        return constants$19.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int crop_top;
     *}
     */
    public static int crop_top$get(MemorySegment seg) {
        return (int) constants$19.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int crop_top;
     *}
     */
    public static void crop_top$set(MemorySegment seg, int x) {
        constants$19.const$4.set(seg, x);
    }

    public static int crop_top$get(MemorySegment seg, long index) {
        return (int) constants$19.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void crop_top$set(MemorySegment seg, long index, int x) {
        constants$19.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle crop_width$VH() {
        return constants$19.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int crop_width;
     *}
     */
    public static int crop_width$get(MemorySegment seg) {
        return (int) constants$19.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int crop_width;
     *}
     */
    public static void crop_width$set(MemorySegment seg, int x) {
        constants$19.const$5.set(seg, x);
    }

    public static int crop_width$get(MemorySegment seg, long index) {
        return (int) constants$19.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void crop_width$set(MemorySegment seg, long index, int x) {
        constants$19.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle crop_height$VH() {
        return constants$20.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int crop_height;
     *}
     */
    public static int crop_height$get(MemorySegment seg) {
        return (int) constants$20.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int crop_height;
     *}
     */
    public static void crop_height$set(MemorySegment seg, int x) {
        constants$20.const$0.set(seg, x);
    }

    public static int crop_height$get(MemorySegment seg, long index) {
        return (int) constants$20.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void crop_height$set(MemorySegment seg, long index, int x) {
        constants$20.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle use_scaling$VH() {
        return constants$20.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int use_scaling;
     *}
     */
    public static int use_scaling$get(MemorySegment seg) {
        return (int) constants$20.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int use_scaling;
     *}
     */
    public static void use_scaling$set(MemorySegment seg, int x) {
        constants$20.const$1.set(seg, x);
    }

    public static int use_scaling$get(MemorySegment seg, long index) {
        return (int) constants$20.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void use_scaling$set(MemorySegment seg, long index, int x) {
        constants$20.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle scaled_width$VH() {
        return constants$20.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int scaled_width;
     *}
     */
    public static int scaled_width$get(MemorySegment seg) {
        return (int) constants$20.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int scaled_width;
     *}
     */
    public static void scaled_width$set(MemorySegment seg, int x) {
        constants$20.const$2.set(seg, x);
    }

    public static int scaled_width$get(MemorySegment seg, long index) {
        return (int) constants$20.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void scaled_width$set(MemorySegment seg, long index, int x) {
        constants$20.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle scaled_height$VH() {
        return constants$20.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int scaled_height;
     *}
     */
    public static int scaled_height$get(MemorySegment seg) {
        return (int) constants$20.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int scaled_height;
     *}
     */
    public static void scaled_height$set(MemorySegment seg, int x) {
        constants$20.const$3.set(seg, x);
    }

    public static int scaled_height$get(MemorySegment seg, long index) {
        return (int) constants$20.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void scaled_height$set(MemorySegment seg, long index, int x) {
        constants$20.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle use_threads$VH() {
        return constants$20.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int use_threads;
     *}
     */
    public static int use_threads$get(MemorySegment seg) {
        return (int) constants$20.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int use_threads;
     *}
     */
    public static void use_threads$set(MemorySegment seg, int x) {
        constants$20.const$4.set(seg, x);
    }

    public static int use_threads$get(MemorySegment seg, long index) {
        return (int) constants$20.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void use_threads$set(MemorySegment seg, long index, int x) {
        constants$20.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle dithering_strength$VH() {
        return constants$20.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int dithering_strength;
     *}
     */
    public static int dithering_strength$get(MemorySegment seg) {
        return (int) constants$20.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int dithering_strength;
     *}
     */
    public static void dithering_strength$set(MemorySegment seg, int x) {
        constants$20.const$5.set(seg, x);
    }

    public static int dithering_strength$get(MemorySegment seg, long index) {
        return (int) constants$20.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void dithering_strength$set(MemorySegment seg, long index, int x) {
        constants$20.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle flip$VH() {
        return constants$21.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int flip;
     *}
     */
    public static int flip$get(MemorySegment seg) {
        return (int) constants$21.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int flip;
     *}
     */
    public static void flip$set(MemorySegment seg, int x) {
        constants$21.const$0.set(seg, x);
    }

    public static int flip$get(MemorySegment seg, long index) {
        return (int) constants$21.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void flip$set(MemorySegment seg, long index, int x) {
        constants$21.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle alpha_dithering_strength$VH() {
        return constants$21.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int alpha_dithering_strength;
     *}
     */
    public static int alpha_dithering_strength$get(MemorySegment seg) {
        return (int) constants$21.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int alpha_dithering_strength;
     *}
     */
    public static void alpha_dithering_strength$set(MemorySegment seg, int x) {
        constants$21.const$1.set(seg, x);
    }

    public static int alpha_dithering_strength$get(MemorySegment seg, long index) {
        return (int) constants$21.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void alpha_dithering_strength$set(MemorySegment seg, long index, int x) {
        constants$21.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(56, 20);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


