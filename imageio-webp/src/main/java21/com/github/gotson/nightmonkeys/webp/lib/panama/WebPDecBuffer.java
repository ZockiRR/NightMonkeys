// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct WebPDecBuffer {
 *     WEBP_CSP_MODE colorspace;
 *     int width;
 *     int height;
 *     int is_external_memory;
 *     union  u;
 *     uint32_t pad[4];
 *     uint8_t* private_memory;
 * };
 *}
 */
public class WebPDecBuffer {

    public static MemoryLayout $LAYOUT() {
        return constants$13.const$1;
    }

    public static VarHandle colorspace$VH() {
        return constants$13.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * WEBP_CSP_MODE colorspace;
     *}
     */
    public static int colorspace$get(MemorySegment seg) {
        return (int) constants$13.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * WEBP_CSP_MODE colorspace;
     *}
     */
    public static void colorspace$set(MemorySegment seg, int x) {
        constants$13.const$2.set(seg, x);
    }

    public static int colorspace$get(MemorySegment seg, long index) {
        return (int) constants$13.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void colorspace$set(MemorySegment seg, long index, int x) {
        constants$13.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle width$VH() {
        return constants$13.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int width;
     *}
     */
    public static int width$get(MemorySegment seg) {
        return (int) constants$13.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int width;
     *}
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$13.const$3.set(seg, x);
    }

    public static int width$get(MemorySegment seg, long index) {
        return (int) constants$13.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void width$set(MemorySegment seg, long index, int x) {
        constants$13.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle height$VH() {
        return constants$13.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int height;
     *}
     */
    public static int height$get(MemorySegment seg) {
        return (int) constants$13.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int height;
     *}
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$13.const$4.set(seg, x);
    }

    public static int height$get(MemorySegment seg, long index) {
        return (int) constants$13.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void height$set(MemorySegment seg, long index, int x) {
        constants$13.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle is_external_memory$VH() {
        return constants$13.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int is_external_memory;
     *}
     */
    public static int is_external_memory$get(MemorySegment seg) {
        return (int) constants$13.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int is_external_memory;
     *}
     */
    public static void is_external_memory$set(MemorySegment seg, int x) {
        constants$13.const$5.set(seg, x);
    }

    public static int is_external_memory$get(MemorySegment seg, long index) {
        return (int) constants$13.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void is_external_memory$set(MemorySegment seg, long index, int x) {
        constants$13.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    /**
     * {@snippet :
     * union {
     *     WebPRGBABuffer RGBA;
     *     WebPYUVABuffer YUVA;
     * };
     *}
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {
        }

        public static MemoryLayout $LAYOUT() {
            return constants$14.const$0;
        }

        public static MemorySegment RGBA$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }

        public static MemorySegment YUVA$slice(MemorySegment seg) {
            return seg.asSlice(0, 80);
        }

        public static long sizeof() {
            return $LAYOUT().byteSize();
        }

        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate($LAYOUT());
        }

        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }

        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
            return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
        }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(16, 80);
    }

    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }

    public static VarHandle private_memory$VH() {
        return constants$14.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* private_memory;
     *}
     */
    public static MemorySegment private_memory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$14.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* private_memory;
     *}
     */
    public static void private_memory$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$1.set(seg, x);
    }

    public static MemorySegment private_memory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$14.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void private_memory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


