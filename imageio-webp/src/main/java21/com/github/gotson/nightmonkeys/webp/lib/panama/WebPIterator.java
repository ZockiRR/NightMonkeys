// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct WebPIterator {
 *     int frame_num;
 *     int num_frames;
 *     int x_offset;
 *     int y_offset;
 *     int width;
 *     int height;
 *     int duration;
 *     WebPMuxAnimDispose dispose_method;
 *     int complete;
 *     WebPData fragment;
 *     int has_alpha;
 *     WebPMuxAnimBlend blend_method;
 *     uint32_t pad[2];
 *     void* private_;
 * };
 *}
 */
public class WebPIterator {

    public static MemoryLayout $LAYOUT() {
        return constants$36.const$2;
    }

    public static VarHandle frame_num$VH() {
        return constants$36.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int frame_num;
     *}
     */
    public static int frame_num$get(MemorySegment seg) {
        return (int) constants$36.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int frame_num;
     *}
     */
    public static void frame_num$set(MemorySegment seg, int x) {
        constants$36.const$3.set(seg, x);
    }

    public static int frame_num$get(MemorySegment seg, long index) {
        return (int) constants$36.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void frame_num$set(MemorySegment seg, long index, int x) {
        constants$36.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle num_frames$VH() {
        return constants$36.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int num_frames;
     *}
     */
    public static int num_frames$get(MemorySegment seg) {
        return (int) constants$36.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int num_frames;
     *}
     */
    public static void num_frames$set(MemorySegment seg, int x) {
        constants$36.const$4.set(seg, x);
    }

    public static int num_frames$get(MemorySegment seg, long index) {
        return (int) constants$36.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void num_frames$set(MemorySegment seg, long index, int x) {
        constants$36.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle x_offset$VH() {
        return constants$36.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int x_offset;
     *}
     */
    public static int x_offset$get(MemorySegment seg) {
        return (int) constants$36.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int x_offset;
     *}
     */
    public static void x_offset$set(MemorySegment seg, int x) {
        constants$36.const$5.set(seg, x);
    }

    public static int x_offset$get(MemorySegment seg, long index) {
        return (int) constants$36.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void x_offset$set(MemorySegment seg, long index, int x) {
        constants$36.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle y_offset$VH() {
        return constants$37.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int y_offset;
     *}
     */
    public static int y_offset$get(MemorySegment seg) {
        return (int) constants$37.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int y_offset;
     *}
     */
    public static void y_offset$set(MemorySegment seg, int x) {
        constants$37.const$0.set(seg, x);
    }

    public static int y_offset$get(MemorySegment seg, long index) {
        return (int) constants$37.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void y_offset$set(MemorySegment seg, long index, int x) {
        constants$37.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle width$VH() {
        return constants$37.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int width;
     *}
     */
    public static int width$get(MemorySegment seg) {
        return (int) constants$37.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int width;
     *}
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$37.const$1.set(seg, x);
    }

    public static int width$get(MemorySegment seg, long index) {
        return (int) constants$37.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void width$set(MemorySegment seg, long index, int x) {
        constants$37.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle height$VH() {
        return constants$37.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int height;
     *}
     */
    public static int height$get(MemorySegment seg) {
        return (int) constants$37.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int height;
     *}
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$37.const$2.set(seg, x);
    }

    public static int height$get(MemorySegment seg, long index) {
        return (int) constants$37.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void height$set(MemorySegment seg, long index, int x) {
        constants$37.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle duration$VH() {
        return constants$37.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int duration;
     *}
     */
    public static int duration$get(MemorySegment seg) {
        return (int) constants$37.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int duration;
     *}
     */
    public static void duration$set(MemorySegment seg, int x) {
        constants$37.const$3.set(seg, x);
    }

    public static int duration$get(MemorySegment seg, long index) {
        return (int) constants$37.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void duration$set(MemorySegment seg, long index, int x) {
        constants$37.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle dispose_method$VH() {
        return constants$37.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * WebPMuxAnimDispose dispose_method;
     *}
     */
    public static int dispose_method$get(MemorySegment seg) {
        return (int) constants$37.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * WebPMuxAnimDispose dispose_method;
     *}
     */
    public static void dispose_method$set(MemorySegment seg, int x) {
        constants$37.const$4.set(seg, x);
    }

    public static int dispose_method$get(MemorySegment seg, long index) {
        return (int) constants$37.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void dispose_method$set(MemorySegment seg, long index, int x) {
        constants$37.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle complete$VH() {
        return constants$37.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int complete;
     *}
     */
    public static int complete$get(MemorySegment seg) {
        return (int) constants$37.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int complete;
     *}
     */
    public static void complete$set(MemorySegment seg, int x) {
        constants$37.const$5.set(seg, x);
    }

    public static int complete$get(MemorySegment seg, long index) {
        return (int) constants$37.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void complete$set(MemorySegment seg, long index, int x) {
        constants$37.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment fragment$slice(MemorySegment seg) {
        return seg.asSlice(40, 16);
    }

    public static VarHandle has_alpha$VH() {
        return constants$38.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int has_alpha;
     *}
     */
    public static int has_alpha$get(MemorySegment seg) {
        return (int) constants$38.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int has_alpha;
     *}
     */
    public static void has_alpha$set(MemorySegment seg, int x) {
        constants$38.const$0.set(seg, x);
    }

    public static int has_alpha$get(MemorySegment seg, long index) {
        return (int) constants$38.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void has_alpha$set(MemorySegment seg, long index, int x) {
        constants$38.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle blend_method$VH() {
        return constants$38.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * WebPMuxAnimBlend blend_method;
     *}
     */
    public static int blend_method$get(MemorySegment seg) {
        return (int) constants$38.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * WebPMuxAnimBlend blend_method;
     *}
     */
    public static void blend_method$set(MemorySegment seg, int x) {
        constants$38.const$1.set(seg, x);
    }

    public static int blend_method$get(MemorySegment seg, long index) {
        return (int) constants$38.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void blend_method$set(MemorySegment seg, long index, int x) {
        constants$38.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }

    public static VarHandle private_$VH() {
        return constants$38.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * void* private_;
     *}
     */
    public static MemorySegment private_$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$38.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * void* private_;
     *}
     */
    public static void private_$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$2.set(seg, x);
    }

    public static MemorySegment private_$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$38.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void private_$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


