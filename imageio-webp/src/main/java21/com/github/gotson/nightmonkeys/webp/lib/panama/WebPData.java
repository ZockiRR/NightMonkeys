// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct WebPData {
 *     const uint8_t* bytes;
 *     size_t size;
 * };
 *}
 */
public class WebPData {

    public static MemoryLayout $LAYOUT() {
        return constants$35.const$0;
    }

    public static VarHandle bytes$VH() {
        return constants$35.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * const uint8_t* bytes;
     *}
     */
    public static MemorySegment bytes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$35.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * const uint8_t* bytes;
     *}
     */
    public static void bytes$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$1.set(seg, x);
    }

    public static MemorySegment bytes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$35.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void bytes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle size$VH() {
        return constants$35.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * size_t size;
     *}
     */
    public static long size$get(MemorySegment seg) {
        return (long) constants$35.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * size_t size;
     *}
     */
    public static void size$set(MemorySegment seg, long x) {
        constants$35.const$2.set(seg, x);
    }

    public static long size$get(MemorySegment seg, long index) {
        return (long) constants$35.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void size$set(MemorySegment seg, long index, long x) {
        constants$35.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


