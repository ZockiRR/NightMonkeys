// Generated by jextract

package com.github.gotson.nightmonkeys.heif.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet :
 * struct heif_color_conversion_options {
 *     uint8_t version;
 *     enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm;
 *     enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm;
 *     uint8_t only_use_preferred_chroma_algorithm;
 * };
 *}
 */
public class heif_color_conversion_options {

    public static MemoryLayout $LAYOUT() {
        return constants$33.const$4;
    }

    public static VarHandle version$VH() {
        return constants$33.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint8_t version;
     *}
     */
    public static byte version$get(MemorySegment seg) {
        return (byte) constants$33.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint8_t version;
     *}
     */
    public static void version$set(MemorySegment seg, byte x) {
        constants$33.const$5.set(seg, x);
    }

    public static byte version$get(MemorySegment seg, long index) {
        return (byte) constants$33.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void version$set(MemorySegment seg, long index, byte x) {
        constants$33.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle preferred_chroma_downsampling_algorithm$VH() {
        return constants$34.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm;
     *}
     */
    public static int preferred_chroma_downsampling_algorithm$get(MemorySegment seg) {
        return (int) constants$34.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm;
     *}
     */
    public static void preferred_chroma_downsampling_algorithm$set(MemorySegment seg, int x) {
        constants$34.const$0.set(seg, x);
    }

    public static int preferred_chroma_downsampling_algorithm$get(MemorySegment seg, long index) {
        return (int) constants$34.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void preferred_chroma_downsampling_algorithm$set(MemorySegment seg, long index, int x) {
        constants$34.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle preferred_chroma_upsampling_algorithm$VH() {
        return constants$34.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm;
     *}
     */
    public static int preferred_chroma_upsampling_algorithm$get(MemorySegment seg) {
        return (int) constants$34.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm;
     *}
     */
    public static void preferred_chroma_upsampling_algorithm$set(MemorySegment seg, int x) {
        constants$34.const$1.set(seg, x);
    }

    public static int preferred_chroma_upsampling_algorithm$get(MemorySegment seg, long index) {
        return (int) constants$34.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void preferred_chroma_upsampling_algorithm$set(MemorySegment seg, long index, int x) {
        constants$34.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle only_use_preferred_chroma_algorithm$VH() {
        return constants$34.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint8_t only_use_preferred_chroma_algorithm;
     *}
     */
    public static byte only_use_preferred_chroma_algorithm$get(MemorySegment seg) {
        return (byte) constants$34.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint8_t only_use_preferred_chroma_algorithm;
     *}
     */
    public static void only_use_preferred_chroma_algorithm$set(MemorySegment seg, byte x) {
        constants$34.const$2.set(seg, x);
    }

    public static byte only_use_preferred_chroma_algorithm$get(MemorySegment seg, long index) {
        return (byte) constants$34.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void only_use_preferred_chroma_algorithm$set(MemorySegment seg, long index, byte x) {
        constants$34.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


