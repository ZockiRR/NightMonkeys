// Generated by jextract

package com.github.gotson.nightmonkeys.heif.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet :
 * struct heif_reader {
 *     int reader_api_version;
 *     int64_t (*get_position)(void*);
 *     int (*read)(void*,size_t,void*);
 *     int (*seek)(int64_t,void*);
 *     enum heif_reader_grow_status (*wait_for_file_size)(int64_t,void*);
 * };
 *}
 */
public class heif_reader {

    public static MemoryLayout $LAYOUT() {
        return constants$11.const$5;
    }

    public static VarHandle reader_api_version$VH() {
        return constants$12.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int reader_api_version;
     *}
     */
    public static int reader_api_version$get(MemorySegment seg) {
        return (int) constants$12.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int reader_api_version;
     *}
     */
    public static void reader_api_version$set(MemorySegment seg, int x) {
        constants$12.const$0.set(seg, x);
    }

    public static int reader_api_version$get(MemorySegment seg, long index) {
        return (int) constants$12.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void reader_api_version$set(MemorySegment seg, long index, int x) {
        constants$12.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    /**
     * {@snippet :
     * int64_t (*get_position)(void*);
     *}
     */
    public interface get_position {

        long apply(java.lang.foreign.MemorySegment _x0);

        static MemorySegment allocate(get_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$12.const$2, fi, constants$12.const$1, scope);
        }

        static get_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (long) constants$12.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_position$VH() {
        return constants$12.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int64_t (*get_position)(void*);
     *}
     */
    public static MemorySegment get_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$12.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int64_t (*get_position)(void*);
     *}
     */
    public static void get_position$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$4.set(seg, x);
    }

    public static MemorySegment get_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$12.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void get_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static get_position get_position(MemorySegment segment, Arena scope) {
        return get_position.ofAddress(get_position$get(segment), scope);
    }

    /**
     * {@snippet :
     * int (*read)(void*,size_t,void*);
     *}
     */
    public interface read {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2);

        static MemorySegment allocate(read fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$13.const$0, fi, constants$12.const$5, scope);
        }

        static read ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int) constants$13.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read$VH() {
        return constants$13.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int (*read)(void*,size_t,void*);
     *}
     */
    public static MemorySegment read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$13.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int (*read)(void*,size_t,void*);
     *}
     */
    public static void read$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$2.set(seg, x);
    }

    public static MemorySegment read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$13.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static read read(MemorySegment segment, Arena scope) {
        return read.ofAddress(read$get(segment), scope);
    }

    /**
     * {@snippet :
     * int (*seek)(int64_t,void*);
     *}
     */
    public interface seek {

        int apply(long _x0, java.lang.foreign.MemorySegment _x1);

        static MemorySegment allocate(seek fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$13.const$4, fi, constants$13.const$3, scope);
        }

        static seek ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int) constants$13.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle seek$VH() {
        return constants$14.const$0;
    }

    /**
     * Getter for field:
     * {@snippet :
     * int (*seek)(int64_t,void*);
     *}
     */
    public static MemorySegment seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$14.const$0.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * int (*seek)(int64_t,void*);
     *}
     */
    public static void seek$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$0.set(seg, x);
    }

    public static MemorySegment seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$14.const$0.get(seg.asSlice(index * sizeof()));
    }

    public static void seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$0.set(seg.asSlice(index * sizeof()), x);
    }

    public static seek seek(MemorySegment segment, Arena scope) {
        return seek.ofAddress(seek$get(segment), scope);
    }

    /**
     * {@snippet :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t,void*);
     *}
     */
    public interface wait_for_file_size {

        int apply(long _x0, java.lang.foreign.MemorySegment _x1);

        static MemorySegment allocate(wait_for_file_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$14.const$1, fi, constants$13.const$3, scope);
        }

        static wait_for_file_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (long __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int) constants$13.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle wait_for_file_size$VH() {
        return constants$14.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t,void*);
     *}
     */
    public static MemorySegment wait_for_file_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment) constants$14.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t,void*);
     *}
     */
    public static void wait_for_file_size$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$2.set(seg, x);
    }

    public static MemorySegment wait_for_file_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment) constants$14.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void wait_for_file_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static wait_for_file_size wait_for_file_size(MemorySegment segment, Arena scope) {
        return wait_for_file_size.ofAddress(wait_for_file_size$get(segment), scope);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


