// Generated by jextract

package com.github.gotson.nightmonkeys.heif.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet :
 * struct heif_decoded_mastering_display_colour_volume {
 *     float display_primaries_x[3];
 *     float display_primaries_y[3];
 *     float white_point_x;
 *     float white_point_y;
 *     double max_display_mastering_luminance;
 *     double min_display_mastering_luminance;
 * };
 *}
 */
public class heif_decoded_mastering_display_colour_volume {

    public static MemoryLayout $LAYOUT() {
        return constants$43.const$0;
    }

    public static MemorySegment display_primaries_x$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }

    public static MemorySegment display_primaries_y$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }

    public static VarHandle white_point_x$VH() {
        return constants$43.const$1;
    }

    /**
     * Getter for field:
     * {@snippet :
     * float white_point_x;
     *}
     */
    public static float white_point_x$get(MemorySegment seg) {
        return (float) constants$43.const$1.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * float white_point_x;
     *}
     */
    public static void white_point_x$set(MemorySegment seg, float x) {
        constants$43.const$1.set(seg, x);
    }

    public static float white_point_x$get(MemorySegment seg, long index) {
        return (float) constants$43.const$1.get(seg.asSlice(index * sizeof()));
    }

    public static void white_point_x$set(MemorySegment seg, long index, float x) {
        constants$43.const$1.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle white_point_y$VH() {
        return constants$43.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * float white_point_y;
     *}
     */
    public static float white_point_y$get(MemorySegment seg) {
        return (float) constants$43.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * float white_point_y;
     *}
     */
    public static void white_point_y$set(MemorySegment seg, float x) {
        constants$43.const$2.set(seg, x);
    }

    public static float white_point_y$get(MemorySegment seg, long index) {
        return (float) constants$43.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void white_point_y$set(MemorySegment seg, long index, float x) {
        constants$43.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle max_display_mastering_luminance$VH() {
        return constants$43.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * double max_display_mastering_luminance;
     *}
     */
    public static double max_display_mastering_luminance$get(MemorySegment seg) {
        return (double) constants$43.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * double max_display_mastering_luminance;
     *}
     */
    public static void max_display_mastering_luminance$set(MemorySegment seg, double x) {
        constants$43.const$3.set(seg, x);
    }

    public static double max_display_mastering_luminance$get(MemorySegment seg, long index) {
        return (double) constants$43.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void max_display_mastering_luminance$set(MemorySegment seg, long index, double x) {
        constants$43.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle min_display_mastering_luminance$VH() {
        return constants$43.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * double min_display_mastering_luminance;
     *}
     */
    public static double min_display_mastering_luminance$get(MemorySegment seg) {
        return (double) constants$43.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * double min_display_mastering_luminance;
     *}
     */
    public static void min_display_mastering_luminance$set(MemorySegment seg, double x) {
        constants$43.const$4.set(seg, x);
    }

    public static double min_display_mastering_luminance$get(MemorySegment seg, long index) {
        return (double) constants$43.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void min_display_mastering_luminance$set(MemorySegment seg, long index, double x) {
        constants$43.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


