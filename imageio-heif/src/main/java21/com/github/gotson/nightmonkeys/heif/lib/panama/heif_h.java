// Generated by jextract

package com.github.gotson.nightmonkeys.heif.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;

public class heif_h {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;

    /**
     * {@snippet :
     * #define __WORDSIZE 64
     *}
     */
    public static int __WORDSIZE() {
        return (int) 64L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_ONLY_64_BIT_INO_T 0
     *}
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     *}
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_ONLY_VERS_1050 0
     *}
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_UNIX03 1
     *}
     */
    public static int __DARWIN_UNIX03() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_64_BIT_INO_T 1
     *}
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_VERS_1050 1
     *}
     */
    public static int __DARWIN_VERS_1050() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_NON_CANCELABLE 0
     *}
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __STDC_WANT_LIB_EXT1__ 1
     *}
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_NO_LONG_LONG 0
     *}
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     *}
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     *}
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     *}
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * #define __has_ptrcheck 0
     *}
     */
    public static int __has_ptrcheck() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_SIZE__ 8176
     *}
     */
    public static int __PTHREAD_SIZE__() {
        return (int) 8176L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_ATTR_SIZE__ 56
     *}
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int) 56L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     *}
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     *}
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int) 56L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     *}
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_COND_SIZE__ 40
     *}
     */
    public static int __PTHREAD_COND_SIZE__() {
        return (int) 40L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_ONCE_SIZE__ 8
     *}
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     *}
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int) 192L;
    }

    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     *}
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * #define INT8_MAX 127
     *}
     */
    public static int INT8_MAX() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * #define INT16_MAX 32767
     *}
     */
    public static int INT16_MAX() {
        return (int) 32767L;
    }

    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     *}
     */
    public static int INT32_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define UINT8_MAX 255
     *}
     */
    public static int UINT8_MAX() {
        return (int) 255L;
    }

    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     *}
     */
    public static int UINT16_MAX() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     *}
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     *}
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     *}
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     *}
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     *}
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     *}
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     *}
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     *}
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     *}
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     *}
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     *}
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     *}
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     *}
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     *}
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_least64_t;
     *}
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     *}
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     *}
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     *}
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     *}
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     *}
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_fast16_t;
     *}
     */
    public static final OfShort int_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     *}
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     *}
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     *}
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_fast16_t;
     *}
     */
    public static final OfShort uint_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     *}
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     *}
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     *}
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     *}
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     *}
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     *}
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     *}
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     *}
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __int64_t;
     *}
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __uint64_t;
     *}
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_intptr_t;
     *}
     */
    public static final OfLong __darwin_intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_natural_t;
     *}
     */
    public static final OfInt __darwin_natural_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_ct_rune_t;
     *}
     */
    public static final OfInt __darwin_ct_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ptrdiff_t;
     *}
     */
    public static final OfLong __darwin_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_size_t;
     *}
     */
    public static final OfLong __darwin_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_wchar_t;
     *}
     */
    public static final OfInt __darwin_wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_rune_t;
     *}
     */
    public static final OfInt __darwin_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wint_t;
     *}
     */
    public static final OfInt __darwin_wint_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_clock_t;
     *}
     */
    public static final OfLong __darwin_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_socklen_t;
     *}
     */
    public static final OfInt __darwin_socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ssize_t;
     *}
     */
    public static final OfLong __darwin_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_time_t;
     *}
     */
    public static final OfLong __darwin_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __darwin_blkcnt_t;
     *}
     */
    public static final OfLong __darwin_blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_blksize_t;
     *}
     */
    public static final OfInt __darwin_blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_dev_t;
     *}
     */
    public static final OfInt __darwin_dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsblkcnt_t;
     *}
     */
    public static final OfInt __darwin_fsblkcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsfilcnt_t;
     *}
     */
    public static final OfInt __darwin_fsfilcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_gid_t;
     *}
     */
    public static final OfInt __darwin_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_id_t;
     *}
     */
    public static final OfInt __darwin_id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino64_t;
     *}
     */
    public static final OfLong __darwin_ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino_t;
     *}
     */
    public static final OfLong __darwin_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_name_t;
     *}
     */
    public static final OfInt __darwin_mach_port_name_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_t;
     *}
     */
    public static final OfInt __darwin_mach_port_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __darwin_mode_t;
     *}
     */
    public static final OfShort __darwin_mode_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long long __darwin_off_t;
     *}
     */
    public static final OfLong __darwin_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_pid_t;
     *}
     */
    public static final OfInt __darwin_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_sigset_t;
     *}
     */
    public static final OfInt __darwin_sigset_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_suseconds_t;
     *}
     */
    public static final OfInt __darwin_suseconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_uid_t;
     *}
     */
    public static final OfInt __darwin_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_useconds_t;
     *}
     */
    public static final OfInt __darwin_useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_pthread_key_t;
     *}
     */
    public static final OfLong __darwin_pthread_key_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _opaque_pthread_t* __darwin_pthread_t;
     *}
     */
    public static final AddressLayout __darwin_pthread_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     *}
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     *}
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     *}
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long u_int64_t;
     *}
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long register_t;
     *}
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     *}
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_addr_t;
     *}
     */
    public static final OfLong user_addr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_size_t;
     *}
     */
    public static final OfLong user_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_ssize_t;
     *}
     */
    public static final OfLong user_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_long_t;
     *}
     */
    public static final OfLong user_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_ulong_t;
     *}
     */
    public static final OfLong user_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_time_t;
     *}
     */
    public static final OfLong user_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_off_t;
     *}
     */
    public static final OfLong user_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long syscall_arg_t;
     *}
     */
    public static final OfLong syscall_arg_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     *}
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     *}
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     *}
     */
    public static final OfLong uintmax_t = JAVA_LONG;

    public static MethodHandle heif_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5, "heif_get_version");
    }

    /**
     * {@snippet :
     * char* heif_get_version();
     *}
     */
    public static MemorySegment heif_get_version() {
        var mh$ = heif_get_version$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_version_number$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1, "heif_get_version_number");
    }

    /**
     * {@snippet :
     * uint32_t heif_get_version_number();
     *}
     */
    public static int heif_get_version_number() {
        var mh$ = heif_get_version_number$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_version_number_major$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$2, "heif_get_version_number_major");
    }

    /**
     * {@snippet :
     * int heif_get_version_number_major();
     *}
     */
    public static int heif_get_version_number_major() {
        var mh$ = heif_get_version_number_major$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_version_number_minor$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3, "heif_get_version_number_minor");
    }

    /**
     * {@snippet :
     * int heif_get_version_number_minor();
     *}
     */
    public static int heif_get_version_number_minor() {
        var mh$ = heif_get_version_number_minor$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_version_number_maintenance$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4, "heif_get_version_number_maintenance");
    }

    /**
     * {@snippet :
     * int heif_get_version_number_maintenance();
     *}
     */
    public static int heif_get_version_number_maintenance() {
        var mh$ = heif_get_version_number_maintenance$MH();
        try {
            return (int) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Ok = 0;
     *}
     */
    public static int heif_error_Ok() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Input_does_not_exist = 1;
     *}
     */
    public static int heif_error_Input_does_not_exist() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Invalid_input = 2;
     *}
     */
    public static int heif_error_Invalid_input() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Unsupported_filetype = 3;
     *}
     */
    public static int heif_error_Unsupported_filetype() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Unsupported_feature = 4;
     *}
     */
    public static int heif_error_Unsupported_feature() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Usage_error = 5;
     *}
     */
    public static int heif_error_Usage_error() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Memory_allocation_error = 6;
     *}
     */
    public static int heif_error_Memory_allocation_error() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Decoder_plugin_error = 7;
     *}
     */
    public static int heif_error_Decoder_plugin_error() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Encoder_plugin_error = 8;
     *}
     */
    public static int heif_error_Encoder_plugin_error() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Encoding_error = 9;
     *}
     */
    public static int heif_error_Encoding_error() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Color_profile_does_not_exist = 10;
     *}
     */
    public static int heif_error_Color_profile_does_not_exist() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_error_code.heif_error_Plugin_loading_error = 11;
     *}
     */
    public static int heif_error_Plugin_loading_error() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unspecified = 0;
     *}
     */
    public static int heif_suberror_Unspecified() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_End_of_data = 100;
     *}
     */
    public static int heif_suberror_End_of_data() {
        return (int) 100L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_box_size = 101;
     *}
     */
    public static int heif_suberror_Invalid_box_size() {
        return (int) 101L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_ftyp_box = 102;
     *}
     */
    public static int heif_suberror_No_ftyp_box() {
        return (int) 102L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_idat_box = 103;
     *}
     */
    public static int heif_suberror_No_idat_box() {
        return (int) 103L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_meta_box = 104;
     *}
     */
    public static int heif_suberror_No_meta_box() {
        return (int) 104L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_hdlr_box = 105;
     *}
     */
    public static int heif_suberror_No_hdlr_box() {
        return (int) 105L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_hvcC_box = 106;
     *}
     */
    public static int heif_suberror_No_hvcC_box() {
        return (int) 106L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_pitm_box = 107;
     *}
     */
    public static int heif_suberror_No_pitm_box() {
        return (int) 107L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_ipco_box = 108;
     *}
     */
    public static int heif_suberror_No_ipco_box() {
        return (int) 108L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_ipma_box = 109;
     *}
     */
    public static int heif_suberror_No_ipma_box() {
        return (int) 109L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_iloc_box = 110;
     *}
     */
    public static int heif_suberror_No_iloc_box() {
        return (int) 110L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_iinf_box = 111;
     *}
     */
    public static int heif_suberror_No_iinf_box() {
        return (int) 111L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_iprp_box = 112;
     *}
     */
    public static int heif_suberror_No_iprp_box() {
        return (int) 112L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_iref_box = 113;
     *}
     */
    public static int heif_suberror_No_iref_box() {
        return (int) 113L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_pict_handler = 114;
     *}
     */
    public static int heif_suberror_No_pict_handler() {
        return (int) 114L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Ipma_box_references_nonexisting_property = 115;
     *}
     */
    public static int heif_suberror_Ipma_box_references_nonexisting_property() {
        return (int) 115L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_properties_assigned_to_item = 116;
     *}
     */
    public static int heif_suberror_No_properties_assigned_to_item() {
        return (int) 116L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_item_data = 117;
     *}
     */
    public static int heif_suberror_No_item_data() {
        return (int) 117L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_grid_data = 118;
     *}
     */
    public static int heif_suberror_Invalid_grid_data() {
        return (int) 118L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Missing_grid_images = 119;
     *}
     */
    public static int heif_suberror_Missing_grid_images() {
        return (int) 119L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_clean_aperture = 120;
     *}
     */
    public static int heif_suberror_Invalid_clean_aperture() {
        return (int) 120L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_overlay_data = 121;
     *}
     */
    public static int heif_suberror_Invalid_overlay_data() {
        return (int) 121L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Overlay_image_outside_of_canvas = 122;
     *}
     */
    public static int heif_suberror_Overlay_image_outside_of_canvas() {
        return (int) 122L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Auxiliary_image_type_unspecified = 123;
     *}
     */
    public static int heif_suberror_Auxiliary_image_type_unspecified() {
        return (int) 123L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_or_invalid_primary_item = 124;
     *}
     */
    public static int heif_suberror_No_or_invalid_primary_item() {
        return (int) 124L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_infe_box = 125;
     *}
     */
    public static int heif_suberror_No_infe_box() {
        return (int) 125L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unknown_color_profile_type = 126;
     *}
     */
    public static int heif_suberror_Unknown_color_profile_type() {
        return (int) 126L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Wrong_tile_image_chroma_format = 127;
     *}
     */
    public static int heif_suberror_Wrong_tile_image_chroma_format() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_fractional_number = 128;
     *}
     */
    public static int heif_suberror_Invalid_fractional_number() {
        return (int) 128L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_image_size = 129;
     *}
     */
    public static int heif_suberror_Invalid_image_size() {
        return (int) 129L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_pixi_box = 130;
     *}
     */
    public static int heif_suberror_Invalid_pixi_box() {
        return (int) 130L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_No_av1C_box = 131;
     *}
     */
    public static int heif_suberror_No_av1C_box() {
        return (int) 131L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Wrong_tile_image_pixel_depth = 132;
     *}
     */
    public static int heif_suberror_Wrong_tile_image_pixel_depth() {
        return (int) 132L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unknown_NCLX_color_primaries = 133;
     *}
     */
    public static int heif_suberror_Unknown_NCLX_color_primaries() {
        return (int) 133L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unknown_NCLX_transfer_characteristics = 134;
     *}
     */
    public static int heif_suberror_Unknown_NCLX_transfer_characteristics() {
        return (int) 134L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unknown_NCLX_matrix_coefficients = 135;
     *}
     */
    public static int heif_suberror_Unknown_NCLX_matrix_coefficients() {
        return (int) 135L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_region_data = 136;
     *}
     */
    public static int heif_suberror_Invalid_region_data() {
        return (int) 136L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Security_limit_exceeded = 1000;
     *}
     */
    public static int heif_suberror_Security_limit_exceeded() {
        return (int) 1000L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Nonexisting_item_referenced = 2000;
     *}
     */
    public static int heif_suberror_Nonexisting_item_referenced() {
        return (int) 2000L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Null_pointer_argument = 2001;
     *}
     */
    public static int heif_suberror_Null_pointer_argument() {
        return (int) 2001L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Nonexisting_image_channel_referenced = 2002;
     *}
     */
    public static int heif_suberror_Nonexisting_image_channel_referenced() {
        return (int) 2002L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_plugin_version = 2003;
     *}
     */
    public static int heif_suberror_Unsupported_plugin_version() {
        return (int) 2003L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_writer_version = 2004;
     *}
     */
    public static int heif_suberror_Unsupported_writer_version() {
        return (int) 2004L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_parameter = 2005;
     *}
     */
    public static int heif_suberror_Unsupported_parameter() {
        return (int) 2005L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_parameter_value = 2006;
     *}
     */
    public static int heif_suberror_Invalid_parameter_value() {
        return (int) 2006L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Invalid_property = 2007;
     *}
     */
    public static int heif_suberror_Invalid_property() {
        return (int) 2007L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Item_reference_cycle = 2008;
     *}
     */
    public static int heif_suberror_Item_reference_cycle() {
        return (int) 2008L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_codec = 3000;
     *}
     */
    public static int heif_suberror_Unsupported_codec() {
        return (int) 3000L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_image_type = 3001;
     *}
     */
    public static int heif_suberror_Unsupported_image_type() {
        return (int) 3001L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_data_version = 3002;
     *}
     */
    public static int heif_suberror_Unsupported_data_version() {
        return (int) 3002L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_color_conversion = 3003;
     *}
     */
    public static int heif_suberror_Unsupported_color_conversion() {
        return (int) 3003L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_item_construction_method = 3004;
     *}
     */
    public static int heif_suberror_Unsupported_item_construction_method() {
        return (int) 3004L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_header_compression_method = 3005;
     *}
     */
    public static int heif_suberror_Unsupported_header_compression_method() {
        return (int) 3005L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Unsupported_bit_depth = 4000;
     *}
     */
    public static int heif_suberror_Unsupported_bit_depth() {
        return (int) 4000L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Cannot_write_output_data = 5000;
     *}
     */
    public static int heif_suberror_Cannot_write_output_data() {
        return (int) 5000L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Encoder_initialization = 5001;
     *}
     */
    public static int heif_suberror_Encoder_initialization() {
        return (int) 5001L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Encoder_encoding = 5002;
     *}
     */
    public static int heif_suberror_Encoder_encoding() {
        return (int) 5002L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Encoder_cleanup = 5003;
     *}
     */
    public static int heif_suberror_Encoder_cleanup() {
        return (int) 5003L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Too_many_regions = 5004;
     *}
     */
    public static int heif_suberror_Too_many_regions() {
        return (int) 5004L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Plugin_loading_error = 6000;
     *}
     */
    public static int heif_suberror_Plugin_loading_error() {
        return (int) 6000L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Plugin_is_not_loaded = 6001;
     *}
     */
    public static int heif_suberror_Plugin_is_not_loaded() {
        return (int) 6001L;
    }

    /**
     * {@snippet :
     * enum heif_suberror_code.heif_suberror_Cannot_read_plugin_directory = 6002;
     *}
     */
    public static int heif_suberror_Cannot_read_plugin_directory() {
        return (int) 6002L;
    }

    /**
     * {@snippet :
     * typedef unsigned int heif_item_id;
     *}
     */
    public static final OfInt heif_item_id = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int heif_property_id;
     *}
     */
    public static final OfInt heif_property_id = JAVA_INT;

    public static MethodHandle heif_init$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6, "heif_init");
    }

    /**
     * {@snippet :
     * struct heif_error heif_init(struct heif_init_params*);
     *}
     */
    public static MemorySegment heif_init(SegmentAllocator allocator, MemorySegment x1) {
        var mh$ = heif_init$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_deinit$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1, "heif_deinit");
    }

    /**
     * {@snippet :
     * void heif_deinit(,...);
     *}
     */
    public static void heif_deinit(Object... x0) {
        var mh$ = heif_deinit$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_plugin_type.heif_plugin_type_encoder = 0;
     *}
     */
    public static int heif_plugin_type_encoder() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_plugin_type.heif_plugin_type_decoder = 1;
     *}
     */
    public static int heif_plugin_type_decoder() {
        return (int) 1L;
    }

    public static MethodHandle heif_load_plugin$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2, "heif_load_plugin");
    }

    /**
     * {@snippet :
     * struct heif_error heif_load_plugin(char* filename, struct heif_plugin_info** out_plugin);
     *}
     */
    public static MemorySegment heif_load_plugin(SegmentAllocator allocator, MemorySegment filename, MemorySegment out_plugin) {
        var mh$ = heif_load_plugin$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, filename, out_plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_load_plugins$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4, "heif_load_plugins");
    }

    /**
     * {@snippet :
     * struct heif_error heif_load_plugins(char* directory, struct heif_plugin_info** out_plugins, int* out_nPluginsLoaded, int output_array_size);
     *}
     */
    public static MemorySegment heif_load_plugins(SegmentAllocator allocator, MemorySegment directory, MemorySegment out_plugins, MemorySegment out_nPluginsLoaded,
                                                  int output_array_size) {
        var mh$ = heif_load_plugins$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, directory, out_plugins, out_nPluginsLoaded, output_array_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_unload_plugin$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5, "heif_unload_plugin");
    }

    /**
     * {@snippet :
     * struct heif_error heif_unload_plugin(struct heif_plugin_info* plugin);
     *}
     */
    public static MemorySegment heif_unload_plugin(SegmentAllocator allocator, MemorySegment plugin) {
        var mh$ = heif_unload_plugin$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_filetype_result.heif_filetype_no = 0;
     *}
     */
    public static int heif_filetype_no() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_filetype_result.heif_filetype_yes_supported = 1;
     *}
     */
    public static int heif_filetype_yes_supported() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_filetype_result.heif_filetype_yes_unsupported = 2;
     *}
     */
    public static int heif_filetype_yes_unsupported() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_filetype_result.heif_filetype_maybe = 3;
     *}
     */
    public static int heif_filetype_maybe() {
        return (int) 3L;
    }

    public static MethodHandle heif_check_filetype$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1, "heif_check_filetype");
    }

    /**
     * {@snippet :
     * enum heif_filetype_result heif_check_filetype(const uint8_t* data, int len);
     *}
     */
    public static int heif_check_filetype(MemorySegment data, int len) {
        var mh$ = heif_check_filetype$MH();
        try {
            return (int) mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_check_jpeg_filetype$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2, "heif_check_jpeg_filetype");
    }

    /**
     * {@snippet :
     * int heif_check_jpeg_filetype(const uint8_t* data, int len);
     *}
     */
    public static int heif_check_jpeg_filetype(MemorySegment data, int len) {
        var mh$ = heif_check_jpeg_filetype$MH();
        try {
            return (int) mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_unknown_brand = 0;
     *}
     */
    public static int heif_unknown_brand() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_heic = 1;
     *}
     */
    public static int heif_heic() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_heix = 2;
     *}
     */
    public static int heif_heix() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_hevc = 3;
     *}
     */
    public static int heif_hevc() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_hevx = 4;
     *}
     */
    public static int heif_hevx() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_heim = 5;
     *}
     */
    public static int heif_heim() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_heis = 6;
     *}
     */
    public static int heif_heis() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_hevm = 7;
     *}
     */
    public static int heif_hevm() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_hevs = 8;
     *}
     */
    public static int heif_hevs() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_mif1 = 9;
     *}
     */
    public static int heif_mif1() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_msf1 = 10;
     *}
     */
    public static int heif_msf1() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_avif = 11;
     *}
     */
    public static int heif_avif() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_avis = 12;
     *}
     */
    public static int heif_avis() {
        return (int) 12L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_vvic = 13;
     *}
     */
    public static int heif_vvic() {
        return (int) 13L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_vvis = 14;
     *}
     */
    public static int heif_vvis() {
        return (int) 14L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_evbi = 15;
     *}
     */
    public static int heif_evbi() {
        return (int) 15L;
    }

    /**
     * {@snippet :
     * enum heif_brand.heif_evbs = 16;
     *}
     */
    public static int heif_evbs() {
        return (int) 16L;
    }

    public static MethodHandle heif_main_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3, "heif_main_brand");
    }

    /**
     * {@snippet :
     * enum heif_brand heif_main_brand(const uint8_t* data, int len);
     *}
     */
    public static int heif_main_brand(MemorySegment data, int len) {
        var mh$ = heif_main_brand$MH();
        try {
            return (int) mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * typedef unsigned int heif_brand2;
     *}
     */
    public static final OfInt heif_brand2 = JAVA_INT;

    public static MethodHandle heif_read_main_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4, "heif_read_main_brand");
    }

    /**
     * {@snippet :
     * heif_brand2 heif_read_main_brand(const uint8_t* data, int len);
     *}
     */
    public static int heif_read_main_brand(MemorySegment data, int len) {
        var mh$ = heif_read_main_brand$MH();
        try {
            return (int) mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_fourcc_to_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$6, "heif_fourcc_to_brand");
    }

    /**
     * {@snippet :
     * heif_brand2 heif_fourcc_to_brand(char* brand_fourcc);
     *}
     */
    public static int heif_fourcc_to_brand(MemorySegment brand_fourcc) {
        var mh$ = heif_fourcc_to_brand$MH();
        try {
            return (int) mh$.invokeExact(brand_fourcc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_brand_to_fourcc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1, "heif_brand_to_fourcc");
    }

    /**
     * {@snippet :
     * void heif_brand_to_fourcc(heif_brand2 brand, char* out_fourcc);
     *}
     */
    public static void heif_brand_to_fourcc(int brand, MemorySegment out_fourcc) {
        var mh$ = heif_brand_to_fourcc$MH();
        try {
            mh$.invokeExact(brand, out_fourcc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_has_compatible_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3, "heif_has_compatible_brand");
    }

    /**
     * {@snippet :
     * int heif_has_compatible_brand(const uint8_t* data, int len, char* brand_fourcc);
     *}
     */
    public static int heif_has_compatible_brand(MemorySegment data, int len, MemorySegment brand_fourcc) {
        var mh$ = heif_has_compatible_brand$MH();
        try {
            return (int) mh$.invokeExact(data, len, brand_fourcc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_list_compatible_brands$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5, "heif_list_compatible_brands");
    }

    /**
     * {@snippet :
     * struct heif_error heif_list_compatible_brands(const uint8_t* data, int len, heif_brand2** out_brands, int* out_size);
     *}
     */
    public static MemorySegment heif_list_compatible_brands(SegmentAllocator allocator, MemorySegment data, int len, MemorySegment out_brands, MemorySegment out_size) {
        var mh$ = heif_list_compatible_brands$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, data, len, out_brands, out_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_free_list_of_compatible_brands$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0, "heif_free_list_of_compatible_brands");
    }

    /**
     * {@snippet :
     * void heif_free_list_of_compatible_brands(heif_brand2* brands_list);
     *}
     */
    public static void heif_free_list_of_compatible_brands(MemorySegment brands_list) {
        var mh$ = heif_free_list_of_compatible_brands$MH();
        try {
            mh$.invokeExact(brands_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_file_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2, "heif_get_file_mime_type");
    }

    /**
     * {@snippet :
     * char* heif_get_file_mime_type(const uint8_t* data, int len);
     *}
     */
    public static MemorySegment heif_get_file_mime_type(MemorySegment data, int len) {
        var mh$ = heif_get_file_mime_type$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3, "heif_context_alloc");
    }

    /**
     * {@snippet :
     * struct heif_context* heif_context_alloc();
     *}
     */
    public static MemorySegment heif_context_alloc() {
        var mh$ = heif_context_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4, "heif_context_free");
    }

    /**
     * {@snippet :
     * void heif_context_free(struct heif_context*);
     *}
     */
    public static void heif_context_free(MemorySegment x0) {
        var mh$ = heif_context_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_reader_grow_status.heif_reader_grow_status_size_reached = 0;
     *}
     */
    public static int heif_reader_grow_status_size_reached() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_reader_grow_status.heif_reader_grow_status_timeout = 1;
     *}
     */
    public static int heif_reader_grow_status_timeout() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_reader_grow_status.heif_reader_grow_status_size_beyond_eof = 2;
     *}
     */
    public static int heif_reader_grow_status_size_beyond_eof() {
        return (int) 2L;
    }

    public static MethodHandle heif_context_read_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4, "heif_context_read_from_file");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_read_from_file(struct heif_context*, char* filename, struct heif_reading_options*);
     *}
     */
    public static MemorySegment heif_context_read_from_file(SegmentAllocator allocator, MemorySegment x1, MemorySegment filename, MemorySegment x3) {
        var mh$ = heif_context_read_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, filename, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_read_from_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$6, "heif_context_read_from_memory");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_read_from_memory(struct heif_context*, void* mem, size_t size, struct heif_reading_options*);
     *}
     */
    public static MemorySegment heif_context_read_from_memory(SegmentAllocator allocator, MemorySegment x1, MemorySegment mem, long size, MemorySegment x4) {
        var mh$ = heif_context_read_from_memory$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, mem, size, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_read_from_memory_without_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0, "heif_context_read_from_memory_without_copy");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_read_from_memory_without_copy(struct heif_context*, void* mem, size_t size, struct heif_reading_options*);
     *}
     */
    public static MemorySegment heif_context_read_from_memory_without_copy(SegmentAllocator allocator, MemorySegment x1, MemorySegment mem, long size, MemorySegment x4) {
        var mh$ = heif_context_read_from_memory_without_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, mem, size, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_read_from_reader$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2, "heif_context_read_from_reader");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_read_from_reader(struct heif_context*, struct heif_reader* reader, void* userdata, struct heif_reading_options*);
     *}
     */
    public static MemorySegment heif_context_read_from_reader(SegmentAllocator allocator, MemorySegment x1, MemorySegment reader, MemorySegment userdata, MemorySegment x4) {
        var mh$ = heif_context_read_from_reader$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, reader, userdata, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_number_of_top_level_images$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3, "heif_context_get_number_of_top_level_images");
    }

    /**
     * {@snippet :
     * int heif_context_get_number_of_top_level_images(struct heif_context* ctx);
     *}
     */
    public static int heif_context_get_number_of_top_level_images(MemorySegment ctx) {
        var mh$ = heif_context_get_number_of_top_level_images$MH();
        try {
            return (int) mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_is_top_level_image_ID$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4, "heif_context_is_top_level_image_ID");
    }

    /**
     * {@snippet :
     * int heif_context_is_top_level_image_ID(struct heif_context* ctx, heif_item_id id);
     *}
     */
    public static int heif_context_is_top_level_image_ID(MemorySegment ctx, int id) {
        var mh$ = heif_context_is_top_level_image_ID$MH();
        try {
            return (int) mh$.invokeExact(ctx, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_list_of_top_level_image_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$6, "heif_context_get_list_of_top_level_image_IDs");
    }

    /**
     * {@snippet :
     * int heif_context_get_list_of_top_level_image_IDs(struct heif_context* ctx, heif_item_id* ID_array, int count);
     *}
     */
    public static int heif_context_get_list_of_top_level_image_IDs(MemorySegment ctx, MemorySegment ID_array, int count) {
        var mh$ = heif_context_get_list_of_top_level_image_IDs$MH();
        try {
            return (int) mh$.invokeExact(ctx, ID_array, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_primary_image_ID$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0, "heif_context_get_primary_image_ID");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_get_primary_image_ID(struct heif_context* ctx, heif_item_id* id);
     *}
     */
    public static MemorySegment heif_context_get_primary_image_ID(SegmentAllocator allocator, MemorySegment ctx, MemorySegment id) {
        var mh$ = heif_context_get_primary_image_ID$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, ctx, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_primary_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1, "heif_context_get_primary_image_handle");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_get_primary_image_handle(struct heif_context* ctx, struct heif_image_handle**);
     *}
     */
    public static MemorySegment heif_context_get_primary_image_handle(SegmentAllocator allocator, MemorySegment ctx, MemorySegment x2) {
        var mh$ = heif_context_get_primary_image_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, ctx, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3, "heif_context_get_image_handle");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_get_image_handle(struct heif_context* ctx, heif_item_id id, struct heif_image_handle**);
     *}
     */
    public static MemorySegment heif_context_get_image_handle(SegmentAllocator allocator, MemorySegment ctx, int id, MemorySegment x3) {
        var mh$ = heif_context_get_image_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, ctx, id, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_debug_dump_boxes_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5, "heif_context_debug_dump_boxes_to_file");
    }

    /**
     * {@snippet :
     * void heif_context_debug_dump_boxes_to_file(struct heif_context* ctx, int fd);
     *}
     */
    public static void heif_context_debug_dump_boxes_to_file(MemorySegment ctx, int fd) {
        var mh$ = heif_context_debug_dump_boxes_to_file$MH();
        try {
            mh$.invokeExact(ctx, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_set_maximum_image_size_limit$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0, "heif_context_set_maximum_image_size_limit");
    }

    /**
     * {@snippet :
     * void heif_context_set_maximum_image_size_limit(struct heif_context* ctx, int maximum_width);
     *}
     */
    public static void heif_context_set_maximum_image_size_limit(MemorySegment ctx, int maximum_width) {
        var mh$ = heif_context_set_maximum_image_size_limit$MH();
        try {
            mh$.invokeExact(ctx, maximum_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_set_max_decoding_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1, "heif_context_set_max_decoding_threads");
    }

    /**
     * {@snippet :
     * void heif_context_set_max_decoding_threads(struct heif_context* ctx, int max_threads);
     *}
     */
    public static void heif_context_set_max_decoding_threads(MemorySegment ctx, int max_threads) {
        var mh$ = heif_context_set_max_decoding_threads$MH();
        try {
            mh$.invokeExact(ctx, max_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_release$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2, "heif_image_handle_release");
    }

    /**
     * {@snippet :
     * void heif_image_handle_release(struct heif_image_handle*);
     *}
     */
    public static void heif_image_handle_release(MemorySegment x0) {
        var mh$ = heif_image_handle_release$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_is_primary_image$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3, "heif_image_handle_is_primary_image");
    }

    /**
     * {@snippet :
     * int heif_image_handle_is_primary_image(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_is_primary_image(MemorySegment handle) {
        var mh$ = heif_image_handle_is_primary_image$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_item_id$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4, "heif_image_handle_get_item_id");
    }

    /**
     * {@snippet :
     * heif_item_id heif_image_handle_get_item_id(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_item_id(MemorySegment handle) {
        var mh$ = heif_image_handle_get_item_id$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_width$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5, "heif_image_handle_get_width");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_width(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_width(MemorySegment handle) {
        var mh$ = heif_image_handle_get_width$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_height$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0, "heif_image_handle_get_height");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_height(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_height(MemorySegment handle) {
        var mh$ = heif_image_handle_get_height$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_has_alpha_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1, "heif_image_handle_has_alpha_channel");
    }

    /**
     * {@snippet :
     * int heif_image_handle_has_alpha_channel(struct heif_image_handle*);
     *}
     */
    public static int heif_image_handle_has_alpha_channel(MemorySegment x0) {
        var mh$ = heif_image_handle_has_alpha_channel$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_is_premultiplied_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2, "heif_image_handle_is_premultiplied_alpha");
    }

    /**
     * {@snippet :
     * int heif_image_handle_is_premultiplied_alpha(struct heif_image_handle*);
     *}
     */
    public static int heif_image_handle_is_premultiplied_alpha(MemorySegment x0) {
        var mh$ = heif_image_handle_is_premultiplied_alpha$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_luma_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3, "heif_image_handle_get_luma_bits_per_pixel");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_luma_bits_per_pixel(struct heif_image_handle*);
     *}
     */
    public static int heif_image_handle_get_luma_bits_per_pixel(MemorySegment x0) {
        var mh$ = heif_image_handle_get_luma_bits_per_pixel$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_chroma_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4, "heif_image_handle_get_chroma_bits_per_pixel");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_chroma_bits_per_pixel(struct heif_image_handle*);
     *}
     */
    public static int heif_image_handle_get_chroma_bits_per_pixel(MemorySegment x0) {
        var mh$ = heif_image_handle_get_chroma_bits_per_pixel$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_ispe_width$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5, "heif_image_handle_get_ispe_width");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_ispe_width(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_ispe_width(MemorySegment handle) {
        var mh$ = heif_image_handle_get_ispe_width$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_ispe_height$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0, "heif_image_handle_get_ispe_height");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_ispe_height(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_ispe_height(MemorySegment handle) {
        var mh$ = heif_image_handle_get_ispe_height$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_has_depth_image$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1, "heif_image_handle_has_depth_image");
    }

    /**
     * {@snippet :
     * int heif_image_handle_has_depth_image(struct heif_image_handle*);
     *}
     */
    public static int heif_image_handle_has_depth_image(MemorySegment x0) {
        var mh$ = heif_image_handle_has_depth_image$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_number_of_depth_images$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2, "heif_image_handle_get_number_of_depth_images");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_number_of_depth_images(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_number_of_depth_images(MemorySegment handle) {
        var mh$ = heif_image_handle_get_number_of_depth_images$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_list_of_depth_image_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3, "heif_image_handle_get_list_of_depth_image_IDs");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_list_of_depth_image_IDs(struct heif_image_handle* handle, heif_item_id* ids, int count);
     *}
     */
    public static int heif_image_handle_get_list_of_depth_image_IDs(MemorySegment handle, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_depth_image_IDs$MH();
        try {
            return (int) mh$.invokeExact(handle, ids, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_depth_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4, "heif_image_handle_get_depth_image_handle");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_depth_image_handle(struct heif_image_handle* handle, heif_item_id depth_image_id, struct heif_image_handle** out_depth_handle);
     *}
     */
    public static MemorySegment heif_image_handle_get_depth_image_handle(SegmentAllocator allocator, MemorySegment handle, int depth_image_id,
                                                                         MemorySegment out_depth_handle) {
        var mh$ = heif_image_handle_get_depth_image_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, handle, depth_image_id, out_depth_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_depth_representation_type.heif_depth_representation_type_uniform_inverse_Z = 0;
     *}
     */
    public static int heif_depth_representation_type_uniform_inverse_Z() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_depth_representation_type.heif_depth_representation_type_uniform_disparity = 1;
     *}
     */
    public static int heif_depth_representation_type_uniform_disparity() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_depth_representation_type.heif_depth_representation_type_uniform_Z = 2;
     *}
     */
    public static int heif_depth_representation_type_uniform_Z() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_depth_representation_type.heif_depth_representation_type_nonuniform_disparity = 3;
     *}
     */
    public static int heif_depth_representation_type_nonuniform_disparity() {
        return (int) 3L;
    }

    public static MethodHandle heif_depth_representation_info_free$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1, "heif_depth_representation_info_free");
    }

    /**
     * {@snippet :
     * void heif_depth_representation_info_free(struct heif_depth_representation_info* info);
     *}
     */
    public static void heif_depth_representation_info_free(MemorySegment info) {
        var mh$ = heif_depth_representation_info_free$MH();
        try {
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_depth_image_representation_info$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2, "heif_image_handle_get_depth_image_representation_info");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_depth_image_representation_info(struct heif_image_handle* handle, heif_item_id depth_image_id, struct heif_depth_representation_info** out);
     *}
     */
    public static int heif_image_handle_get_depth_image_representation_info(MemorySegment handle, int depth_image_id, MemorySegment out) {
        var mh$ = heif_image_handle_get_depth_image_representation_info$MH();
        try {
            return (int) mh$.invokeExact(handle, depth_image_id, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_number_of_thumbnails$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3, "heif_image_handle_get_number_of_thumbnails");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_number_of_thumbnails(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_number_of_thumbnails(MemorySegment handle) {
        var mh$ = heif_image_handle_get_number_of_thumbnails$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_list_of_thumbnail_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4, "heif_image_handle_get_list_of_thumbnail_IDs");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_list_of_thumbnail_IDs(struct heif_image_handle* handle, heif_item_id* ids, int count);
     *}
     */
    public static int heif_image_handle_get_list_of_thumbnail_IDs(MemorySegment handle, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_thumbnail_IDs$MH();
        try {
            return (int) mh$.invokeExact(handle, ids, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_thumbnail$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5, "heif_image_handle_get_thumbnail");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_thumbnail(struct heif_image_handle* main_image_handle, heif_item_id thumbnail_id, struct heif_image_handle** out_thumbnail_handle);
     *}
     */
    public static MemorySegment heif_image_handle_get_thumbnail(SegmentAllocator allocator, MemorySegment main_image_handle, int thumbnail_id,
                                                                MemorySegment out_thumbnail_handle) {
        var mh$ = heif_image_handle_get_thumbnail$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, main_image_handle, thumbnail_id, out_thumbnail_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_number_of_auxiliary_images$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0, "heif_image_handle_get_number_of_auxiliary_images");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_number_of_auxiliary_images(struct heif_image_handle* handle, int aux_filter);
     *}
     */
    public static int heif_image_handle_get_number_of_auxiliary_images(MemorySegment handle, int aux_filter) {
        var mh$ = heif_image_handle_get_number_of_auxiliary_images$MH();
        try {
            return (int) mh$.invokeExact(handle, aux_filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_list_of_auxiliary_image_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2, "heif_image_handle_get_list_of_auxiliary_image_IDs");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_list_of_auxiliary_image_IDs(struct heif_image_handle* handle, int aux_filter, heif_item_id* ids, int count);
     *}
     */
    public static int heif_image_handle_get_list_of_auxiliary_image_IDs(MemorySegment handle, int aux_filter, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_auxiliary_image_IDs$MH();
        try {
            return (int) mh$.invokeExact(handle, aux_filter, ids, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_auxiliary_type$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3, "heif_image_handle_get_auxiliary_type");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_auxiliary_type(struct heif_image_handle* handle, char** out_type);
     *}
     */
    public static MemorySegment heif_image_handle_get_auxiliary_type(SegmentAllocator allocator, MemorySegment handle, MemorySegment out_type) {
        var mh$ = heif_image_handle_get_auxiliary_type$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, handle, out_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_release_auxiliary_type$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5, "heif_image_handle_release_auxiliary_type");
    }

    /**
     * {@snippet :
     * void heif_image_handle_release_auxiliary_type(struct heif_image_handle* handle, char** out_type);
     *}
     */
    public static void heif_image_handle_release_auxiliary_type(MemorySegment handle, MemorySegment out_type) {
        var mh$ = heif_image_handle_release_auxiliary_type$MH();
        try {
            mh$.invokeExact(handle, out_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_free_auxiliary_types$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0, "heif_image_handle_free_auxiliary_types");
    }

    /**
     * {@snippet :
     * void heif_image_handle_free_auxiliary_types(struct heif_image_handle* handle, char** out_type);
     *}
     */
    public static void heif_image_handle_free_auxiliary_types(MemorySegment handle, MemorySegment out_type) {
        var mh$ = heif_image_handle_free_auxiliary_types$MH();
        try {
            mh$.invokeExact(handle, out_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_auxiliary_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1, "heif_image_handle_get_auxiliary_image_handle");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_auxiliary_image_handle(struct heif_image_handle* main_image_handle, heif_item_id auxiliary_id, struct heif_image_handle** out_auxiliary_handle);
     *}
     */
    public static MemorySegment heif_image_handle_get_auxiliary_image_handle(SegmentAllocator allocator, MemorySegment main_image_handle, int auxiliary_id,
                                                                             MemorySegment out_auxiliary_handle) {
        var mh$ = heif_image_handle_get_auxiliary_image_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, main_image_handle, auxiliary_id, out_auxiliary_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_number_of_metadata_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3, "heif_image_handle_get_number_of_metadata_blocks");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_number_of_metadata_blocks(struct heif_image_handle* handle, char* type_filter);
     *}
     */
    public static int heif_image_handle_get_number_of_metadata_blocks(MemorySegment handle, MemorySegment type_filter) {
        var mh$ = heif_image_handle_get_number_of_metadata_blocks$MH();
        try {
            return (int) mh$.invokeExact(handle, type_filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_list_of_metadata_block_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5, "heif_image_handle_get_list_of_metadata_block_IDs");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_list_of_metadata_block_IDs(struct heif_image_handle* handle, char* type_filter, heif_item_id* ids, int count);
     *}
     */
    public static int heif_image_handle_get_list_of_metadata_block_IDs(MemorySegment handle, MemorySegment type_filter, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_metadata_block_IDs$MH();
        try {
            return (int) mh$.invokeExact(handle, type_filter, ids, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_metadata_type$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0, "heif_image_handle_get_metadata_type");
    }

    /**
     * {@snippet :
     * char* heif_image_handle_get_metadata_type(struct heif_image_handle* handle, heif_item_id metadata_id);
     *}
     */
    public static MemorySegment heif_image_handle_get_metadata_type(MemorySegment handle, int metadata_id) {
        var mh$ = heif_image_handle_get_metadata_type$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(handle, metadata_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_metadata_content_type$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1, "heif_image_handle_get_metadata_content_type");
    }

    /**
     * {@snippet :
     * char* heif_image_handle_get_metadata_content_type(struct heif_image_handle* handle, heif_item_id metadata_id);
     *}
     */
    public static MemorySegment heif_image_handle_get_metadata_content_type(MemorySegment handle, int metadata_id) {
        var mh$ = heif_image_handle_get_metadata_content_type$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(handle, metadata_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_metadata_size$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3, "heif_image_handle_get_metadata_size");
    }

    /**
     * {@snippet :
     * size_t heif_image_handle_get_metadata_size(struct heif_image_handle* handle, heif_item_id metadata_id);
     *}
     */
    public static long heif_image_handle_get_metadata_size(MemorySegment handle, int metadata_id) {
        var mh$ = heif_image_handle_get_metadata_size$MH();
        try {
            return (long) mh$.invokeExact(handle, metadata_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4, "heif_image_handle_get_metadata");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_metadata(struct heif_image_handle* handle, heif_item_id metadata_id, void* out_data);
     *}
     */
    public static MemorySegment heif_image_handle_get_metadata(SegmentAllocator allocator, MemorySegment handle, int metadata_id, MemorySegment out_data) {
        var mh$ = heif_image_handle_get_metadata$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, handle, metadata_id, out_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_color_profile_type.heif_color_profile_type_not_present = 0;
     *}
     */
    public static int heif_color_profile_type_not_present() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_color_profile_type.heif_color_profile_type_nclx = 1852009592;
     *}
     */
    public static int heif_color_profile_type_nclx() {
        return (int) 1852009592L;
    }

    /**
     * {@snippet :
     * enum heif_color_profile_type.heif_color_profile_type_rICC = 1917403971;
     *}
     */
    public static int heif_color_profile_type_rICC() {
        return (int) 1917403971L;
    }

    /**
     * {@snippet :
     * enum heif_color_profile_type.heif_color_profile_type_prof = 1886547814;
     *}
     */
    public static int heif_color_profile_type_prof() {
        return (int) 1886547814L;
    }

    public static MethodHandle heif_image_handle_get_color_profile_type$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5, "heif_image_handle_get_color_profile_type");
    }

    /**
     * {@snippet :
     * enum heif_color_profile_type heif_image_handle_get_color_profile_type(struct heif_image_handle* handle);
     *}
     */
    public static int heif_image_handle_get_color_profile_type(MemorySegment handle) {
        var mh$ = heif_image_handle_get_color_profile_type$MH();
        try {
            return (int) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_raw_color_profile_size$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0, "heif_image_handle_get_raw_color_profile_size");
    }

    /**
     * {@snippet :
     * size_t heif_image_handle_get_raw_color_profile_size(struct heif_image_handle* handle);
     *}
     */
    public static long heif_image_handle_get_raw_color_profile_size(MemorySegment handle) {
        var mh$ = heif_image_handle_get_raw_color_profile_size$MH();
        try {
            return (long) mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_raw_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1, "heif_image_handle_get_raw_color_profile");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_raw_color_profile(struct heif_image_handle* handle, void* out_data);
     *}
     */
    public static MemorySegment heif_image_handle_get_raw_color_profile(SegmentAllocator allocator, MemorySegment handle, MemorySegment out_data) {
        var mh$ = heif_image_handle_get_raw_color_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, handle, out_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_709_5 = 1;
     *}
     */
    public static int heif_color_primaries_ITU_R_BT_709_5() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_unspecified = 2;
     *}
     */
    public static int heif_color_primaries_unspecified() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_470_6_System_M = 4;
     *}
     */
    public static int heif_color_primaries_ITU_R_BT_470_6_System_M() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_470_6_System_B_G = 5;
     *}
     */
    public static int heif_color_primaries_ITU_R_BT_470_6_System_B_G() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_601_6 = 6;
     *}
     */
    public static int heif_color_primaries_ITU_R_BT_601_6() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_240M = 7;
     *}
     */
    public static int heif_color_primaries_SMPTE_240M() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_generic_film = 8;
     *}
     */
    public static int heif_color_primaries_generic_film() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_2020_2_and_2100_0 = 9;
     *}
     */
    public static int heif_color_primaries_ITU_R_BT_2020_2_and_2100_0() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_ST_428_1 = 10;
     *}
     */
    public static int heif_color_primaries_SMPTE_ST_428_1() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_RP_431_2 = 11;
     *}
     */
    public static int heif_color_primaries_SMPTE_RP_431_2() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_EG_432_1 = 12;
     *}
     */
    public static int heif_color_primaries_SMPTE_EG_432_1() {
        return (int) 12L;
    }

    /**
     * {@snippet :
     * enum heif_color_primaries.heif_color_primaries_EBU_Tech_3213_E = 22;
     *}
     */
    public static int heif_color_primaries_EBU_Tech_3213_E() {
        return (int) 22L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_709_5 = 1;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_709_5() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_unspecified = 2;
     *}
     */
    public static int heif_transfer_characteristic_unspecified() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_470_6_System_M = 4;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_470_6_System_M() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G = 5;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_601_6 = 6;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_601_6() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_SMPTE_240M = 7;
     *}
     */
    public static int heif_transfer_characteristic_SMPTE_240M() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_linear = 8;
     *}
     */
    public static int heif_transfer_characteristic_linear() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_logarithmic_100 = 9;
     *}
     */
    public static int heif_transfer_characteristic_logarithmic_100() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_logarithmic_100_sqrt10 = 10;
     *}
     */
    public static int heif_transfer_characteristic_logarithmic_100_sqrt10() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_IEC_61966_2_4 = 11;
     *}
     */
    public static int heif_transfer_characteristic_IEC_61966_2_4() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_1361 = 12;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_1361() {
        return (int) 12L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_IEC_61966_2_1 = 13;
     *}
     */
    public static int heif_transfer_characteristic_IEC_61966_2_1() {
        return (int) 13L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2020_2_10bit = 14;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2020_2_10bit() {
        return (int) 14L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2020_2_12bit = 15;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2020_2_12bit() {
        return (int) 15L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2100_0_PQ = 16;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2100_0_PQ() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_SMPTE_ST_428_1 = 17;
     *}
     */
    public static int heif_transfer_characteristic_SMPTE_ST_428_1() {
        return (int) 17L;
    }

    /**
     * {@snippet :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2100_0_HLG = 18;
     *}
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2100_0_HLG() {
        return (int) 18L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_RGB_GBR = 0;
     *}
     */
    public static int heif_matrix_coefficients_RGB_GBR() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_709_5 = 1;
     *}
     */
    public static int heif_matrix_coefficients_ITU_R_BT_709_5() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_unspecified = 2;
     *}
     */
    public static int heif_matrix_coefficients_unspecified() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_US_FCC_T47 = 4;
     *}
     */
    public static int heif_matrix_coefficients_US_FCC_T47() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G = 5;
     *}
     */
    public static int heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_601_6 = 6;
     *}
     */
    public static int heif_matrix_coefficients_ITU_R_BT_601_6() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_SMPTE_240M = 7;
     *}
     */
    public static int heif_matrix_coefficients_SMPTE_240M() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_YCgCo = 8;
     *}
     */
    public static int heif_matrix_coefficients_YCgCo() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance = 9;
     *}
     */
    public static int heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance() {
        return (int) 9L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance = 10;
     *}
     */
    public static int heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_SMPTE_ST_2085 = 11;
     *}
     */
    public static int heif_matrix_coefficients_SMPTE_ST_2085() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_chromaticity_derived_non_constant_luminance = 12;
     *}
     */
    public static int heif_matrix_coefficients_chromaticity_derived_non_constant_luminance() {
        return (int) 12L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_chromaticity_derived_constant_luminance = 13;
     *}
     */
    public static int heif_matrix_coefficients_chromaticity_derived_constant_luminance() {
        return (int) 13L;
    }

    /**
     * {@snippet :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ICtCp = 14;
     *}
     */
    public static int heif_matrix_coefficients_ICtCp() {
        return (int) 14L;
    }

    public static MethodHandle heif_nclx_color_profile_set_color_primaries$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5, "heif_nclx_color_profile_set_color_primaries");
    }

    /**
     * {@snippet :
     * struct heif_error heif_nclx_color_profile_set_color_primaries(struct heif_color_profile_nclx* nclx, uint16_t cp);
     *}
     */
    public static MemorySegment heif_nclx_color_profile_set_color_primaries(SegmentAllocator allocator, MemorySegment nclx, short cp) {
        var mh$ = heif_nclx_color_profile_set_color_primaries$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, nclx, cp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_nclx_color_profile_set_transfer_characteristics$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0, "heif_nclx_color_profile_set_transfer_characteristics");
    }

    /**
     * {@snippet :
     * struct heif_error heif_nclx_color_profile_set_transfer_characteristics(struct heif_color_profile_nclx* nclx, uint16_t transfer_characteristics);
     *}
     */
    public static MemorySegment heif_nclx_color_profile_set_transfer_characteristics(SegmentAllocator allocator, MemorySegment nclx, short transfer_characteristics) {
        var mh$ = heif_nclx_color_profile_set_transfer_characteristics$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, nclx, transfer_characteristics);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_nclx_color_profile_set_matrix_coefficients$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1, "heif_nclx_color_profile_set_matrix_coefficients");
    }

    /**
     * {@snippet :
     * struct heif_error heif_nclx_color_profile_set_matrix_coefficients(struct heif_color_profile_nclx* nclx, uint16_t matrix_coefficients);
     *}
     */
    public static MemorySegment heif_nclx_color_profile_set_matrix_coefficients(SegmentAllocator allocator, MemorySegment nclx, short matrix_coefficients) {
        var mh$ = heif_nclx_color_profile_set_matrix_coefficients$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, nclx, matrix_coefficients);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_nclx_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2, "heif_image_handle_get_nclx_color_profile");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_get_nclx_color_profile(struct heif_image_handle* handle, struct heif_color_profile_nclx** out_data);
     *}
     */
    public static MemorySegment heif_image_handle_get_nclx_color_profile(SegmentAllocator allocator, MemorySegment handle, MemorySegment out_data) {
        var mh$ = heif_image_handle_get_nclx_color_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, handle, out_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_nclx_color_profile_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3, "heif_nclx_color_profile_alloc");
    }

    /**
     * {@snippet :
     * struct heif_color_profile_nclx* heif_nclx_color_profile_alloc(,...);
     *}
     */
    public static MemorySegment heif_nclx_color_profile_alloc(Object... x0) {
        var mh$ = heif_nclx_color_profile_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_nclx_color_profile_free$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4, "heif_nclx_color_profile_free");
    }

    /**
     * {@snippet :
     * void heif_nclx_color_profile_free(struct heif_color_profile_nclx* nclx_profile);
     *}
     */
    public static void heif_nclx_color_profile_free(MemorySegment nclx_profile) {
        var mh$ = heif_nclx_color_profile_free$MH();
        try {
            mh$.invokeExact(nclx_profile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_color_profile_type$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5, "heif_image_get_color_profile_type");
    }

    /**
     * {@snippet :
     * enum heif_color_profile_type heif_image_get_color_profile_type(struct heif_image* image);
     *}
     */
    public static int heif_image_get_color_profile_type(MemorySegment image) {
        var mh$ = heif_image_get_color_profile_type$MH();
        try {
            return (int) mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_raw_color_profile_size$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0, "heif_image_get_raw_color_profile_size");
    }

    /**
     * {@snippet :
     * size_t heif_image_get_raw_color_profile_size(struct heif_image* image);
     *}
     */
    public static long heif_image_get_raw_color_profile_size(MemorySegment image) {
        var mh$ = heif_image_get_raw_color_profile_size$MH();
        try {
            return (long) mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_raw_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1, "heif_image_get_raw_color_profile");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_get_raw_color_profile(struct heif_image* image, void* out_data);
     *}
     */
    public static MemorySegment heif_image_get_raw_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment out_data) {
        var mh$ = heif_image_get_raw_color_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image, out_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_nclx_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2, "heif_image_get_nclx_color_profile");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_get_nclx_color_profile(struct heif_image* image, struct heif_color_profile_nclx** out_data);
     *}
     */
    public static MemorySegment heif_image_get_nclx_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment out_data) {
        var mh$ = heif_image_get_nclx_color_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image, out_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_item_property_type.heif_item_property_type_invalid = 0;
     *}
     */
    public static int heif_item_property_type_invalid() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_item_property_type.heif_item_property_type_user_description = 1969513843;
     *}
     */
    public static int heif_item_property_type_user_description() {
        return (int) 1969513843L;
    }

    /**
     * {@snippet :
     * enum heif_item_property_type.heif_item_property_type_transform_mirror = 1768778098;
     *}
     */
    public static int heif_item_property_type_transform_mirror() {
        return (int) 1768778098L;
    }

    /**
     * {@snippet :
     * enum heif_item_property_type.heif_item_property_type_transform_rotation = 1769107316;
     *}
     */
    public static int heif_item_property_type_transform_rotation() {
        return (int) 1769107316L;
    }

    /**
     * {@snippet :
     * enum heif_item_property_type.heif_item_property_type_transform_crop = 1668047216;
     *}
     */
    public static int heif_item_property_type_transform_crop() {
        return (int) 1668047216L;
    }

    /**
     * {@snippet :
     * enum heif_item_property_type.heif_item_property_type_image_size = 1769173093;
     *}
     */
    public static int heif_item_property_type_image_size() {
        return (int) 1769173093L;
    }

    public static MethodHandle heif_item_get_properties_of_type$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4, "heif_item_get_properties_of_type");
    }

    /**
     * {@snippet :
     * int heif_item_get_properties_of_type(struct heif_context* context, heif_item_id id, enum heif_item_property_type type, heif_property_id* out_list, int count);
     *}
     */
    public static int heif_item_get_properties_of_type(MemorySegment context, int id, int type, MemorySegment out_list, int count) {
        var mh$ = heif_item_get_properties_of_type$MH();
        try {
            return (int) mh$.invokeExact(context, id, type, out_list, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_item_get_transformation_properties$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5, "heif_item_get_transformation_properties");
    }

    /**
     * {@snippet :
     * int heif_item_get_transformation_properties(struct heif_context* context, heif_item_id id, heif_property_id* out_list, int count);
     *}
     */
    public static int heif_item_get_transformation_properties(MemorySegment context, int id, MemorySegment out_list, int count) {
        var mh$ = heif_item_get_transformation_properties$MH();
        try {
            return (int) mh$.invokeExact(context, id, out_list, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_item_get_property_type$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1, "heif_item_get_property_type");
    }

    /**
     * {@snippet :
     * enum heif_item_property_type heif_item_get_property_type(struct heif_context* context, heif_item_id id, heif_property_id property_id);
     *}
     */
    public static int heif_item_get_property_type(MemorySegment context, int id, int property_id) {
        var mh$ = heif_item_get_property_type$MH();
        try {
            return (int) mh$.invokeExact(context, id, property_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_item_get_property_user_description$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3, "heif_item_get_property_user_description");
    }

    /**
     * {@snippet :
     * struct heif_error heif_item_get_property_user_description(struct heif_context* context, heif_item_id itemId, heif_property_id propertyId, struct heif_property_user_description** out);
     *}
     */
    public static MemorySegment heif_item_get_property_user_description(SegmentAllocator allocator, MemorySegment context, int itemId, int propertyId, MemorySegment out) {
        var mh$ = heif_item_get_property_user_description$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, context, itemId, propertyId, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_item_add_property_user_description$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4, "heif_item_add_property_user_description");
    }

    /**
     * {@snippet :
     * struct heif_error heif_item_add_property_user_description(struct heif_context* context, heif_item_id itemId, struct heif_property_user_description* description, heif_property_id* out_propertyId);
     *}
     */
    public static MemorySegment heif_item_add_property_user_description(SegmentAllocator allocator, MemorySegment context, int itemId, MemorySegment description,
                                                                        MemorySegment out_propertyId) {
        var mh$ = heif_item_add_property_user_description$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, context, itemId, description, out_propertyId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_property_user_description_release$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5, "heif_property_user_description_release");
    }

    /**
     * {@snippet :
     * void heif_property_user_description_release(struct heif_property_user_description*);
     *}
     */
    public static void heif_property_user_description_release(MemorySegment x0) {
        var mh$ = heif_property_user_description_release$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_transform_mirror_direction.heif_transform_mirror_direction_vertical = 0;
     *}
     */
    public static int heif_transform_mirror_direction_vertical() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_transform_mirror_direction.heif_transform_mirror_direction_horizontal = 1;
     *}
     */
    public static int heif_transform_mirror_direction_horizontal() {
        return (int) 1L;
    }

    public static MethodHandle heif_item_get_property_transform_mirror$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0, "heif_item_get_property_transform_mirror");
    }

    /**
     * {@snippet :
     * enum heif_transform_mirror_direction heif_item_get_property_transform_mirror(struct heif_context* context, heif_item_id itemId, heif_property_id propertyId);
     *}
     */
    public static int heif_item_get_property_transform_mirror(MemorySegment context, int itemId, int propertyId) {
        var mh$ = heif_item_get_property_transform_mirror$MH();
        try {
            return (int) mh$.invokeExact(context, itemId, propertyId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_item_get_property_transform_rotation_ccw$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1, "heif_item_get_property_transform_rotation_ccw");
    }

    /**
     * {@snippet :
     * int heif_item_get_property_transform_rotation_ccw(struct heif_context* context, heif_item_id itemId, heif_property_id propertyId);
     *}
     */
    public static int heif_item_get_property_transform_rotation_ccw(MemorySegment context, int itemId, int propertyId) {
        var mh$ = heif_item_get_property_transform_rotation_ccw$MH();
        try {
            return (int) mh$.invokeExact(context, itemId, propertyId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_item_get_property_transform_crop_borders$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3, "heif_item_get_property_transform_crop_borders");
    }

    /**
     * {@snippet :
     * void heif_item_get_property_transform_crop_borders(struct heif_context* context, heif_item_id itemId, heif_property_id propertyId, int image_width, int image_height, int* left, int* top, int* right, int* bottom);
     *}
     */
    public static void heif_item_get_property_transform_crop_borders(MemorySegment context, int itemId, int propertyId, int image_width, int image_height, MemorySegment left,
                                                                     MemorySegment top, MemorySegment right, MemorySegment bottom) {
        var mh$ = heif_item_get_property_transform_crop_borders$MH();
        try {
            mh$.invokeExact(context, itemId, propertyId, image_width, image_height, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_undefined = 0;
     *}
     */
    public static int heif_compression_undefined() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_HEVC = 1;
     *}
     */
    public static int heif_compression_HEVC() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_AVC = 2;
     *}
     */
    public static int heif_compression_AVC() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_JPEG = 3;
     *}
     */
    public static int heif_compression_JPEG() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_AV1 = 4;
     *}
     */
    public static int heif_compression_AV1() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_VVC = 5;
     *}
     */
    public static int heif_compression_VVC() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_EVC = 6;
     *}
     */
    public static int heif_compression_EVC() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_JPEG2000 = 7;
     *}
     */
    public static int heif_compression_JPEG2000() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_compression_format.heif_compression_uncompressed = 8;
     *}
     */
    public static int heif_compression_uncompressed() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_undefined = 99;
     *}
     */
    public static int heif_chroma_undefined() {
        return (int) 99L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_monochrome = 0;
     *}
     */
    public static int heif_chroma_monochrome() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_420 = 1;
     *}
     */
    public static int heif_chroma_420() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_422 = 2;
     *}
     */
    public static int heif_chroma_422() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_444 = 3;
     *}
     */
    public static int heif_chroma_444() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_interleaved_RGB = 10;
     *}
     */
    public static int heif_chroma_interleaved_RGB() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_interleaved_RGBA = 11;
     *}
     */
    public static int heif_chroma_interleaved_RGBA() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBB_BE = 12;
     *}
     */
    public static int heif_chroma_interleaved_RRGGBB_BE() {
        return (int) 12L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBBAA_BE = 13;
     *}
     */
    public static int heif_chroma_interleaved_RRGGBBAA_BE() {
        return (int) 13L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBB_LE = 14;
     *}
     */
    public static int heif_chroma_interleaved_RRGGBB_LE() {
        return (int) 14L;
    }

    /**
     * {@snippet :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBBAA_LE = 15;
     *}
     */
    public static int heif_chroma_interleaved_RRGGBBAA_LE() {
        return (int) 15L;
    }

    /**
     * {@snippet :
     * enum heif_colorspace.heif_colorspace_undefined = 99;
     *}
     */
    public static int heif_colorspace_undefined() {
        return (int) 99L;
    }

    /**
     * {@snippet :
     * enum heif_colorspace.heif_colorspace_YCbCr = 0;
     *}
     */
    public static int heif_colorspace_YCbCr() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_colorspace.heif_colorspace_RGB = 1;
     *}
     */
    public static int heif_colorspace_RGB() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_colorspace.heif_colorspace_monochrome = 2;
     *}
     */
    public static int heif_colorspace_monochrome() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_Y = 0;
     *}
     */
    public static int heif_channel_Y() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_Cb = 1;
     *}
     */
    public static int heif_channel_Cb() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_Cr = 2;
     *}
     */
    public static int heif_channel_Cr() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_R = 3;
     *}
     */
    public static int heif_channel_R() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_G = 4;
     *}
     */
    public static int heif_channel_G() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_B = 5;
     *}
     */
    public static int heif_channel_B() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_Alpha = 6;
     *}
     */
    public static int heif_channel_Alpha() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_channel.heif_channel_interleaved = 10;
     *}
     */
    public static int heif_channel_interleaved() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * enum heif_progress_step.heif_progress_step_total = 0;
     *}
     */
    public static int heif_progress_step_total() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_progress_step.heif_progress_step_load_tile = 1;
     *}
     */
    public static int heif_progress_step_load_tile() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_chroma_downsampling_algorithm.heif_chroma_downsampling_nearest_neighbor = 1;
     *}
     */
    public static int heif_chroma_downsampling_nearest_neighbor() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_chroma_downsampling_algorithm.heif_chroma_downsampling_average = 2;
     *}
     */
    public static int heif_chroma_downsampling_average() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_chroma_downsampling_algorithm.heif_chroma_downsampling_sharp_yuv = 3;
     *}
     */
    public static int heif_chroma_downsampling_sharp_yuv() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_chroma_upsampling_algorithm.heif_chroma_upsampling_nearest_neighbor = 1;
     *}
     */
    public static int heif_chroma_upsampling_nearest_neighbor() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_chroma_upsampling_algorithm.heif_chroma_upsampling_bilinear = 2;
     *}
     */
    public static int heif_chroma_upsampling_bilinear() {
        return (int) 2L;
    }

    public static MethodHandle heif_decoding_options_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1, "heif_decoding_options_alloc");
    }

    /**
     * {@snippet :
     * struct heif_decoding_options* heif_decoding_options_alloc(,...);
     *}
     */
    public static MemorySegment heif_decoding_options_alloc(Object... x0) {
        var mh$ = heif_decoding_options_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_decoding_options_free$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2, "heif_decoding_options_free");
    }

    /**
     * {@snippet :
     * void heif_decoding_options_free(struct heif_decoding_options*);
     *}
     */
    public static void heif_decoding_options_free(MemorySegment x0) {
        var mh$ = heif_decoding_options_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_decode_image$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4, "heif_decode_image");
    }

    /**
     * {@snippet :
     * struct heif_error heif_decode_image(struct heif_image_handle* in_handle, struct heif_image** out_img, enum heif_colorspace colorspace, enum heif_chroma chroma, struct heif_decoding_options* options);
     *}
     */
    public static MemorySegment heif_decode_image(SegmentAllocator allocator, MemorySegment in_handle, MemorySegment out_img, int colorspace, int chroma,
                                                  MemorySegment options) {
        var mh$ = heif_decode_image$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, in_handle, out_img, colorspace, chroma, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_colorspace$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5, "heif_image_get_colorspace");
    }

    /**
     * {@snippet :
     * enum heif_colorspace heif_image_get_colorspace(struct heif_image*);
     *}
     */
    public static int heif_image_get_colorspace(MemorySegment x0) {
        var mh$ = heif_image_get_colorspace$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_chroma_format$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0, "heif_image_get_chroma_format");
    }

    /**
     * {@snippet :
     * enum heif_chroma heif_image_get_chroma_format(struct heif_image*);
     *}
     */
    public static int heif_image_get_chroma_format(MemorySegment x0) {
        var mh$ = heif_image_get_chroma_format$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_width$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1, "heif_image_get_width");
    }

    /**
     * {@snippet :
     * int heif_image_get_width(struct heif_image*, enum heif_channel channel);
     *}
     */
    public static int heif_image_get_width(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_width$MH();
        try {
            return (int) mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_height$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2, "heif_image_get_height");
    }

    /**
     * {@snippet :
     * int heif_image_get_height(struct heif_image*, enum heif_channel channel);
     *}
     */
    public static int heif_image_get_height(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_height$MH();
        try {
            return (int) mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_primary_width$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3, "heif_image_get_primary_width");
    }

    /**
     * {@snippet :
     * int heif_image_get_primary_width(struct heif_image*);
     *}
     */
    public static int heif_image_get_primary_width(MemorySegment x0) {
        var mh$ = heif_image_get_primary_width$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_primary_height$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4, "heif_image_get_primary_height");
    }

    /**
     * {@snippet :
     * int heif_image_get_primary_height(struct heif_image*);
     *}
     */
    public static int heif_image_get_primary_height(MemorySegment x0) {
        var mh$ = heif_image_get_primary_height$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_crop$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$6, "heif_image_crop");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_crop(struct heif_image* img, int left, int right, int top, int bottom);
     *}
     */
    public static MemorySegment heif_image_crop(SegmentAllocator allocator, MemorySegment img, int left, int right, int top, int bottom) {
        var mh$ = heif_image_crop$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, img, left, right, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0, "heif_image_get_bits_per_pixel");
    }

    /**
     * {@snippet :
     * int heif_image_get_bits_per_pixel(struct heif_image*, enum heif_channel channel);
     *}
     */
    public static int heif_image_get_bits_per_pixel(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_bits_per_pixel$MH();
        try {
            return (int) mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_bits_per_pixel_range$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1, "heif_image_get_bits_per_pixel_range");
    }

    /**
     * {@snippet :
     * int heif_image_get_bits_per_pixel_range(struct heif_image*, enum heif_channel channel);
     *}
     */
    public static int heif_image_get_bits_per_pixel_range(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_bits_per_pixel_range$MH();
        try {
            return (int) mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_has_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2, "heif_image_has_channel");
    }

    /**
     * {@snippet :
     * int heif_image_has_channel(struct heif_image*, enum heif_channel channel);
     *}
     */
    public static int heif_image_has_channel(MemorySegment x0, int channel) {
        var mh$ = heif_image_has_channel$MH();
        try {
            return (int) mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_plane_readonly$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4, "heif_image_get_plane_readonly");
    }

    /**
     * {@snippet :
     * const uint8_t* heif_image_get_plane_readonly(struct heif_image*, enum heif_channel channel, int* out_stride);
     *}
     */
    public static MemorySegment heif_image_get_plane_readonly(MemorySegment x0, int channel, MemorySegment out_stride) {
        var mh$ = heif_image_get_plane_readonly$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0, channel, out_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5, "heif_image_get_plane");
    }

    /**
     * {@snippet :
     * uint8_t* heif_image_get_plane(struct heif_image*, enum heif_channel channel, int* out_stride);
     *}
     */
    public static MemorySegment heif_image_get_plane(MemorySegment x0, int channel, MemorySegment out_stride) {
        var mh$ = heif_image_get_plane$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0, channel, out_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_scale_image$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0, "heif_image_scale_image");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_scale_image(struct heif_image* input, struct heif_image** output, int width, int height, struct heif_scaling_options* options);
     *}
     */
    public static MemorySegment heif_image_scale_image(SegmentAllocator allocator, MemorySegment input, MemorySegment output, int width, int height, MemorySegment options) {
        var mh$ = heif_image_scale_image$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, input, output, width, height, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_set_raw_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2, "heif_image_set_raw_color_profile");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_set_raw_color_profile(struct heif_image* image, char* profile_type_fourcc_string, void* profile_data, const size_t profile_size);
     *}
     */
    public static MemorySegment heif_image_set_raw_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment profile_type_fourcc_string,
                                                                 MemorySegment profile_data, long profile_size) {
        var mh$ = heif_image_set_raw_color_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image, profile_type_fourcc_string, profile_data, profile_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_set_nclx_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3, "heif_image_set_nclx_color_profile");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_set_nclx_color_profile(struct heif_image* image, struct heif_color_profile_nclx* color_profile);
     *}
     */
    public static MemorySegment heif_image_set_nclx_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment color_profile) {
        var mh$ = heif_image_set_nclx_color_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image, color_profile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_decoding_warnings$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4, "heif_image_get_decoding_warnings");
    }

    /**
     * {@snippet :
     * int heif_image_get_decoding_warnings(struct heif_image* image, int first_warning_idx, struct heif_error* out_warnings, int max_output_buffer_entries);
     *}
     */
    public static int heif_image_get_decoding_warnings(MemorySegment image, int first_warning_idx, MemorySegment out_warnings, int max_output_buffer_entries) {
        var mh$ = heif_image_get_decoding_warnings$MH();
        try {
            return (int) mh$.invokeExact(image, first_warning_idx, out_warnings, max_output_buffer_entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_add_decoding_warning$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$6, "heif_image_add_decoding_warning");
    }

    /**
     * {@snippet :
     * void heif_image_add_decoding_warning(struct heif_image* image, struct heif_error err);
     *}
     */
    public static void heif_image_add_decoding_warning(MemorySegment image, MemorySegment err) {
        var mh$ = heif_image_add_decoding_warning$MH();
        try {
            mh$.invokeExact(image, err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_release$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0, "heif_image_release");
    }

    /**
     * {@snippet :
     * void heif_image_release(struct heif_image*);
     *}
     */
    public static void heif_image_release(MemorySegment x0) {
        var mh$ = heif_image_release$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_has_content_light_level$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4, "heif_image_has_content_light_level");
    }

    /**
     * {@snippet :
     * int heif_image_has_content_light_level(struct heif_image*);
     *}
     */
    public static int heif_image_has_content_light_level(MemorySegment x0) {
        var mh$ = heif_image_has_content_light_level$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_content_light_level$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5, "heif_image_get_content_light_level");
    }

    /**
     * {@snippet :
     * void heif_image_get_content_light_level(struct heif_image*, struct heif_content_light_level* out);
     *}
     */
    public static void heif_image_get_content_light_level(MemorySegment x0, MemorySegment out) {
        var mh$ = heif_image_get_content_light_level$MH();
        try {
            mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_set_content_light_level$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0, "heif_image_set_content_light_level");
    }

    /**
     * {@snippet :
     * void heif_image_set_content_light_level(struct heif_image*, struct heif_content_light_level* in);
     *}
     */
    public static void heif_image_set_content_light_level(MemorySegment x0, MemorySegment in) {
        var mh$ = heif_image_set_content_light_level$MH();
        try {
            mh$.invokeExact(x0, in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_has_mastering_display_colour_volume$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5, "heif_image_has_mastering_display_colour_volume");
    }

    /**
     * {@snippet :
     * int heif_image_has_mastering_display_colour_volume(struct heif_image*);
     *}
     */
    public static int heif_image_has_mastering_display_colour_volume(MemorySegment x0) {
        var mh$ = heif_image_has_mastering_display_colour_volume$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_mastering_display_colour_volume$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0, "heif_image_get_mastering_display_colour_volume");
    }

    /**
     * {@snippet :
     * void heif_image_get_mastering_display_colour_volume(struct heif_image*, struct heif_mastering_display_colour_volume* out);
     *}
     */
    public static void heif_image_get_mastering_display_colour_volume(MemorySegment x0, MemorySegment out) {
        var mh$ = heif_image_get_mastering_display_colour_volume$MH();
        try {
            mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_set_mastering_display_colour_volume$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1, "heif_image_set_mastering_display_colour_volume");
    }

    /**
     * {@snippet :
     * void heif_image_set_mastering_display_colour_volume(struct heif_image*, struct heif_mastering_display_colour_volume* in);
     *}
     */
    public static void heif_image_set_mastering_display_colour_volume(MemorySegment x0, MemorySegment in) {
        var mh$ = heif_image_set_mastering_display_colour_volume$MH();
        try {
            mh$.invokeExact(x0, in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_mastering_display_colour_volume_decode$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2, "heif_mastering_display_colour_volume_decode");
    }

    /**
     * {@snippet :
     * struct heif_error heif_mastering_display_colour_volume_decode(struct heif_mastering_display_colour_volume* in, struct heif_decoded_mastering_display_colour_volume* out);
     *}
     */
    public static MemorySegment heif_mastering_display_colour_volume_decode(SegmentAllocator allocator, MemorySegment in, MemorySegment out) {
        var mh$ = heif_mastering_display_colour_volume_decode$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, in, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_get_pixel_aspect_ratio$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4, "heif_image_get_pixel_aspect_ratio");
    }

    /**
     * {@snippet :
     * void heif_image_get_pixel_aspect_ratio(struct heif_image*, uint32_t* aspect_h, uint32_t* aspect_v);
     *}
     */
    public static void heif_image_get_pixel_aspect_ratio(MemorySegment x0, MemorySegment aspect_h, MemorySegment aspect_v) {
        var mh$ = heif_image_get_pixel_aspect_ratio$MH();
        try {
            mh$.invokeExact(x0, aspect_h, aspect_v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_set_pixel_aspect_ratio$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$6, "heif_image_set_pixel_aspect_ratio");
    }

    /**
     * {@snippet :
     * void heif_image_set_pixel_aspect_ratio(struct heif_image*, uint32_t aspect_h, uint32_t aspect_v);
     *}
     */
    public static void heif_image_set_pixel_aspect_ratio(MemorySegment x0, int aspect_h, int aspect_v) {
        var mh$ = heif_image_set_pixel_aspect_ratio$MH();
        try {
            mh$.invokeExact(x0, aspect_h, aspect_v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_write_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0, "heif_context_write_to_file");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_write_to_file(struct heif_context*, char* filename);
     *}
     */
    public static MemorySegment heif_context_write_to_file(SegmentAllocator allocator, MemorySegment x1, MemorySegment filename) {
        var mh$ = heif_context_write_to_file$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_write$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0, "heif_context_write");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_write(struct heif_context*, struct heif_writer* writer, void* userdata);
     *}
     */
    public static MemorySegment heif_context_write(SegmentAllocator allocator, MemorySegment x1, MemorySegment writer, MemorySegment userdata) {
        var mh$ = heif_context_write$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, writer, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_decoder_descriptors$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2, "heif_get_decoder_descriptors");
    }

    /**
     * {@snippet :
     * int heif_get_decoder_descriptors(enum heif_compression_format format_filter, struct heif_decoder_descriptor** out_decoders, int count);
     *}
     */
    public static int heif_get_decoder_descriptors(int format_filter, MemorySegment out_decoders, int count) {
        var mh$ = heif_get_decoder_descriptors$MH();
        try {
            return (int) mh$.invokeExact(format_filter, out_decoders, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_decoder_descriptor_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4, "heif_decoder_descriptor_get_name");
    }

    /**
     * {@snippet :
     * char* heif_decoder_descriptor_get_name(struct heif_decoder_descriptor*);
     *}
     */
    public static MemorySegment heif_decoder_descriptor_get_name(MemorySegment x0) {
        var mh$ = heif_decoder_descriptor_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_decoder_descriptor_get_id_name$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5, "heif_decoder_descriptor_get_id_name");
    }

    /**
     * {@snippet :
     * char* heif_decoder_descriptor_get_id_name(struct heif_decoder_descriptor*);
     *}
     */
    public static MemorySegment heif_decoder_descriptor_get_id_name(MemorySegment x0) {
        var mh$ = heif_decoder_descriptor_get_id_name$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_encoder_descriptors$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1, "heif_context_get_encoder_descriptors");
    }

    /**
     * {@snippet :
     * int heif_context_get_encoder_descriptors(struct heif_context*, enum heif_compression_format format_filter, char* name_filter, struct heif_encoder_descriptor** out_encoders, int count);
     *}
     */
    public static int heif_context_get_encoder_descriptors(MemorySegment x0, int format_filter, MemorySegment name_filter, MemorySegment out_encoders, int count) {
        var mh$ = heif_context_get_encoder_descriptors$MH();
        try {
            return (int) mh$.invokeExact(x0, format_filter, name_filter, out_encoders, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_get_encoder_descriptors$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3, "heif_get_encoder_descriptors");
    }

    /**
     * {@snippet :
     * int heif_get_encoder_descriptors(enum heif_compression_format format_filter, char* name_filter, struct heif_encoder_descriptor** out_encoders, int count);
     *}
     */
    public static int heif_get_encoder_descriptors(int format_filter, MemorySegment name_filter, MemorySegment out_encoders, int count) {
        var mh$ = heif_get_encoder_descriptors$MH();
        try {
            return (int) mh$.invokeExact(format_filter, name_filter, out_encoders, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4, "heif_encoder_descriptor_get_name");
    }

    /**
     * {@snippet :
     * char* heif_encoder_descriptor_get_name(struct heif_encoder_descriptor*);
     *}
     */
    public static MemorySegment heif_encoder_descriptor_get_name(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_get_id_name$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5, "heif_encoder_descriptor_get_id_name");
    }

    /**
     * {@snippet :
     * char* heif_encoder_descriptor_get_id_name(struct heif_encoder_descriptor*);
     *}
     */
    public static MemorySegment heif_encoder_descriptor_get_id_name(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_get_id_name$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_get_compression_format$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0, "heif_encoder_descriptor_get_compression_format");
    }

    /**
     * {@snippet :
     * enum heif_compression_format heif_encoder_descriptor_get_compression_format(struct heif_encoder_descriptor*);
     *}
     */
    public static int heif_encoder_descriptor_get_compression_format(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_get_compression_format$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_supports_lossy_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1, "heif_encoder_descriptor_supports_lossy_compression");
    }

    /**
     * {@snippet :
     * int heif_encoder_descriptor_supports_lossy_compression(struct heif_encoder_descriptor*);
     *}
     */
    public static int heif_encoder_descriptor_supports_lossy_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supports_lossy_compression$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_supports_lossless_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2, "heif_encoder_descriptor_supports_lossless_compression");
    }

    /**
     * {@snippet :
     * int heif_encoder_descriptor_supports_lossless_compression(struct heif_encoder_descriptor*);
     *}
     */
    public static int heif_encoder_descriptor_supports_lossless_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supports_lossless_compression$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3, "heif_context_get_encoder");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_get_encoder(struct heif_context* context, struct heif_encoder_descriptor*, struct heif_encoder** out_encoder);
     *}
     */
    public static MemorySegment heif_context_get_encoder(SegmentAllocator allocator, MemorySegment context, MemorySegment x2, MemorySegment out_encoder) {
        var mh$ = heif_context_get_encoder$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, context, x2, out_encoder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_have_decoder_for_format$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5, "heif_have_decoder_for_format");
    }

    /**
     * {@snippet :
     * int heif_have_decoder_for_format(enum heif_compression_format format);
     *}
     */
    public static int heif_have_decoder_for_format(int format) {
        var mh$ = heif_have_decoder_for_format$MH();
        try {
            return (int) mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_have_encoder_for_format$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0, "heif_have_encoder_for_format");
    }

    /**
     * {@snippet :
     * int heif_have_encoder_for_format(enum heif_compression_format format);
     *}
     */
    public static int heif_have_encoder_for_format(int format) {
        var mh$ = heif_have_encoder_for_format$MH();
        try {
            return (int) mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_encoder_for_format$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1, "heif_context_get_encoder_for_format");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_get_encoder_for_format(struct heif_context* context, enum heif_compression_format format, struct heif_encoder**);
     *}
     */
    public static MemorySegment heif_context_get_encoder_for_format(SegmentAllocator allocator, MemorySegment context, int format, MemorySegment x3) {
        var mh$ = heif_context_get_encoder_for_format$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, context, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_release$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2, "heif_encoder_release");
    }

    /**
     * {@snippet :
     * void heif_encoder_release(struct heif_encoder*);
     *}
     */
    public static void heif_encoder_release(MemorySegment x0) {
        var mh$ = heif_encoder_release$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3, "heif_encoder_get_name");
    }

    /**
     * {@snippet :
     * char* heif_encoder_get_name(struct heif_encoder*);
     *}
     */
    public static MemorySegment heif_encoder_get_name(MemorySegment x0) {
        var mh$ = heif_encoder_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_lossy_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5, "heif_encoder_set_lossy_quality");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_lossy_quality(struct heif_encoder*, int quality);
     *}
     */
    public static MemorySegment heif_encoder_set_lossy_quality(SegmentAllocator allocator, MemorySegment x1, int quality) {
        var mh$ = heif_encoder_set_lossy_quality$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_lossless$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0, "heif_encoder_set_lossless");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_lossless(struct heif_encoder*, int enable);
     *}
     */
    public static MemorySegment heif_encoder_set_lossless(SegmentAllocator allocator, MemorySegment x1, int enable) {
        var mh$ = heif_encoder_set_lossless$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_logging_level$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1, "heif_encoder_set_logging_level");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_logging_level(struct heif_encoder*, int level);
     *}
     */
    public static MemorySegment heif_encoder_set_logging_level(SegmentAllocator allocator, MemorySegment x1, int level) {
        var mh$ = heif_encoder_set_logging_level$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_list_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2, "heif_encoder_list_parameters");
    }

    /**
     * {@snippet :
     * struct heif_encoder_parameter** heif_encoder_list_parameters(struct heif_encoder*);
     *}
     */
    public static MemorySegment heif_encoder_list_parameters(MemorySegment x0) {
        var mh$ = heif_encoder_list_parameters$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3, "heif_encoder_parameter_get_name");
    }

    /**
     * {@snippet :
     * char* heif_encoder_parameter_get_name(struct heif_encoder_parameter*);
     *}
     */
    public static MemorySegment heif_encoder_parameter_get_name(MemorySegment x0) {
        var mh$ = heif_encoder_parameter_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_encoder_parameter_type.heif_encoder_parameter_type_integer = 1;
     *}
     */
    public static int heif_encoder_parameter_type_integer() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_encoder_parameter_type.heif_encoder_parameter_type_boolean = 2;
     *}
     */
    public static int heif_encoder_parameter_type_boolean() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_encoder_parameter_type.heif_encoder_parameter_type_string = 3;
     *}
     */
    public static int heif_encoder_parameter_type_string() {
        return (int) 3L;
    }

    public static MethodHandle heif_encoder_parameter_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4, "heif_encoder_parameter_get_type");
    }

    /**
     * {@snippet :
     * enum heif_encoder_parameter_type heif_encoder_parameter_get_type(struct heif_encoder_parameter*);
     *}
     */
    public static int heif_encoder_parameter_get_type(MemorySegment x0) {
        var mh$ = heif_encoder_parameter_get_type$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_get_valid_integer_range$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5, "heif_encoder_parameter_get_valid_integer_range");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_parameter_get_valid_integer_range(struct heif_encoder_parameter*, int* have_minimum_maximum, int* minimum, int* maximum);
     *}
     */
    public static MemorySegment heif_encoder_parameter_get_valid_integer_range(SegmentAllocator allocator, MemorySegment x1, MemorySegment have_minimum_maximum,
                                                                               MemorySegment minimum, MemorySegment maximum) {
        var mh$ = heif_encoder_parameter_get_valid_integer_range$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, have_minimum_maximum, minimum, maximum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_get_valid_integer_values$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1, "heif_encoder_parameter_get_valid_integer_values");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_parameter_get_valid_integer_values(struct heif_encoder_parameter*, int* have_minimum, int* have_maximum, int* minimum, int* maximum, int* num_valid_values, int** out_integer_array);
     *}
     */
    public static MemorySegment heif_encoder_parameter_get_valid_integer_values(SegmentAllocator allocator, MemorySegment x1, MemorySegment have_minimum,
                                                                                MemorySegment have_maximum, MemorySegment minimum, MemorySegment maximum,
                                                                                MemorySegment num_valid_values, MemorySegment out_integer_array) {
        var mh$ = heif_encoder_parameter_get_valid_integer_values$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, have_minimum, have_maximum, minimum, maximum, num_valid_values, out_integer_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_get_valid_string_values$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2, "heif_encoder_parameter_get_valid_string_values");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_parameter_get_valid_string_values(struct heif_encoder_parameter*, char*** out_stringarray);
     *}
     */
    public static MemorySegment heif_encoder_parameter_get_valid_string_values(SegmentAllocator allocator, MemorySegment x1, MemorySegment out_stringarray) {
        var mh$ = heif_encoder_parameter_get_valid_string_values$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, out_stringarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_parameter_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4, "heif_encoder_set_parameter_integer");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_parameter_integer(struct heif_encoder*, char* parameter_name, int value);
     *}
     */
    public static MemorySegment heif_encoder_set_parameter_integer(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, int value) {
        var mh$ = heif_encoder_set_parameter_integer$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_get_parameter_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5, "heif_encoder_get_parameter_integer");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_get_parameter_integer(struct heif_encoder*, char* parameter_name, int* value);
     *}
     */
    public static MemorySegment heif_encoder_get_parameter_integer(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_get_parameter_integer$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_integer_valid_range$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1, "heif_encoder_parameter_integer_valid_range");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_parameter_integer_valid_range(struct heif_encoder*, char* parameter_name, int* have_minimum_maximum, int* minimum, int* maximum);
     *}
     */
    public static MemorySegment heif_encoder_parameter_integer_valid_range(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name,
                                                                           MemorySegment have_minimum_maximum, MemorySegment minimum, MemorySegment maximum) {
        var mh$ = heif_encoder_parameter_integer_valid_range$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, have_minimum_maximum, minimum, maximum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_parameter_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2, "heif_encoder_set_parameter_boolean");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_parameter_boolean(struct heif_encoder*, char* parameter_name, int value);
     *}
     */
    public static MemorySegment heif_encoder_set_parameter_boolean(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, int value) {
        var mh$ = heif_encoder_set_parameter_boolean$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_get_parameter_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3, "heif_encoder_get_parameter_boolean");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_get_parameter_boolean(struct heif_encoder*, char* parameter_name, int* value);
     *}
     */
    public static MemorySegment heif_encoder_get_parameter_boolean(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_get_parameter_boolean$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_parameter_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4, "heif_encoder_set_parameter_string");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_parameter_string(struct heif_encoder*, char* parameter_name, char* value);
     *}
     */
    public static MemorySegment heif_encoder_set_parameter_string(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_set_parameter_string$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_get_parameter_string$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5, "heif_encoder_get_parameter_string");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_get_parameter_string(struct heif_encoder*, char* parameter_name, char* value, int value_size);
     *}
     */
    public static MemorySegment heif_encoder_get_parameter_string(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, MemorySegment value,
                                                                  int value_size) {
        var mh$ = heif_encoder_get_parameter_string$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value, value_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_string_valid_values$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0, "heif_encoder_parameter_string_valid_values");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_parameter_string_valid_values(struct heif_encoder*, char* parameter_name, char*** out_stringarray);
     *}
     */
    public static MemorySegment heif_encoder_parameter_string_valid_values(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name,
                                                                           MemorySegment out_stringarray) {
        var mh$ = heif_encoder_parameter_string_valid_values$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, out_stringarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_parameter_integer_valid_values$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2, "heif_encoder_parameter_integer_valid_values");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_parameter_integer_valid_values(struct heif_encoder*, char* parameter_name, int* have_minimum, int* have_maximum, int* minimum, int* maximum, int* num_valid_values, int** out_integer_array);
     *}
     */
    public static MemorySegment heif_encoder_parameter_integer_valid_values(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name,
                                                                            MemorySegment have_minimum, MemorySegment have_maximum, MemorySegment minimum,
                                                                            MemorySegment maximum, MemorySegment num_valid_values, MemorySegment out_integer_array) {
        var mh$ = heif_encoder_parameter_integer_valid_values$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, have_minimum, have_maximum, minimum, maximum, num_valid_values,
                out_integer_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_set_parameter$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3, "heif_encoder_set_parameter");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_set_parameter(struct heif_encoder*, char* parameter_name, char* value);
     *}
     */
    public static MemorySegment heif_encoder_set_parameter(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_set_parameter$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_get_parameter$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4, "heif_encoder_get_parameter");
    }

    /**
     * {@snippet :
     * struct heif_error heif_encoder_get_parameter(struct heif_encoder*, char* parameter_name, char* value_ptr, int value_size);
     *}
     */
    public static MemorySegment heif_encoder_get_parameter(SegmentAllocator allocator, MemorySegment x1, MemorySegment parameter_name, MemorySegment value_ptr,
                                                           int value_size) {
        var mh$ = heif_encoder_get_parameter$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, parameter_name, value_ptr, value_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_has_default$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5, "heif_encoder_has_default");
    }

    /**
     * {@snippet :
     * int heif_encoder_has_default(struct heif_encoder*, char* parameter_name);
     *}
     */
    public static int heif_encoder_has_default(MemorySegment x0, MemorySegment parameter_name) {
        var mh$ = heif_encoder_has_default$MH();
        try {
            return (int) mh$.invokeExact(x0, parameter_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_normal = 1;
     *}
     */
    public static int heif_orientation_normal() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_flip_horizontally = 2;
     *}
     */
    public static int heif_orientation_flip_horizontally() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_rotate_180 = 3;
     *}
     */
    public static int heif_orientation_rotate_180() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_flip_vertically = 4;
     *}
     */
    public static int heif_orientation_flip_vertically() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_rotate_90_cw_then_flip_horizontally = 5;
     *}
     */
    public static int heif_orientation_rotate_90_cw_then_flip_horizontally() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_rotate_90_cw = 6;
     *}
     */
    public static int heif_orientation_rotate_90_cw() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_rotate_90_cw_then_flip_vertically = 7;
     *}
     */
    public static int heif_orientation_rotate_90_cw_then_flip_vertically() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * enum heif_orientation.heif_orientation_rotate_270_cw = 8;
     *}
     */
    public static int heif_orientation_rotate_270_cw() {
        return (int) 8L;
    }

    public static MethodHandle heif_encoding_options_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2, "heif_encoding_options_alloc");
    }

    /**
     * {@snippet :
     * struct heif_encoding_options* heif_encoding_options_alloc(,...);
     *}
     */
    public static MemorySegment heif_encoding_options_alloc(Object... x0) {
        var mh$ = heif_encoding_options_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoding_options_free$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3, "heif_encoding_options_free");
    }

    /**
     * {@snippet :
     * void heif_encoding_options_free(struct heif_encoding_options*);
     *}
     */
    public static void heif_encoding_options_free(MemorySegment x0) {
        var mh$ = heif_encoding_options_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_encode_image$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4, "heif_context_encode_image");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_encode_image(struct heif_context*, struct heif_image* image, struct heif_encoder* encoder, struct heif_encoding_options* options, struct heif_image_handle** out_image_handle);
     *}
     */
    public static MemorySegment heif_context_encode_image(SegmentAllocator allocator, MemorySegment x1, MemorySegment image, MemorySegment encoder, MemorySegment options,
                                                          MemorySegment out_image_handle) {
        var mh$ = heif_context_encode_image$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, image, encoder, options, out_image_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_set_primary_image$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5, "heif_context_set_primary_image");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_set_primary_image(struct heif_context*, struct heif_image_handle* image_handle);
     *}
     */
    public static MemorySegment heif_context_set_primary_image(SegmentAllocator allocator, MemorySegment x1, MemorySegment image_handle) {
        var mh$ = heif_context_set_primary_image$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, image_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_encode_thumbnail$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1, "heif_context_encode_thumbnail");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_encode_thumbnail(struct heif_context*, struct heif_image* image, struct heif_image_handle* master_image_handle, struct heif_encoder* encoder, struct heif_encoding_options* options, int bbox_size, struct heif_image_handle** out_thumb_image_handle);
     *}
     */
    public static MemorySegment heif_context_encode_thumbnail(SegmentAllocator allocator, MemorySegment x1, MemorySegment image, MemorySegment master_image_handle,
                                                              MemorySegment encoder, MemorySegment options, int bbox_size, MemorySegment out_thumb_image_handle) {
        var mh$ = heif_context_encode_thumbnail$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, image, master_image_handle, encoder, options, bbox_size, out_thumb_image_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_metadata_compression.heif_metadata_compression_off = 0;
     *}
     */
    public static int heif_metadata_compression_off() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_metadata_compression.heif_metadata_compression_auto = 1;
     *}
     */
    public static int heif_metadata_compression_auto() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_metadata_compression.heif_metadata_compression_deflate = 2;
     *}
     */
    public static int heif_metadata_compression_deflate() {
        return (int) 2L;
    }

    public static MethodHandle heif_context_assign_thumbnail$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2, "heif_context_assign_thumbnail");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_assign_thumbnail(struct heif_context*, struct heif_image_handle* master_image, struct heif_image_handle* thumbnail_image);
     *}
     */
    public static MemorySegment heif_context_assign_thumbnail(SegmentAllocator allocator, MemorySegment x1, MemorySegment master_image, MemorySegment thumbnail_image) {
        var mh$ = heif_context_assign_thumbnail$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, master_image, thumbnail_image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_add_exif_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3, "heif_context_add_exif_metadata");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_add_exif_metadata(struct heif_context*, struct heif_image_handle* image_handle, void* data, int size);
     *}
     */
    public static MemorySegment heif_context_add_exif_metadata(SegmentAllocator allocator, MemorySegment x1, MemorySegment image_handle, MemorySegment data, int size) {
        var mh$ = heif_context_add_exif_metadata$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, image_handle, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_add_XMP_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4, "heif_context_add_XMP_metadata");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_add_XMP_metadata(struct heif_context*, struct heif_image_handle* image_handle, void* data, int size);
     *}
     */
    public static MemorySegment heif_context_add_XMP_metadata(SegmentAllocator allocator, MemorySegment x1, MemorySegment image_handle, MemorySegment data, int size) {
        var mh$ = heif_context_add_XMP_metadata$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, image_handle, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_add_XMP_metadata2$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$6, "heif_context_add_XMP_metadata2");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_add_XMP_metadata2(struct heif_context*, struct heif_image_handle* image_handle, void* data, int size, enum heif_metadata_compression compression);
     *}
     */
    public static MemorySegment heif_context_add_XMP_metadata2(SegmentAllocator allocator, MemorySegment x1, MemorySegment image_handle, MemorySegment data, int size,
                                                               int compression) {
        var mh$ = heif_context_add_XMP_metadata2$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, image_handle, data, size, compression);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_add_generic_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1, "heif_context_add_generic_metadata");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_add_generic_metadata(struct heif_context* ctx, struct heif_image_handle* image_handle, void* data, int size, char* item_type, char* content_type);
     *}
     */
    public static MemorySegment heif_context_add_generic_metadata(SegmentAllocator allocator, MemorySegment ctx, MemorySegment image_handle, MemorySegment data, int size,
                                                                  MemorySegment item_type, MemorySegment content_type) {
        var mh$ = heif_context_add_generic_metadata$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, ctx, image_handle, data, size, item_type, content_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_create$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3, "heif_image_create");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_create(int width, int height, enum heif_colorspace colorspace, enum heif_chroma chroma, struct heif_image** out_image);
     *}
     */
    public static MemorySegment heif_image_create(SegmentAllocator allocator, int width, int height, int colorspace, int chroma, MemorySegment out_image) {
        var mh$ = heif_image_create$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, width, height, colorspace, chroma, out_image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_add_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4, "heif_image_add_plane");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_add_plane(struct heif_image* image, enum heif_channel channel, int width, int height, int bit_depth);
     *}
     */
    public static MemorySegment heif_image_add_plane(SegmentAllocator allocator, MemorySegment image, int channel, int width, int height, int bit_depth) {
        var mh$ = heif_image_add_plane$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image, channel, width, height, bit_depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_set_premultiplied_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5, "heif_image_set_premultiplied_alpha");
    }

    /**
     * {@snippet :
     * void heif_image_set_premultiplied_alpha(struct heif_image* image, int is_premultiplied_alpha);
     *}
     */
    public static void heif_image_set_premultiplied_alpha(MemorySegment image, int is_premultiplied_alpha) {
        var mh$ = heif_image_set_premultiplied_alpha$MH();
        try {
            mh$.invokeExact(image, is_premultiplied_alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_is_premultiplied_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0, "heif_image_is_premultiplied_alpha");
    }

    /**
     * {@snippet :
     * int heif_image_is_premultiplied_alpha(struct heif_image* image);
     *}
     */
    public static int heif_image_is_premultiplied_alpha(MemorySegment image) {
        var mh$ = heif_image_is_premultiplied_alpha$MH();
        try {
            return (int) mh$.invokeExact(image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_extend_padding_to_size$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2, "heif_image_extend_padding_to_size");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_extend_padding_to_size(struct heif_image* image, int min_physical_width, int min_physical_height);
     *}
     */
    public static MemorySegment heif_image_extend_padding_to_size(SegmentAllocator allocator, MemorySegment image, int min_physical_width, int min_physical_height) {
        var mh$ = heif_image_extend_padding_to_size$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image, min_physical_width, min_physical_height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_register_decoder$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3, "heif_register_decoder");
    }

    /**
     * {@snippet :
     * struct heif_error heif_register_decoder(struct heif_context* heif, struct heif_decoder_plugin*);
     *}
     */
    public static MemorySegment heif_register_decoder(SegmentAllocator allocator, MemorySegment heif, MemorySegment x2) {
        var mh$ = heif_register_decoder$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, heif, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_register_decoder_plugin$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4, "heif_register_decoder_plugin");
    }

    /**
     * {@snippet :
     * struct heif_error heif_register_decoder_plugin(struct heif_decoder_plugin*);
     *}
     */
    public static MemorySegment heif_register_decoder_plugin(SegmentAllocator allocator, MemorySegment x1) {
        var mh$ = heif_register_decoder_plugin$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_register_encoder_plugin$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5, "heif_register_encoder_plugin");
    }

    /**
     * {@snippet :
     * struct heif_error heif_register_encoder_plugin(struct heif_encoder_plugin*);
     *}
     */
    public static MemorySegment heif_register_encoder_plugin(SegmentAllocator allocator, MemorySegment x1) {
        var mh$ = heif_register_encoder_plugin$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_supportes_lossy_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0, "heif_encoder_descriptor_supportes_lossy_compression");
    }

    /**
     * {@snippet :
     * int heif_encoder_descriptor_supportes_lossy_compression(struct heif_encoder_descriptor*);
     *}
     */
    public static int heif_encoder_descriptor_supportes_lossy_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supportes_lossy_compression$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_encoder_descriptor_supportes_lossless_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1, "heif_encoder_descriptor_supportes_lossless_compression");
    }

    /**
     * {@snippet :
     * int heif_encoder_descriptor_supportes_lossless_compression(struct heif_encoder_descriptor*);
     *}
     */
    public static int heif_encoder_descriptor_supportes_lossless_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supportes_lossless_compression$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_point = 0;
     *}
     */
    public static int heif_region_type_point() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_rectangle = 1;
     *}
     */
    public static int heif_region_type_rectangle() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_ellipse = 2;
     *}
     */
    public static int heif_region_type_ellipse() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_polygon = 3;
     *}
     */
    public static int heif_region_type_polygon() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_referenced_mask = 4;
     *}
     */
    public static int heif_region_type_referenced_mask() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_inline_mask = 5;
     *}
     */
    public static int heif_region_type_inline_mask() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * enum heif_region_type.heif_region_type_polyline = 6;
     *}
     */
    public static int heif_region_type_polyline() {
        return (int) 6L;
    }

    public static MethodHandle heif_image_handle_get_number_of_region_items$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2, "heif_image_handle_get_number_of_region_items");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_number_of_region_items(struct heif_image_handle* image_handle);
     *}
     */
    public static int heif_image_handle_get_number_of_region_items(MemorySegment image_handle) {
        var mh$ = heif_image_handle_get_number_of_region_items$MH();
        try {
            return (int) mh$.invokeExact(image_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_get_list_of_region_item_ids$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3, "heif_image_handle_get_list_of_region_item_ids");
    }

    /**
     * {@snippet :
     * int heif_image_handle_get_list_of_region_item_ids(struct heif_image_handle* image_handle, heif_item_id* region_item_ids_array, int max_count);
     *}
     */
    public static int heif_image_handle_get_list_of_region_item_ids(MemorySegment image_handle, MemorySegment region_item_ids_array, int max_count) {
        var mh$ = heif_image_handle_get_list_of_region_item_ids$MH();
        try {
            return (int) mh$.invokeExact(image_handle, region_item_ids_array, max_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_context_get_region_item$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4, "heif_context_get_region_item");
    }

    /**
     * {@snippet :
     * struct heif_error heif_context_get_region_item(struct heif_context* context, heif_item_id region_item_id, struct heif_region_item** out);
     *}
     */
    public static MemorySegment heif_context_get_region_item(SegmentAllocator allocator, MemorySegment context, int region_item_id, MemorySegment out) {
        var mh$ = heif_context_get_region_item$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, context, region_item_id, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5, "heif_region_item_get_id");
    }

    /**
     * {@snippet :
     * heif_item_id heif_region_item_get_id(struct heif_region_item*);
     *}
     */
    public static int heif_region_item_get_id(MemorySegment x0) {
        var mh$ = heif_region_item_get_id$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_release$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0, "heif_region_item_release");
    }

    /**
     * {@snippet :
     * void heif_region_item_release(struct heif_region_item*);
     *}
     */
    public static void heif_region_item_release(MemorySegment x0) {
        var mh$ = heif_region_item_release$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_get_reference_size$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1, "heif_region_item_get_reference_size");
    }

    /**
     * {@snippet :
     * void heif_region_item_get_reference_size(struct heif_region_item*, uint32_t* width, uint32_t* height);
     *}
     */
    public static void heif_region_item_get_reference_size(MemorySegment x0, MemorySegment width, MemorySegment height) {
        var mh$ = heif_region_item_get_reference_size$MH();
        try {
            mh$.invokeExact(x0, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_get_number_of_regions$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2, "heif_region_item_get_number_of_regions");
    }

    /**
     * {@snippet :
     * int heif_region_item_get_number_of_regions(struct heif_region_item* region_item);
     *}
     */
    public static int heif_region_item_get_number_of_regions(MemorySegment region_item) {
        var mh$ = heif_region_item_get_number_of_regions$MH();
        try {
            return (int) mh$.invokeExact(region_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_get_list_of_regions$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3, "heif_region_item_get_list_of_regions");
    }

    /**
     * {@snippet :
     * int heif_region_item_get_list_of_regions(struct heif_region_item* region_item, struct heif_region** out_regions_array, int max_count);
     *}
     */
    public static int heif_region_item_get_list_of_regions(MemorySegment region_item, MemorySegment out_regions_array, int max_count) {
        var mh$ = heif_region_item_get_list_of_regions$MH();
        try {
            return (int) mh$.invokeExact(region_item, out_regions_array, max_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_release$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4, "heif_region_release");
    }

    /**
     * {@snippet :
     * void heif_region_release(struct heif_region* region);
     *}
     */
    public static void heif_region_release(MemorySegment region) {
        var mh$ = heif_region_release$MH();
        try {
            mh$.invokeExact(region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_release_many$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5, "heif_region_release_many");
    }

    /**
     * {@snippet :
     * void heif_region_release_many(struct heif_region** regions_array, int num);
     *}
     */
    public static void heif_region_release_many(MemorySegment regions_array, int num) {
        var mh$ = heif_region_release_many$MH();
        try {
            mh$.invokeExact(regions_array, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0, "heif_region_get_type");
    }

    /**
     * {@snippet :
     * enum heif_region_type heif_region_get_type(struct heif_region* region);
     *}
     */
    public static int heif_region_get_type(MemorySegment region) {
        var mh$ = heif_region_get_type$MH();
        try {
            return (int) mh$.invokeExact(region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_point$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1, "heif_region_get_point");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_point(struct heif_region* region, int32_t* x, int32_t* y);
     *}
     */
    public static MemorySegment heif_region_get_point(SegmentAllocator allocator, MemorySegment region, MemorySegment x, MemorySegment y) {
        var mh$ = heif_region_get_point$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_point_transformed$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2, "heif_region_get_point_transformed");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_point_transformed(struct heif_region* region, double* x, double* y, heif_item_id image_id);
     *}
     */
    public static MemorySegment heif_region_get_point_transformed(SegmentAllocator allocator, MemorySegment region, MemorySegment x, MemorySegment y, int image_id) {
        var mh$ = heif_region_get_point_transformed$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, x, y, image_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3, "heif_region_get_rectangle");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_rectangle(struct heif_region* region, int32_t* x, int32_t* y, uint32_t* width, uint32_t* height);
     *}
     */
    public static MemorySegment heif_region_get_rectangle(SegmentAllocator allocator, MemorySegment region, MemorySegment x, MemorySegment y, MemorySegment width,
                                                          MemorySegment height) {
        var mh$ = heif_region_get_rectangle$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_rectangle_transformed$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5, "heif_region_get_rectangle_transformed");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_rectangle_transformed(struct heif_region* region, double* x, double* y, double* width, double* height, heif_item_id image_id);
     *}
     */
    public static MemorySegment heif_region_get_rectangle_transformed(SegmentAllocator allocator, MemorySegment region, MemorySegment x, MemorySegment y, MemorySegment width,
                                                                      MemorySegment height, int image_id) {
        var mh$ = heif_region_get_rectangle_transformed$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, x, y, width, height, image_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_ellipse$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0, "heif_region_get_ellipse");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_ellipse(struct heif_region* region, int32_t* x, int32_t* y, uint32_t* radius_x, uint32_t* radius_y);
     *}
     */
    public static MemorySegment heif_region_get_ellipse(SegmentAllocator allocator, MemorySegment region, MemorySegment x, MemorySegment y, MemorySegment radius_x,
                                                        MemorySegment radius_y) {
        var mh$ = heif_region_get_ellipse$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, x, y, radius_x, radius_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_ellipse_transformed$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1, "heif_region_get_ellipse_transformed");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_ellipse_transformed(struct heif_region* region, double* x, double* y, double* radius_x, double* radius_y, heif_item_id image_id);
     *}
     */
    public static MemorySegment heif_region_get_ellipse_transformed(SegmentAllocator allocator, MemorySegment region, MemorySegment x, MemorySegment y, MemorySegment radius_x,
                                                                    MemorySegment radius_y, int image_id) {
        var mh$ = heif_region_get_ellipse_transformed$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, x, y, radius_x, radius_y, image_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_polygon_num_points$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2, "heif_region_get_polygon_num_points");
    }

    /**
     * {@snippet :
     * int heif_region_get_polygon_num_points(struct heif_region* region);
     *}
     */
    public static int heif_region_get_polygon_num_points(MemorySegment region) {
        var mh$ = heif_region_get_polygon_num_points$MH();
        try {
            return (int) mh$.invokeExact(region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_polygon_points$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3, "heif_region_get_polygon_points");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_polygon_points(struct heif_region* region, int32_t* out_pts_array);
     *}
     */
    public static MemorySegment heif_region_get_polygon_points(SegmentAllocator allocator, MemorySegment region, MemorySegment out_pts_array) {
        var mh$ = heif_region_get_polygon_points$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, out_pts_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_polygon_points_transformed$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4, "heif_region_get_polygon_points_transformed");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_polygon_points_transformed(struct heif_region* region, double* out_pts_array, heif_item_id image_id);
     *}
     */
    public static MemorySegment heif_region_get_polygon_points_transformed(SegmentAllocator allocator, MemorySegment region, MemorySegment out_pts_array, int image_id) {
        var mh$ = heif_region_get_polygon_points_transformed$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, out_pts_array, image_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_polyline_num_points$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5, "heif_region_get_polyline_num_points");
    }

    /**
     * {@snippet :
     * int heif_region_get_polyline_num_points(struct heif_region* region);
     *}
     */
    public static int heif_region_get_polyline_num_points(MemorySegment region) {
        var mh$ = heif_region_get_polyline_num_points$MH();
        try {
            return (int) mh$.invokeExact(region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_polyline_points$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0, "heif_region_get_polyline_points");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_polyline_points(struct heif_region* region, int32_t* out_pts_array);
     *}
     */
    public static MemorySegment heif_region_get_polyline_points(SegmentAllocator allocator, MemorySegment region, MemorySegment out_pts_array) {
        var mh$ = heif_region_get_polyline_points$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, out_pts_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_get_polyline_points_transformed$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1, "heif_region_get_polyline_points_transformed");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_get_polyline_points_transformed(struct heif_region* region, double* out_pts_array, heif_item_id image_id);
     *}
     */
    public static MemorySegment heif_region_get_polyline_points_transformed(SegmentAllocator allocator, MemorySegment region, MemorySegment out_pts_array, int image_id) {
        var mh$ = heif_region_get_polyline_points_transformed$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, region, out_pts_array, image_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_image_handle_add_region_item$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2, "heif_image_handle_add_region_item");
    }

    /**
     * {@snippet :
     * struct heif_error heif_image_handle_add_region_item(struct heif_image_handle* image_handle, uint32_t reference_width, uint32_t reference_height, struct heif_region_item** out_region_item);
     *}
     */
    public static MemorySegment heif_image_handle_add_region_item(SegmentAllocator allocator, MemorySegment image_handle, int reference_width, int reference_height,
                                                                  MemorySegment out_region_item) {
        var mh$ = heif_image_handle_add_region_item$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, image_handle, reference_width, reference_height, out_region_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_add_region_point$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3, "heif_region_item_add_region_point");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_item_add_region_point(struct heif_region_item*, int32_t x, int32_t y, struct heif_region** out_region);
     *}
     */
    public static MemorySegment heif_region_item_add_region_point(SegmentAllocator allocator, MemorySegment x1, int x, int y, MemorySegment out_region) {
        var mh$ = heif_region_item_add_region_point$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, x, y, out_region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_add_region_rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5, "heif_region_item_add_region_rectangle");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_item_add_region_rectangle(struct heif_region_item*, int32_t x, int32_t y, uint32_t width, uint32_t height, struct heif_region** out_region);
     *}
     */
    public static MemorySegment heif_region_item_add_region_rectangle(SegmentAllocator allocator, MemorySegment x1, int x, int y, int width, int height,
                                                                      MemorySegment out_region) {
        var mh$ = heif_region_item_add_region_rectangle$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, x, y, width, height, out_region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_add_region_ellipse$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0, "heif_region_item_add_region_ellipse");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_item_add_region_ellipse(struct heif_region_item*, int32_t x, int32_t y, uint32_t radius_x, uint32_t radius_y, struct heif_region** out_region);
     *}
     */
    public static MemorySegment heif_region_item_add_region_ellipse(SegmentAllocator allocator, MemorySegment x1, int x, int y, int radius_x, int radius_y,
                                                                    MemorySegment out_region) {
        var mh$ = heif_region_item_add_region_ellipse$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, x, y, radius_x, radius_y, out_region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_add_region_polygon$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2, "heif_region_item_add_region_polygon");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_item_add_region_polygon(struct heif_region_item*, const int32_t* pts_array, int nPoints, struct heif_region** out_region);
     *}
     */
    public static MemorySegment heif_region_item_add_region_polygon(SegmentAllocator allocator, MemorySegment x1, MemorySegment pts_array, int nPoints,
                                                                    MemorySegment out_region) {
        var mh$ = heif_region_item_add_region_polygon$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, pts_array, nPoints, out_region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle heif_region_item_add_region_polyline$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3, "heif_region_item_add_region_polyline");
    }

    /**
     * {@snippet :
     * struct heif_error heif_region_item_add_region_polyline(struct heif_region_item*, const int32_t* pts_array, int nPoints, struct heif_region** out_region);
     *}
     */
    public static MemorySegment heif_region_item_add_region_polyline(SegmentAllocator allocator, MemorySegment x1, MemorySegment pts_array, int nPoints,
                                                                     MemorySegment out_region) {
        var mh$ = heif_region_item_add_region_polyline$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(allocator, x1, pts_array, nPoints, out_region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * #define NULL 0
     *}
     */
    public static MemorySegment NULL() {
        return constants$64.const$4;
    }

    /**
     * {@snippet :
     * #define __DARWIN_SUF_64_BIT_INO_T "$INODE64"
     *}
     */
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$64.const$5;
    }

    /**
     * {@snippet :
     * #define __DARWIN_SUF_1050 "$1050"
     *}
     */
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$65.const$0;
    }

    /**
     * {@snippet :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     *}
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$65.const$1;
    }

    /**
     * {@snippet :
     * #define __DARWIN_C_ANSI 4096
     *}
     */
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_C_FULL 900000
     *}
     */
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_C_LEVEL 900000
     *}
     */
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }

    /**
     * {@snippet :
     * #define __DARWIN_NULL 0
     *}
     */
    public static MemorySegment __DARWIN_NULL() {
        return constants$64.const$4;
    }

    /**
     * {@snippet :
     * #define USER_ADDR_NULL 0
     *}
     */
    public static long USER_ADDR_NULL() {
        return 0L;
    }

    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     *}
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define INT8_MIN -128
     *}
     */
    public static int INT8_MIN() {
        return (int) -128L;
    }

    /**
     * {@snippet :
     * #define INT16_MIN -32768
     *}
     */
    public static int INT16_MIN() {
        return (int) -32768L;
    }

    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     *}
     */
    public static int INT32_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     *}
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     *}
     */
    public static int UINT32_MAX() {
        return (int) 4294967295L;
    }

    /**
     * {@snippet :
     * #define UINT64_MAX -1
     *}
     */
    public static long UINT64_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     *}
     */
    public static int INT_LEAST8_MIN() {
        return (int) -128L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     *}
     */
    public static int INT_LEAST16_MIN() {
        return (int) -32768L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     *}
     */
    public static int INT_LEAST32_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     *}
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     *}
     */
    public static int INT_LEAST8_MAX() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     *}
     */
    public static int INT_LEAST16_MAX() {
        return (int) 32767L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     *}
     */
    public static int INT_LEAST32_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     *}
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     *}
     */
    public static int UINT_LEAST8_MAX() {
        return (int) 255L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     *}
     */
    public static int UINT_LEAST16_MAX() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     *}
     */
    public static int UINT_LEAST32_MAX() {
        return (int) 4294967295L;
    }

    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     *}
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     *}
     */
    public static int INT_FAST8_MIN() {
        return (int) -128L;
    }

    /**
     * {@snippet :
     * #define INT_FAST16_MIN -32768
     *}
     */
    public static int INT_FAST16_MIN() {
        return (int) -32768L;
    }

    /**
     * {@snippet :
     * #define INT_FAST32_MIN -2147483648
     *}
     */
    public static int INT_FAST32_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     *}
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     *}
     */
    public static int INT_FAST8_MAX() {
        return (int) 127L;
    }

    /**
     * {@snippet :
     * #define INT_FAST16_MAX 32767
     *}
     */
    public static int INT_FAST16_MAX() {
        return (int) 32767L;
    }

    /**
     * {@snippet :
     * #define INT_FAST32_MAX 2147483647
     *}
     */
    public static int INT_FAST32_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     *}
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     *}
     */
    public static int UINT_FAST8_MAX() {
        return (int) 255L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST16_MAX 65535
     *}
     */
    public static int UINT_FAST16_MAX() {
        return (int) 65535L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST32_MAX 4294967295
     *}
     */
    public static int UINT_FAST32_MAX() {
        return (int) 4294967295L;
    }

    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     *}
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     *}
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     *}
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     *}
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     *}
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     *}
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     *}
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     *}
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }

    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     *}
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define SIZE_MAX -1
     *}
     */
    public static long SIZE_MAX() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define RSIZE_MAX 9223372036854775807
     *}
     */
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }

    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     *}
     */
    public static int WCHAR_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     *}
     */
    public static int WCHAR_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define WINT_MIN -2147483648
     *}
     */
    public static int WINT_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define WINT_MAX 2147483647
     *}
     */
    public static int WINT_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     *}
     */
    public static int SIG_ATOMIC_MIN() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     *}
     */
    public static int SIG_ATOMIC_MAX() {
        return (int) 2147483647L;
    }

    /**
     * {@snippet :
     * #define LIBHEIF_NUMERIC_VERSION 17825792
     *}
     */
    public static int LIBHEIF_NUMERIC_VERSION() {
        return (int) 17825792L;
    }

    /**
     * {@snippet :
     * #define LIBHEIF_VERSION "1.16.0"
     *}
     */
    public static MemorySegment LIBHEIF_VERSION() {
        return constants$65.const$2;
    }

    /**
     * {@snippet :
     * #define LIBHEIF_PLUGIN_DIRECTORY "/usr/local/lib/libheif"
     *}
     */
    public static MemorySegment LIBHEIF_PLUGIN_DIRECTORY() {
        return constants$65.const$3;
    }

    /**
     * {@snippet :
     * #define heif_brand2_heic 1751476579
     *}
     */
    public static int heif_brand2_heic() {
        return (int) 1751476579L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_heix 1751476600
     *}
     */
    public static int heif_brand2_heix() {
        return (int) 1751476600L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_hevc 1751479907
     *}
     */
    public static int heif_brand2_hevc() {
        return (int) 1751479907L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_hevx 1751479928
     *}
     */
    public static int heif_brand2_hevx() {
        return (int) 1751479928L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_heim 1751476589
     *}
     */
    public static int heif_brand2_heim() {
        return (int) 1751476589L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_heis 1751476595
     *}
     */
    public static int heif_brand2_heis() {
        return (int) 1751476595L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_hevm 1751479917
     *}
     */
    public static int heif_brand2_hevm() {
        return (int) 1751479917L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_hevs 1751479923
     *}
     */
    public static int heif_brand2_hevs() {
        return (int) 1751479923L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_avif 1635150182
     *}
     */
    public static int heif_brand2_avif() {
        return (int) 1635150182L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_avis 1635150195
     *}
     */
    public static int heif_brand2_avis() {
        return (int) 1635150195L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_mif1 1835623985
     *}
     */
    public static int heif_brand2_mif1() {
        return (int) 1835623985L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_msf1 1836279345
     *}
     */
    public static int heif_brand2_msf1() {
        return (int) 1836279345L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_vvic 1987471715
     *}
     */
    public static int heif_brand2_vvic() {
        return (int) 1987471715L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_vvis 1987471731
     *}
     */
    public static int heif_brand2_vvis() {
        return (int) 1987471731L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_evbi 1702257257
     *}
     */
    public static int heif_brand2_evbi() {
        return (int) 1702257257L;
    }

    /**
     * {@snippet :
     * #define heif_brand2_evbs 1702257267
     *}
     */
    public static int heif_brand2_evbs() {
        return (int) 1702257267L;
    }

    /**
     * {@snippet :
     * #define LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA 2
     *}
     */
    public static long LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA() {
        return 2L;
    }

    /**
     * {@snippet :
     * #define LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH 4
     *}
     */
    public static long LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH() {
        return 4L;
    }

    /**
     * {@snippet :
     * #define heif_chroma_interleaved_24bit 10
     *}
     */
    public static int heif_chroma_interleaved_24bit() {
        return (int) 10L;
    }

    /**
     * {@snippet :
     * #define heif_chroma_interleaved_32bit 11
     *}
     */
    public static int heif_chroma_interleaved_32bit() {
        return (int) 11L;
    }
}


