// Generated by jextract

package com.github.gotson.nightmonkeys.heif.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet :
 * struct heif_mastering_display_colour_volume {
 *     uint16_t display_primaries_x[3];
 *     uint16_t display_primaries_y[3];
 *     uint16_t white_point_x;
 *     uint16_t white_point_y;
 *     uint32_t max_display_mastering_luminance;
 *     uint32_t min_display_mastering_luminance;
 * };
 *}
 */
public class heif_mastering_display_colour_volume {

    public static MemoryLayout $LAYOUT() {
        return constants$42.const$1;
    }

    public static MemorySegment display_primaries_x$slice(MemorySegment seg) {
        return seg.asSlice(0, 6);
    }

    public static MemorySegment display_primaries_y$slice(MemorySegment seg) {
        return seg.asSlice(6, 6);
    }

    public static VarHandle white_point_x$VH() {
        return constants$42.const$2;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint16_t white_point_x;
     *}
     */
    public static short white_point_x$get(MemorySegment seg) {
        return (short) constants$42.const$2.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint16_t white_point_x;
     *}
     */
    public static void white_point_x$set(MemorySegment seg, short x) {
        constants$42.const$2.set(seg, x);
    }

    public static short white_point_x$get(MemorySegment seg, long index) {
        return (short) constants$42.const$2.get(seg.asSlice(index * sizeof()));
    }

    public static void white_point_x$set(MemorySegment seg, long index, short x) {
        constants$42.const$2.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle white_point_y$VH() {
        return constants$42.const$3;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint16_t white_point_y;
     *}
     */
    public static short white_point_y$get(MemorySegment seg) {
        return (short) constants$42.const$3.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint16_t white_point_y;
     *}
     */
    public static void white_point_y$set(MemorySegment seg, short x) {
        constants$42.const$3.set(seg, x);
    }

    public static short white_point_y$get(MemorySegment seg, long index) {
        return (short) constants$42.const$3.get(seg.asSlice(index * sizeof()));
    }

    public static void white_point_y$set(MemorySegment seg, long index, short x) {
        constants$42.const$3.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle max_display_mastering_luminance$VH() {
        return constants$42.const$4;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t max_display_mastering_luminance;
     *}
     */
    public static int max_display_mastering_luminance$get(MemorySegment seg) {
        return (int) constants$42.const$4.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t max_display_mastering_luminance;
     *}
     */
    public static void max_display_mastering_luminance$set(MemorySegment seg, int x) {
        constants$42.const$4.set(seg, x);
    }

    public static int max_display_mastering_luminance$get(MemorySegment seg, long index) {
        return (int) constants$42.const$4.get(seg.asSlice(index * sizeof()));
    }

    public static void max_display_mastering_luminance$set(MemorySegment seg, long index, int x) {
        constants$42.const$4.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle min_display_mastering_luminance$VH() {
        return constants$42.const$5;
    }

    /**
     * Getter for field:
     * {@snippet :
     * uint32_t min_display_mastering_luminance;
     *}
     */
    public static int min_display_mastering_luminance$get(MemorySegment seg) {
        return (int) constants$42.const$5.get(seg);
    }

    /**
     * Setter for field:
     * {@snippet :
     * uint32_t min_display_mastering_luminance;
     *}
     */
    public static void min_display_mastering_luminance$set(MemorySegment seg, int x) {
        constants$42.const$5.set(seg, x);
    }

    public static int min_display_mastering_luminance$get(MemorySegment seg, long index) {
        return (int) constants$42.const$5.get(seg.asSlice(index * sizeof()));
    }

    public static void min_display_mastering_luminance$set(MemorySegment seg, long index, int x) {
        constants$42.const$5.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena);
    }
}


