// Generated by jextract

package com.github.gotson.nightmonkeys.heif.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_property_user_description {
 *     int version;
 *     const char *lang;
 *     const char *name;
 *     const char *description;
 *     const char *tags;
 * }
 * }
 */
public class heif_property_user_description {

    heif_property_user_description() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        heif_h.C_POINTER.withName("lang"),
        heif_h.C_POINTER.withName("name"),
        heif_h.C_POINTER.withName("description"),
        heif_h.C_POINTER.withName("tags")
    ).withName("heif_property_user_description");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout lang$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lang"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *lang
     * }
     */
    public static final AddressLayout lang$layout() {
        return lang$LAYOUT;
    }

    private static final long lang$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *lang
     * }
     */
    public static final long lang$offset() {
        return lang$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *lang
     * }
     */
    public static MemorySegment lang(MemorySegment struct) {
        return struct.get(lang$LAYOUT, lang$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *lang
     * }
     */
    public static void lang(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lang$LAYOUT, lang$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout tags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *tags
     * }
     */
    public static final AddressLayout tags$layout() {
        return tags$LAYOUT;
    }

    private static final long tags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *tags
     * }
     */
    public static final long tags$offset() {
        return tags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *tags
     * }
     */
    public static MemorySegment tags(MemorySegment struct) {
        return struct.get(tags$LAYOUT, tags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *tags
     * }
     */
    public static void tags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tags$LAYOUT, tags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

